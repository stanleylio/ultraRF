
LUFA_CDC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000c4e  00000ce2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080011c  0080011c  00000cfe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cfe  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000658  00000000  00000000  00000d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000a64e  00000000  00000000  00001386  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002af1  00000000  00000000  0000b9d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000061de  00000000  00000000  0000e4c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000f34  00000000  00000000  000146a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003da7  00000000  00000000  000155d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000065ae  00000000  00000000  0001937f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000758  00000000  00000000  0001f92d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	a5 c0       	rjmp	.+330    	; 0x14c <__ctors_end>
   2:	00 00       	nop
   4:	be c0       	rjmp	.+380    	; 0x182 <__bad_interrupt>
   6:	00 00       	nop
   8:	bc c0       	rjmp	.+376    	; 0x182 <__bad_interrupt>
   a:	00 00       	nop
   c:	ba c0       	rjmp	.+372    	; 0x182 <__bad_interrupt>
   e:	00 00       	nop
  10:	b8 c0       	rjmp	.+368    	; 0x182 <__bad_interrupt>
  12:	00 00       	nop
  14:	b6 c0       	rjmp	.+364    	; 0x182 <__bad_interrupt>
  16:	00 00       	nop
  18:	b4 c0       	rjmp	.+360    	; 0x182 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b2 c0       	rjmp	.+356    	; 0x182 <__bad_interrupt>
  1e:	00 00       	nop
  20:	b0 c0       	rjmp	.+352    	; 0x182 <__bad_interrupt>
  22:	00 00       	nop
  24:	ae c0       	rjmp	.+348    	; 0x182 <__bad_interrupt>
  26:	00 00       	nop
  28:	f0 c2       	rjmp	.+1504   	; 0x60a <__vector_10>
  2a:	00 00       	nop
  2c:	b4 c3       	rjmp	.+1896   	; 0x796 <__vector_11>
  2e:	00 00       	nop
  30:	a8 c0       	rjmp	.+336    	; 0x182 <__bad_interrupt>
  32:	00 00       	nop
  34:	a6 c0       	rjmp	.+332    	; 0x182 <__bad_interrupt>
  36:	00 00       	nop
  38:	a4 c0       	rjmp	.+328    	; 0x182 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a2 c0       	rjmp	.+324    	; 0x182 <__bad_interrupt>
  3e:	00 00       	nop
  40:	a0 c0       	rjmp	.+320    	; 0x182 <__bad_interrupt>
  42:	00 00       	nop
  44:	9e c0       	rjmp	.+316    	; 0x182 <__bad_interrupt>
  46:	00 00       	nop
  48:	9c c0       	rjmp	.+312    	; 0x182 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	9a c0       	rjmp	.+308    	; 0x182 <__bad_interrupt>
  4e:	00 00       	nop
  50:	98 c0       	rjmp	.+304    	; 0x182 <__bad_interrupt>
  52:	00 00       	nop
  54:	96 c0       	rjmp	.+300    	; 0x182 <__bad_interrupt>
  56:	00 00       	nop
  58:	94 c0       	rjmp	.+296    	; 0x182 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	92 c0       	rjmp	.+292    	; 0x182 <__bad_interrupt>
  5e:	00 00       	nop
  60:	90 c0       	rjmp	.+288    	; 0x182 <__bad_interrupt>
  62:	00 00       	nop
  64:	8e c0       	rjmp	.+284    	; 0x182 <__bad_interrupt>
  66:	00 00       	nop
  68:	8c c0       	rjmp	.+280    	; 0x182 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	8a c0       	rjmp	.+276    	; 0x182 <__bad_interrupt>
  6e:	00 00       	nop
  70:	88 c0       	rjmp	.+272    	; 0x182 <__bad_interrupt>
  72:	00 00       	nop
  74:	86 c0       	rjmp	.+268    	; 0x182 <__bad_interrupt>
  76:	00 00       	nop
  78:	84 c0       	rjmp	.+264    	; 0x182 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	82 c0       	rjmp	.+260    	; 0x182 <__bad_interrupt>
  7e:	00 00       	nop
  80:	80 c0       	rjmp	.+256    	; 0x182 <__bad_interrupt>
  82:	00 00       	nop
  84:	7e c0       	rjmp	.+252    	; 0x182 <__bad_interrupt>
  86:	00 00       	nop
  88:	7c c0       	rjmp	.+248    	; 0x182 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	7a c0       	rjmp	.+244    	; 0x182 <__bad_interrupt>
  8e:	00 00       	nop
  90:	78 c0       	rjmp	.+240    	; 0x182 <__bad_interrupt>
  92:	00 00       	nop
  94:	76 c0       	rjmp	.+236    	; 0x182 <__bad_interrupt>
  96:	00 00       	nop
  98:	74 c0       	rjmp	.+232    	; 0x182 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	72 c0       	rjmp	.+228    	; 0x182 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	70 c0       	rjmp	.+224    	; 0x182 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	6e c0       	rjmp	.+220    	; 0x182 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	6c c0       	rjmp	.+216    	; 0x182 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d 04       	cpc	r2, r13
  ae:	4f 04       	cpc	r4, r15
  b0:	31 05       	cpc	r19, r1
  b2:	4f 04       	cpc	r4, r15
  b4:	31 05       	cpc	r19, r1
  b6:	91 04       	cpc	r9, r1
  b8:	b2 04       	cpc	r11, r2
  ba:	31 05       	cpc	r19, r1
  bc:	04 05       	cpc	r16, r4
  be:	16 05       	cpc	r17, r6

000000c0 <ProductString>:
  c0:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
  d0:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

000000de <ManufacturerString>:
  de:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  ee:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000f8 <LanguageString>:
  f8:	04 03 09 04                                         ....

000000fc <ConfigurationDescriptor>:
  fc:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
 10c:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
 11c:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
 12c:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

0000013a <DeviceDescriptor>:
 13a:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
 14a:	dc 01                                               ..

0000014c <__ctors_end>:
 14c:	11 24       	eor	r1, r1
 14e:	1f be       	out	0x3f, r1	; 63
 150:	cf ef       	ldi	r28, 0xFF	; 255
 152:	da e0       	ldi	r29, 0x0A	; 10
 154:	de bf       	out	0x3e, r29	; 62
 156:	cd bf       	out	0x3d, r28	; 61

00000158 <__do_copy_data>:
 158:	11 e0       	ldi	r17, 0x01	; 1
 15a:	a0 e0       	ldi	r26, 0x00	; 0
 15c:	b1 e0       	ldi	r27, 0x01	; 1
 15e:	ee e4       	ldi	r30, 0x4E	; 78
 160:	fc e0       	ldi	r31, 0x0C	; 12
 162:	02 c0       	rjmp	.+4      	; 0x168 <__do_copy_data+0x10>
 164:	05 90       	lpm	r0, Z+
 166:	0d 92       	st	X+, r0
 168:	ac 31       	cpi	r26, 0x1C	; 28
 16a:	b1 07       	cpc	r27, r17
 16c:	d9 f7       	brne	.-10     	; 0x164 <__do_copy_data+0xc>

0000016e <__do_clear_bss>:
 16e:	21 e0       	ldi	r18, 0x01	; 1
 170:	ac e1       	ldi	r26, 0x1C	; 28
 172:	b1 e0       	ldi	r27, 0x01	; 1
 174:	01 c0       	rjmp	.+2      	; 0x178 <.do_clear_bss_start>

00000176 <.do_clear_bss_loop>:
 176:	1d 92       	st	X+, r1

00000178 <.do_clear_bss_start>:
 178:	a8 32       	cpi	r26, 0x28	; 40
 17a:	b2 07       	cpc	r27, r18
 17c:	e1 f7       	brne	.-8      	; 0x176 <.do_clear_bss_loop>
 17e:	7b d0       	rcall	.+246    	; 0x276 <main>
 180:	64 c5       	rjmp	.+2760   	; 0xc4a <_exit>

00000182 <__bad_interrupt>:
 182:	3e cf       	rjmp	.-388    	; 0x0 <__vectors>

00000184 <write_register>:
	return tmp;
}

static inline void write_register(uint8_t reg, uint8_t val)
{
	clear(PORTF,CSN);
 184:	8d 98       	cbi	0x11, 5	; 17
	SPI_TransferByte(W_REGISTER | reg);
 186:	80 62       	ori	r24, 0x20	; 32
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
 188:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
 18a:	0d b4       	in	r0, 0x2d	; 45
 18c:	07 fe       	sbrs	r0, 7
 18e:	fd cf       	rjmp	.-6      	; 0x18a <write_register+0x6>
				return SPDR;
 190:	8e b5       	in	r24, 0x2e	; 46
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
 192:	6e bd       	out	0x2e, r22	; 46
				while (!(SPSR & (1 << SPIF)));
 194:	0d b4       	in	r0, 0x2d	; 45
 196:	07 fe       	sbrs	r0, 7
 198:	fd cf       	rjmp	.-6      	; 0x194 <write_register+0x10>
				return SPDR;
 19a:	8e b5       	in	r24, 0x2e	; 46
	SPI_TransferByte(val);
	set(PORTF,CSN);
 19c:	8d 9a       	sbi	0x11, 5	; 17
 19e:	08 95       	ret

000001a0 <read_register>:
}

static inline uint8_t read_register(uint8_t reg)
{
	uint8_t tmp = 0;
	clear(PORTF,CSN);
 1a0:	8d 98       	cbi	0x11, 5	; 17
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
 1a2:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
 1a4:	0d b4       	in	r0, 0x2d	; 45
 1a6:	07 fe       	sbrs	r0, 7
 1a8:	fd cf       	rjmp	.-6      	; 0x1a4 <read_register+0x4>
				return SPDR;
 1aa:	8e b5       	in	r24, 0x2e	; 46
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
 1ac:	8f ef       	ldi	r24, 0xFF	; 255
 1ae:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
 1b0:	0d b4       	in	r0, 0x2d	; 45
 1b2:	07 fe       	sbrs	r0, 7
 1b4:	fd cf       	rjmp	.-6      	; 0x1b0 <read_register+0x10>
				return SPDR;
 1b6:	8e b5       	in	r24, 0x2e	; 46
	SPI_TransferByte(R_REGISTER | reg);
	tmp = SPI_TransferByte(NOP);
	set(PORTF,CSN);
 1b8:	8d 9a       	sbi	0x11, 5	; 17
	return tmp;
}
 1ba:	08 95       	ret

000001bc <SetupHardware>:


void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 1bc:	84 b7       	in	r24, 0x34	; 52
 1be:	87 7f       	andi	r24, 0xF7	; 247
 1c0:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 1c2:	88 e1       	ldi	r24, 0x18	; 24
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	f8 94       	cli
 1c8:	80 93 60 00 	sts	0x0060, r24
 1cc:	10 92 60 00 	sts	0x0060, r1
 1d0:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	80 e8       	ldi	r24, 0x80	; 128
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	f8 94       	cli
 1da:	80 93 61 00 	sts	0x0061, r24
 1de:	90 93 61 00 	sts	0x0061, r25
 1e2:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	LED_amber_INIT;
 1e4:	20 9a       	sbi	0x04, 0	; 4
	LED_amber_OFF;
 1e6:	28 9a       	sbi	0x05, 0	; 5
	LED_green_INIT;
 1e8:	55 9a       	sbi	0x0a, 5	; 10
	LED_green_OFF;
 1ea:	5d 9a       	sbi	0x0b, 5	; 11
}

static void init_nRF24L01(void)
{
	// nRF24L01+ control pins
	set(DDRF,CE);
 1ec:	86 9a       	sbi	0x10, 6	; 16
	set(DDRF,CSN);
 1ee:	85 9a       	sbi	0x10, 5	; 16
	clear(DDRB,IRQ);							// now on PB6
 1f0:	26 98       	cbi	0x04, 6	; 4
	clear(PORTF,CE);
 1f2:	8e 98       	cbi	0x11, 6	; 17
	set(PORTF,CSN);
 1f4:	8d 9a       	sbi	0x11, 5	; 17

	// SPI	might not need these
	DDRB |= 0b00000110;							// MOSI and SCK as output, PB6 as IRQ input
 1f6:	84 b1       	in	r24, 0x04	; 4
 1f8:	86 60       	ori	r24, 0x06	; 6
 1fa:	84 b9       	out	0x04, r24	; 4
	SPCR = _BV(SPE) | _BV(MSTR);				// Enable SPI as Master
 1fc:	80 e5       	ldi	r24, 0x50	; 80
 1fe:	8c bd       	out	0x2c, r24	; 44
	set(SPSR,SPI2X);							// awesome speed (fclk/2)
 200:	8d b5       	in	r24, 0x2d	; 45
 202:	81 60       	ori	r24, 0x01	; 1
 204:	8d bd       	out	0x2d, r24	; 45

	write_register(CONFIG,0b00111110);			// POWER UP, 2-byte CRC, as PTX, mask TX_DS and MAX_RT
 206:	6e e3       	ldi	r22, 0x3E	; 62
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	bc df       	rcall	.-136    	; 0x184 <write_register>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20c:	8f e1       	ldi	r24, 0x1F	; 31
 20e:	9e e4       	ldi	r25, 0x4E	; 78
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <SetupHardware+0x54>
 214:	00 c0       	rjmp	.+0      	; 0x216 <SetupHardware+0x5a>
 216:	00 00       	nop
	_delay_ms(5);								// Tpd2stby, 4.5mS minimum for crystal
	write_register(EN_AA,0);					// disable auto retransmission
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	b3 df       	rcall	.-154    	; 0x184 <write_register>
	write_register(SETUP_AW,0b00000001);		// 3-byte address field
 21e:	61 e0       	ldi	r22, 0x01	; 1
 220:	83 e0       	ldi	r24, 0x03	; 3
 222:	b0 df       	rcall	.-160    	; 0x184 <write_register>
	write_register(SETUP_RETR,0);				// 0 retry
 224:	60 e0       	ldi	r22, 0x00	; 0
 226:	84 e0       	ldi	r24, 0x04	; 4
 228:	ad df       	rcall	.-166    	; 0x184 <write_register>
	write_register(RF_CH,77);					// channel = 2400MHz + val MHz
 22a:	6d e4       	ldi	r22, 0x4D	; 77
 22c:	85 e0       	ldi	r24, 0x05	; 5
 22e:	aa df       	rcall	.-172    	; 0x184 <write_register>
	//write_register(RF_SETUP,0b00100110);		// air rate=250kbps, power=0dBm
	//write_register(RF_SETUP,0b00100000);		// air rate=250kbps, power=-18dBm
	//write_register(RF_SETUP,0b00000110);		// air rate=1Mbps, power=0dBm
	write_register(RF_SETUP,0b00001110);		// air rate=2Mbps, power=0dBm
 230:	6e e0       	ldi	r22, 0x0E	; 14
 232:	86 e0       	ldi	r24, 0x06	; 6
 234:	a7 df       	rcall	.-178    	; 0x184 <write_register>
	write_register(RX_PW_P0,1);					// pipe0 payload length=1byte
 236:	61 e0       	ldi	r22, 0x01	; 1
 238:	81 e1       	ldi	r24, 0x11	; 17
 23a:	a4 df       	rcall	.-184    	; 0x184 <write_register>
	write_register(FEATURE,EN_DYN_ACK);			// enable no ack
 23c:	60 e0       	ldi	r22, 0x00	; 0
 23e:	8d e1       	ldi	r24, 0x1D	; 29
 240:	a1 df       	rcall	.-190    	; 0x184 <write_register>
	return tmp;
}

static inline void flush_rx(void)
{
	clear(PORTF,CSN);
 242:	8d 98       	cbi	0x11, 5	; 17
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
 244:	82 ee       	ldi	r24, 0xE2	; 226
 246:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
 248:	0d b4       	in	r0, 0x2d	; 45
 24a:	07 fe       	sbrs	r0, 7
 24c:	fd cf       	rjmp	.-6      	; 0x248 <SetupHardware+0x8c>
				return SPDR;
 24e:	8e b5       	in	r24, 0x2e	; 46
	SPI_TransferByte(FLUSH_RX);
	set(PORTF,CSN);
 250:	8d 9a       	sbi	0x11, 5	; 17
}

static inline void flush_tx(void)
{
	clear(PORTF,CSN);
 252:	8d 98       	cbi	0x11, 5	; 17
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
 254:	81 ee       	ldi	r24, 0xE1	; 225
 256:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
 258:	0d b4       	in	r0, 0x2d	; 45
 25a:	07 fe       	sbrs	r0, 7
 25c:	fd cf       	rjmp	.-6      	; 0x258 <SetupHardware+0x9c>
				return SPDR;
 25e:	8e b5       	in	r24, 0x2e	; 46
	SPI_TransferByte(FLUSH_TX);
	set(PORTF,CSN);
 260:	8d 9a       	sbi	0x11, 5	; 17
	write_register(RF_SETUP,0b00001110);		// air rate=2Mbps, power=0dBm
	write_register(RX_PW_P0,1);					// pipe0 payload length=1byte
	write_register(FEATURE,EN_DYN_ACK);			// enable no ack
	flush_rx();
	flush_tx();
	write_register(STATUS,0b01110000);			// clear all interrupt flags
 262:	60 e7       	ldi	r22, 0x70	; 112
 264:	87 e0       	ldi	r24, 0x07	; 7
 266:	8e df       	rcall	.-228    	; 0x184 <write_register>
	
	init_nRF24L01();
	
	// ultrasonic sensor TX EN
	set(D9DDR,D9);
 268:	25 9a       	sbi	0x04, 5	; 4
	clear(D9PORT,D9);
 26a:	2d 98       	cbi	0x05, 5	; 5
	
	set(D2DDR,D2);
 26c:	51 9a       	sbi	0x0a, 1	; 10
	clear_D2;
 26e:	59 98       	cbi	0x0b, 1	; 11
	clear(D3DDR,D3);
 270:	50 98       	cbi	0x0a, 0	; 10
	set_D3;
 272:	58 9a       	sbi	0x0b, 0	; 11
 274:	08 95       	ret

00000276 <main>:
	},
};


int main(void)
{
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	1f 92       	push	r1
 27c:	cd b7       	in	r28, 0x3d	; 61
 27e:	de b7       	in	r29, 0x3e	; 62
	SetupHardware();
 280:	9d df       	rcall	.-198    	; 0x1bc <SetupHardware>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 282:	78 94       	sei
	return bit_is_set(tmp,MAX_RT);
}

static inline void nRF24_as_transmitter(void)
{
	uint8_t config = read_register(CONFIG);
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	8c df       	rcall	.-232    	; 0x1a0 <read_register>
	clear(config,PRIM_RX);
 288:	68 2f       	mov	r22, r24
 28a:	6e 7f       	andi	r22, 0xFE	; 254
	write_register(CONFIG,config);
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	7a df       	rcall	.-268    	; 0x184 <write_register>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 290:	87 e0       	ldi	r24, 0x07	; 7
 292:	92 e0       	ldi	r25, 0x02	; 2
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <main+0x1e>
 298:	00 c0       	rjmp	.+0      	; 0x29a <main+0x24>
 29a:	00 00       	nop
	_delay_us(130);
	clear(PORTF,CE);
 29c:	8e 98       	cbi	0x11, 6	; 17
 29e:	87 e0       	ldi	r24, 0x07	; 7
 2a0:	92 e0       	ldi	r25, 0x02	; 2
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <main+0x2c>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <main+0x32>
 2a8:	00 00       	nop
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
 2aa:	10 ea       	ldi	r17, 0xA0	; 160
 2ac:	01 e6       	ldi	r16, 0x61	; 97
	
	nRF24_as_transmitter();
	
	while (1)
	{
		loop_until_bit_is_clear(D3PIN,D3);
 2ae:	48 99       	sbic	0x09, 0	; 9
 2b0:	fe cf       	rjmp	.-4      	; 0x2ae <main+0x38>
		
		set(D9PORT,D9);
 2b2:	2d 9a       	sbi	0x05, 5	; 5
 2b4:	95 e8       	ldi	r25, 0x85	; 133
 2b6:	9a 95       	dec	r25
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <main+0x40>
 2ba:	00 00       	nop
		_delay_us(25);		// over 20us
		clear(D9PORT,D9);
 2bc:	2d 98       	cbi	0x05, 5	; 5
#include "LUFA/Drivers/Peripheral/SPI.h"
#include "util/delay.h"

static inline void nRF24_put_in_FIFO(uint8_t val)
{
	clear(PORTF,CSN);
 2be:	8d 98       	cbi	0x11, 5	; 17
 2c0:	1e bd       	out	0x2e, r17	; 46
				while (!(SPSR & (1 << SPIF)));
 2c2:	0d b4       	in	r0, 0x2d	; 45
 2c4:	07 fe       	sbrs	r0, 7
 2c6:	fd cf       	rjmp	.-6      	; 0x2c2 <main+0x4c>
				return SPDR;
 2c8:	8e b5       	in	r24, 0x2e	; 46
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
 2ca:	0e bd       	out	0x2e, r16	; 46
				while (!(SPSR & (1 << SPIF)));
 2cc:	0d b4       	in	r0, 0x2d	; 45
 2ce:	07 fe       	sbrs	r0, 7
 2d0:	fd cf       	rjmp	.-6      	; 0x2cc <main+0x56>
				return SPDR;
 2d2:	8e b5       	in	r24, 0x2e	; 46
	SPI_TransferByte(W_TX_PAYLOAD);
	//SPI_TransferByte(W_TX_PAYLOAD_NOACK);
	SPI_TransferByte(val);
	set(PORTF,CSN);
 2d4:	8d 9a       	sbi	0x11, 5	; 17
		
		nRF24_put_in_FIFO('a');
		LED_amber_ON;
 2d6:	28 98       	cbi	0x05, 0	; 5
	write_register(STATUS,0b01110000);			// clear all interrupt flags
}

static inline uint8_t nRF24_TX_FIFO_EMPTY(void)
{
	uint8_t tmp = read_register(FIFO_STATUS);
 2d8:	87 e1       	ldi	r24, 0x17	; 23
 2da:	62 df       	rcall	.-316    	; 0x1a0 <read_register>
 2dc:	89 83       	std	Y+1, r24	; 0x01
	return bit_is_set(tmp,TX_EMPTY);
 2de:	89 81       	ldd	r24, Y+1	; 0x01
		while (!nRF24_TX_FIFO_EMPTY())
 2e0:	84 fd       	sbrc	r24, 4
 2e2:	06 c0       	rjmp	.+12     	; 0x2f0 <main+0x7a>
		{
			set(PORTF,CE);		// toggle CE to send
 2e4:	8e 9a       	sbi	0x11, 6	; 17
 2e6:	20 e4       	ldi	r18, 0x40	; 64
 2e8:	2a 95       	dec	r18
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <main+0x72>
			_delay_us(12);		// at least 10uS
			clear(PORTF,CE);
 2ec:	8e 98       	cbi	0x11, 6	; 17
 2ee:	f4 cf       	rjmp	.-24     	; 0x2d8 <main+0x62>
			//_delay_us(2);		// whatever
		}
		LED_amber_OFF;
 2f0:	28 9a       	sbi	0x05, 0	; 5
		
		loop_until_bit_is_set(D3PIN,D3);
 2f2:	48 9b       	sbis	0x09, 0	; 9
 2f4:	fe cf       	rjmp	.-4      	; 0x2f2 <main+0x7c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f6:	8f ef       	ldi	r24, 0xFF	; 255
 2f8:	93 ec       	ldi	r25, 0xC3	; 195
 2fa:	29 e0       	ldi	r18, 0x09	; 9
 2fc:	81 50       	subi	r24, 0x01	; 1
 2fe:	90 40       	sbci	r25, 0x00	; 0
 300:	20 40       	sbci	r18, 0x00	; 0
 302:	e1 f7       	brne	.-8      	; 0x2fc <main+0x86>
 304:	00 c0       	rjmp	.+0      	; 0x306 <main+0x90>
 306:	00 00       	nop
 308:	d2 cf       	rjmp	.-92     	; 0x2ae <main+0x38>

0000030a <EVENT_USB_Device_Connect>:
	//USB_Init();
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
 30a:	08 95       	ret

0000030c <EVENT_USB_Device_Disconnect>:
	//
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
 30c:	08 95       	ret

0000030e <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	c0 c3       	rjmp	.+1920   	; 0xa94 <CDC_Device_ConfigureEndpoints>

00000314 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	e3 c3       	rjmp	.+1990   	; 0xae0 <CDC_Device_ProcessControlRequest>

0000031a <CALLBACK_USB_GetDescriptor>:
 31a:	29 2f       	mov	r18, r25
 31c:	33 27       	eor	r19, r19
 31e:	22 30       	cpi	r18, 0x02	; 2
 320:	31 05       	cpc	r19, r1
 322:	59 f0       	breq	.+22     	; 0x33a <CALLBACK_USB_GetDescriptor+0x20>
 324:	23 30       	cpi	r18, 0x03	; 3
 326:	31 05       	cpc	r19, r1
 328:	69 f0       	breq	.+26     	; 0x344 <CALLBACK_USB_GetDescriptor+0x2a>
 32a:	21 30       	cpi	r18, 0x01	; 1
 32c:	31 05       	cpc	r19, r1
 32e:	f9 f4       	brne	.+62     	; 0x36e <CALLBACK_USB_GetDescriptor+0x54>
 330:	82 e1       	ldi	r24, 0x12	; 18
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	2a e3       	ldi	r18, 0x3A	; 58
 336:	31 e0       	ldi	r19, 0x01	; 1
 338:	1e c0       	rjmp	.+60     	; 0x376 <CALLBACK_USB_GetDescriptor+0x5c>
 33a:	8e e3       	ldi	r24, 0x3E	; 62
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	2c ef       	ldi	r18, 0xFC	; 252
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	19 c0       	rjmp	.+50     	; 0x376 <CALLBACK_USB_GetDescriptor+0x5c>
 344:	99 27       	eor	r25, r25
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	91 05       	cpc	r25, r1
 34a:	41 f0       	breq	.+16     	; 0x35c <CALLBACK_USB_GetDescriptor+0x42>
 34c:	82 30       	cpi	r24, 0x02	; 2
 34e:	91 05       	cpc	r25, r1
 350:	41 f0       	breq	.+16     	; 0x362 <CALLBACK_USB_GetDescriptor+0x48>
 352:	89 2b       	or	r24, r25
 354:	61 f4       	brne	.+24     	; 0x36e <CALLBACK_USB_GetDescriptor+0x54>
 356:	e8 ef       	ldi	r30, 0xF8	; 248
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	05 c0       	rjmp	.+10     	; 0x366 <CALLBACK_USB_GetDescriptor+0x4c>
 35c:	ee ed       	ldi	r30, 0xDE	; 222
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	02 c0       	rjmp	.+4      	; 0x366 <CALLBACK_USB_GetDescriptor+0x4c>
 362:	e0 ec       	ldi	r30, 0xC0	; 192
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	84 91       	lpm	r24, Z
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	9f 01       	movw	r18, r30
 36c:	04 c0       	rjmp	.+8      	; 0x376 <CALLBACK_USB_GetDescriptor+0x5c>
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	20 e0       	ldi	r18, 0x00	; 0
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	fa 01       	movw	r30, r20
 378:	31 83       	std	Z+1, r19	; 0x01
 37a:	20 83       	st	Z, r18
 37c:	08 95       	ret

0000037e <Endpoint_Write_Control_Stream_LE>:
 37e:	20 91 26 01 	lds	r18, 0x0126
 382:	30 91 27 01 	lds	r19, 0x0127
 386:	26 17       	cp	r18, r22
 388:	37 07       	cpc	r19, r23
 38a:	48 f0       	brcs	.+18     	; 0x39e <Endpoint_Write_Control_Stream_LE+0x20>
 38c:	61 15       	cp	r22, r1
 38e:	71 05       	cpc	r23, r1
 390:	39 f4       	brne	.+14     	; 0x3a0 <Endpoint_Write_Control_Stream_LE+0x22>
 392:	20 91 e8 00 	lds	r18, 0x00E8
 396:	2e 77       	andi	r18, 0x7E	; 126
 398:	20 93 e8 00 	sts	0x00E8, r18
 39c:	01 c0       	rjmp	.+2      	; 0x3a0 <Endpoint_Write_Control_Stream_LE+0x22>
 39e:	b9 01       	movw	r22, r18
 3a0:	fc 01       	movw	r30, r24
 3a2:	20 e0       	ldi	r18, 0x00	; 0
 3a4:	61 15       	cp	r22, r1
 3a6:	71 05       	cpc	r23, r1
 3a8:	a1 f1       	breq	.+104    	; 0x412 <Endpoint_Write_Control_Stream_LE+0x94>
 3aa:	8e b3       	in	r24, 0x1e	; 30
 3ac:	88 23       	and	r24, r24
 3ae:	e1 f1       	breq	.+120    	; 0x428 <Endpoint_Write_Control_Stream_LE+0xaa>
 3b0:	85 30       	cpi	r24, 0x05	; 5
 3b2:	e1 f1       	breq	.+120    	; 0x42c <Endpoint_Write_Control_Stream_LE+0xae>
 3b4:	80 91 e8 00 	lds	r24, 0x00E8
 3b8:	83 fd       	sbrc	r24, 3
 3ba:	34 c0       	rjmp	.+104    	; 0x424 <Endpoint_Write_Control_Stream_LE+0xa6>
 3bc:	80 91 e8 00 	lds	r24, 0x00E8
 3c0:	82 ff       	sbrs	r24, 2
 3c2:	06 c0       	rjmp	.+12     	; 0x3d0 <Endpoint_Write_Control_Stream_LE+0x52>
 3c4:	80 91 e8 00 	lds	r24, 0x00E8
 3c8:	82 ff       	sbrs	r24, 2
 3ca:	26 c0       	rjmp	.+76     	; 0x418 <Endpoint_Write_Control_Stream_LE+0x9a>
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	08 95       	ret
 3d0:	80 91 e8 00 	lds	r24, 0x00E8
 3d4:	80 ff       	sbrs	r24, 0
 3d6:	e6 cf       	rjmp	.-52     	; 0x3a4 <Endpoint_Write_Control_Stream_LE+0x26>
 3d8:	20 91 f3 00 	lds	r18, 0x00F3
 3dc:	80 91 f2 00 	lds	r24, 0x00F2
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	92 2b       	or	r25, r18
 3e4:	61 15       	cp	r22, r1
 3e6:	71 05       	cpc	r23, r1
 3e8:	51 f0       	breq	.+20     	; 0x3fe <Endpoint_Write_Control_Stream_LE+0x80>
 3ea:	88 30       	cpi	r24, 0x08	; 8
 3ec:	91 05       	cpc	r25, r1
 3ee:	38 f4       	brcc	.+14     	; 0x3fe <Endpoint_Write_Control_Stream_LE+0x80>
 3f0:	21 91       	ld	r18, Z+
 3f2:	20 93 f1 00 	sts	0x00F1, r18
 3f6:	61 50       	subi	r22, 0x01	; 1
 3f8:	71 09       	sbc	r23, r1
 3fa:	01 96       	adiw	r24, 0x01	; 1
 3fc:	f3 cf       	rjmp	.-26     	; 0x3e4 <Endpoint_Write_Control_Stream_LE+0x66>
 3fe:	21 e0       	ldi	r18, 0x01	; 1
 400:	08 97       	sbiw	r24, 0x08	; 8
 402:	09 f0       	breq	.+2      	; 0x406 <Endpoint_Write_Control_Stream_LE+0x88>
 404:	20 e0       	ldi	r18, 0x00	; 0
 406:	80 91 e8 00 	lds	r24, 0x00E8
 40a:	8e 77       	andi	r24, 0x7E	; 126
 40c:	80 93 e8 00 	sts	0x00E8, r24
 410:	c9 cf       	rjmp	.-110    	; 0x3a4 <Endpoint_Write_Control_Stream_LE+0x26>
 412:	21 11       	cpse	r18, r1
 414:	ca cf       	rjmp	.-108    	; 0x3aa <Endpoint_Write_Control_Stream_LE+0x2c>
 416:	d6 cf       	rjmp	.-84     	; 0x3c4 <Endpoint_Write_Control_Stream_LE+0x46>
 418:	8e b3       	in	r24, 0x1e	; 30
 41a:	88 23       	and	r24, r24
 41c:	29 f0       	breq	.+10     	; 0x428 <Endpoint_Write_Control_Stream_LE+0xaa>
 41e:	85 30       	cpi	r24, 0x05	; 5
 420:	89 f6       	brne	.-94     	; 0x3c4 <Endpoint_Write_Control_Stream_LE+0x46>
 422:	04 c0       	rjmp	.+8      	; 0x42c <Endpoint_Write_Control_Stream_LE+0xae>
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	08 95       	ret
 428:	82 e0       	ldi	r24, 0x02	; 2
 42a:	08 95       	ret
 42c:	83 e0       	ldi	r24, 0x03	; 3
 42e:	08 95       	ret

00000430 <Endpoint_Write_Control_PStream_LE>:
 430:	20 91 26 01 	lds	r18, 0x0126
 434:	30 91 27 01 	lds	r19, 0x0127
 438:	26 17       	cp	r18, r22
 43a:	37 07       	cpc	r19, r23
 43c:	48 f0       	brcs	.+18     	; 0x450 <Endpoint_Write_Control_PStream_LE+0x20>
 43e:	61 15       	cp	r22, r1
 440:	71 05       	cpc	r23, r1
 442:	39 f4       	brne	.+14     	; 0x452 <Endpoint_Write_Control_PStream_LE+0x22>
 444:	20 91 e8 00 	lds	r18, 0x00E8
 448:	2e 77       	andi	r18, 0x7E	; 126
 44a:	20 93 e8 00 	sts	0x00E8, r18
 44e:	01 c0       	rjmp	.+2      	; 0x452 <Endpoint_Write_Control_PStream_LE+0x22>
 450:	b9 01       	movw	r22, r18
 452:	fc 01       	movw	r30, r24
 454:	20 e0       	ldi	r18, 0x00	; 0
 456:	61 15       	cp	r22, r1
 458:	71 05       	cpc	r23, r1
 45a:	b9 f1       	breq	.+110    	; 0x4ca <Endpoint_Write_Control_PStream_LE+0x9a>
 45c:	8e b3       	in	r24, 0x1e	; 30
 45e:	88 23       	and	r24, r24
 460:	09 f4       	brne	.+2      	; 0x464 <Endpoint_Write_Control_PStream_LE+0x34>
 462:	3e c0       	rjmp	.+124    	; 0x4e0 <Endpoint_Write_Control_PStream_LE+0xb0>
 464:	85 30       	cpi	r24, 0x05	; 5
 466:	09 f4       	brne	.+2      	; 0x46a <Endpoint_Write_Control_PStream_LE+0x3a>
 468:	3d c0       	rjmp	.+122    	; 0x4e4 <Endpoint_Write_Control_PStream_LE+0xb4>
 46a:	80 91 e8 00 	lds	r24, 0x00E8
 46e:	83 fd       	sbrc	r24, 3
 470:	35 c0       	rjmp	.+106    	; 0x4dc <Endpoint_Write_Control_PStream_LE+0xac>
 472:	80 91 e8 00 	lds	r24, 0x00E8
 476:	82 ff       	sbrs	r24, 2
 478:	06 c0       	rjmp	.+12     	; 0x486 <Endpoint_Write_Control_PStream_LE+0x56>
 47a:	80 91 e8 00 	lds	r24, 0x00E8
 47e:	82 ff       	sbrs	r24, 2
 480:	27 c0       	rjmp	.+78     	; 0x4d0 <Endpoint_Write_Control_PStream_LE+0xa0>
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	08 95       	ret
 486:	80 91 e8 00 	lds	r24, 0x00E8
 48a:	80 ff       	sbrs	r24, 0
 48c:	e4 cf       	rjmp	.-56     	; 0x456 <Endpoint_Write_Control_PStream_LE+0x26>
 48e:	20 91 f3 00 	lds	r18, 0x00F3
 492:	80 91 f2 00 	lds	r24, 0x00F2
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	92 2b       	or	r25, r18
 49a:	61 15       	cp	r22, r1
 49c:	71 05       	cpc	r23, r1
 49e:	59 f0       	breq	.+22     	; 0x4b6 <Endpoint_Write_Control_PStream_LE+0x86>
 4a0:	88 30       	cpi	r24, 0x08	; 8
 4a2:	91 05       	cpc	r25, r1
 4a4:	40 f4       	brcc	.+16     	; 0x4b6 <Endpoint_Write_Control_PStream_LE+0x86>
 4a6:	24 91       	lpm	r18, Z
 4a8:	20 93 f1 00 	sts	0x00F1, r18
 4ac:	31 96       	adiw	r30, 0x01	; 1
 4ae:	61 50       	subi	r22, 0x01	; 1
 4b0:	71 09       	sbc	r23, r1
 4b2:	01 96       	adiw	r24, 0x01	; 1
 4b4:	f2 cf       	rjmp	.-28     	; 0x49a <Endpoint_Write_Control_PStream_LE+0x6a>
 4b6:	21 e0       	ldi	r18, 0x01	; 1
 4b8:	08 97       	sbiw	r24, 0x08	; 8
 4ba:	09 f0       	breq	.+2      	; 0x4be <Endpoint_Write_Control_PStream_LE+0x8e>
 4bc:	20 e0       	ldi	r18, 0x00	; 0
 4be:	80 91 e8 00 	lds	r24, 0x00E8
 4c2:	8e 77       	andi	r24, 0x7E	; 126
 4c4:	80 93 e8 00 	sts	0x00E8, r24
 4c8:	c6 cf       	rjmp	.-116    	; 0x456 <Endpoint_Write_Control_PStream_LE+0x26>
 4ca:	21 11       	cpse	r18, r1
 4cc:	c7 cf       	rjmp	.-114    	; 0x45c <Endpoint_Write_Control_PStream_LE+0x2c>
 4ce:	d5 cf       	rjmp	.-86     	; 0x47a <Endpoint_Write_Control_PStream_LE+0x4a>
 4d0:	8e b3       	in	r24, 0x1e	; 30
 4d2:	88 23       	and	r24, r24
 4d4:	29 f0       	breq	.+10     	; 0x4e0 <Endpoint_Write_Control_PStream_LE+0xb0>
 4d6:	85 30       	cpi	r24, 0x05	; 5
 4d8:	81 f6       	brne	.-96     	; 0x47a <Endpoint_Write_Control_PStream_LE+0x4a>
 4da:	04 c0       	rjmp	.+8      	; 0x4e4 <Endpoint_Write_Control_PStream_LE+0xb4>
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	08 95       	ret
 4e0:	82 e0       	ldi	r24, 0x02	; 2
 4e2:	08 95       	ret
 4e4:	83 e0       	ldi	r24, 0x03	; 3
 4e6:	08 95       	ret

000004e8 <Endpoint_ConfigureEndpoint_Prv>:
 4e8:	98 2f       	mov	r25, r24
 4ea:	97 30       	cpi	r25, 0x07	; 7
 4ec:	58 f5       	brcc	.+86     	; 0x544 <Endpoint_ConfigureEndpoint_Prv+0x5c>
 4ee:	90 93 e9 00 	sts	0x00E9, r25
 4f2:	98 17       	cp	r25, r24
 4f4:	39 f0       	breq	.+14     	; 0x504 <Endpoint_ConfigureEndpoint_Prv+0x1c>
 4f6:	70 91 ec 00 	lds	r23, 0x00EC
 4fa:	20 91 ed 00 	lds	r18, 0x00ED
 4fe:	50 91 f0 00 	lds	r21, 0x00F0
 502:	03 c0       	rjmp	.+6      	; 0x50a <Endpoint_ConfigureEndpoint_Prv+0x22>
 504:	24 2f       	mov	r18, r20
 506:	76 2f       	mov	r23, r22
 508:	50 e0       	ldi	r21, 0x00	; 0
 50a:	21 ff       	sbrs	r18, 1
 50c:	19 c0       	rjmp	.+50     	; 0x540 <Endpoint_ConfigureEndpoint_Prv+0x58>
 50e:	30 91 eb 00 	lds	r19, 0x00EB
 512:	3e 7f       	andi	r19, 0xFE	; 254
 514:	30 93 eb 00 	sts	0x00EB, r19
 518:	30 91 ed 00 	lds	r19, 0x00ED
 51c:	3d 7f       	andi	r19, 0xFD	; 253
 51e:	30 93 ed 00 	sts	0x00ED, r19
 522:	30 91 eb 00 	lds	r19, 0x00EB
 526:	31 60       	ori	r19, 0x01	; 1
 528:	30 93 eb 00 	sts	0x00EB, r19
 52c:	70 93 ec 00 	sts	0x00EC, r23
 530:	20 93 ed 00 	sts	0x00ED, r18
 534:	50 93 f0 00 	sts	0x00F0, r21
 538:	20 91 ee 00 	lds	r18, 0x00EE
 53c:	27 ff       	sbrs	r18, 7
 53e:	07 c0       	rjmp	.+14     	; 0x54e <Endpoint_ConfigureEndpoint_Prv+0x66>
 540:	9f 5f       	subi	r25, 0xFF	; 255
 542:	d3 cf       	rjmp	.-90     	; 0x4ea <Endpoint_ConfigureEndpoint_Prv+0x2>
 544:	8f 70       	andi	r24, 0x0F	; 15
 546:	80 93 e9 00 	sts	0x00E9, r24
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	08 95       	ret
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	08 95       	ret

00000552 <Endpoint_ConfigureEndpointTable>:
 552:	0f 93       	push	r16
 554:	1f 93       	push	r17
 556:	cf 93       	push	r28
 558:	df 93       	push	r29
 55a:	06 2f       	mov	r16, r22
 55c:	ec 01       	movw	r28, r24
 55e:	10 e0       	ldi	r17, 0x00	; 0
 560:	10 17       	cp	r17, r16
 562:	71 f1       	breq	.+92     	; 0x5c0 <Endpoint_ConfigureEndpointTable+0x6e>
 564:	98 81       	ld	r25, Y
 566:	99 23       	and	r25, r25
 568:	41 f1       	breq	.+80     	; 0x5ba <Endpoint_ConfigureEndpointTable+0x68>
 56a:	2c 81       	ldd	r18, Y+4	; 0x04
 56c:	e9 81       	ldd	r30, Y+1	; 0x01
 56e:	fa 81       	ldd	r31, Y+2	; 0x02
 570:	7b 81       	ldd	r23, Y+3	; 0x03
 572:	89 2f       	mov	r24, r25
 574:	8f 70       	andi	r24, 0x0F	; 15
 576:	87 30       	cpi	r24, 0x07	; 7
 578:	10 f0       	brcs	.+4      	; 0x57e <Endpoint_ConfigureEndpointTable+0x2c>
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	22 c0       	rjmp	.+68     	; 0x5c2 <Endpoint_ConfigureEndpointTable+0x70>
 57e:	22 30       	cpi	r18, 0x02	; 2
 580:	10 f0       	brcs	.+4      	; 0x586 <Endpoint_ConfigureEndpointTable+0x34>
 582:	56 e0       	ldi	r21, 0x06	; 6
 584:	01 c0       	rjmp	.+2      	; 0x588 <Endpoint_ConfigureEndpointTable+0x36>
 586:	52 e0       	ldi	r21, 0x02	; 2
 588:	28 e0       	ldi	r18, 0x08	; 8
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	40 e0       	ldi	r20, 0x00	; 0
 58e:	2e 17       	cp	r18, r30
 590:	3f 07       	cpc	r19, r31
 592:	20 f4       	brcc	.+8      	; 0x59c <Endpoint_ConfigureEndpointTable+0x4a>
 594:	4f 5f       	subi	r20, 0xFF	; 255
 596:	22 0f       	add	r18, r18
 598:	33 1f       	adc	r19, r19
 59a:	f9 cf       	rjmp	.-14     	; 0x58e <Endpoint_ConfigureEndpointTable+0x3c>
 59c:	42 95       	swap	r20
 59e:	40 7f       	andi	r20, 0xF0	; 240
 5a0:	45 2b       	or	r20, r21
 5a2:	69 2f       	mov	r22, r25
 5a4:	66 1f       	adc	r22, r22
 5a6:	66 27       	eor	r22, r22
 5a8:	66 1f       	adc	r22, r22
 5aa:	90 e4       	ldi	r25, 0x40	; 64
 5ac:	79 9f       	mul	r23, r25
 5ae:	90 01       	movw	r18, r0
 5b0:	11 24       	eor	r1, r1
 5b2:	62 2b       	or	r22, r18
 5b4:	99 df       	rcall	.-206    	; 0x4e8 <Endpoint_ConfigureEndpoint_Prv>
 5b6:	88 23       	and	r24, r24
 5b8:	01 f3       	breq	.-64     	; 0x57a <Endpoint_ConfigureEndpointTable+0x28>
 5ba:	1f 5f       	subi	r17, 0xFF	; 255
 5bc:	25 96       	adiw	r28, 0x05	; 5
 5be:	d0 cf       	rjmp	.-96     	; 0x560 <Endpoint_ConfigureEndpointTable+0xe>
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	df 91       	pop	r29
 5c4:	cf 91       	pop	r28
 5c6:	1f 91       	pop	r17
 5c8:	0f 91       	pop	r16
 5ca:	08 95       	ret

000005cc <Endpoint_ClearStatusStage>:
 5cc:	80 91 20 01 	lds	r24, 0x0120
 5d0:	87 fd       	sbrc	r24, 7
 5d2:	05 c0       	rjmp	.+10     	; 0x5de <Endpoint_ClearStatusStage+0x12>
 5d4:	80 91 e8 00 	lds	r24, 0x00E8
 5d8:	80 ff       	sbrs	r24, 0
 5da:	0d c0       	rjmp	.+26     	; 0x5f6 <Endpoint_ClearStatusStage+0x2a>
 5dc:	10 c0       	rjmp	.+32     	; 0x5fe <Endpoint_ClearStatusStage+0x32>
 5de:	80 91 e8 00 	lds	r24, 0x00E8
 5e2:	82 fd       	sbrc	r24, 2
 5e4:	04 c0       	rjmp	.+8      	; 0x5ee <Endpoint_ClearStatusStage+0x22>
 5e6:	8e b3       	in	r24, 0x1e	; 30
 5e8:	81 11       	cpse	r24, r1
 5ea:	f9 cf       	rjmp	.-14     	; 0x5de <Endpoint_ClearStatusStage+0x12>
 5ec:	08 95       	ret
 5ee:	80 91 e8 00 	lds	r24, 0x00E8
 5f2:	8b 77       	andi	r24, 0x7B	; 123
 5f4:	07 c0       	rjmp	.+14     	; 0x604 <Endpoint_ClearStatusStage+0x38>
 5f6:	8e b3       	in	r24, 0x1e	; 30
 5f8:	81 11       	cpse	r24, r1
 5fa:	ec cf       	rjmp	.-40     	; 0x5d4 <Endpoint_ClearStatusStage+0x8>
 5fc:	08 95       	ret
 5fe:	80 91 e8 00 	lds	r24, 0x00E8
 602:	8e 77       	andi	r24, 0x7E	; 126
 604:	80 93 e8 00 	sts	0x00E8, r24
 608:	08 95       	ret

0000060a <__vector_10>:
 60a:	1f 92       	push	r1
 60c:	0f 92       	push	r0
 60e:	0f b6       	in	r0, 0x3f	; 63
 610:	0f 92       	push	r0
 612:	11 24       	eor	r1, r1
 614:	2f 93       	push	r18
 616:	3f 93       	push	r19
 618:	4f 93       	push	r20
 61a:	5f 93       	push	r21
 61c:	6f 93       	push	r22
 61e:	7f 93       	push	r23
 620:	8f 93       	push	r24
 622:	9f 93       	push	r25
 624:	af 93       	push	r26
 626:	bf 93       	push	r27
 628:	ef 93       	push	r30
 62a:	ff 93       	push	r31
 62c:	80 91 e1 00 	lds	r24, 0x00E1
 630:	82 ff       	sbrs	r24, 2
 632:	0a c0       	rjmp	.+20     	; 0x648 <__vector_10+0x3e>
 634:	80 91 e2 00 	lds	r24, 0x00E2
 638:	82 ff       	sbrs	r24, 2
 63a:	06 c0       	rjmp	.+12     	; 0x648 <__vector_10+0x3e>
 63c:	80 91 e1 00 	lds	r24, 0x00E1
 640:	8b 7f       	andi	r24, 0xFB	; 251
 642:	80 93 e1 00 	sts	0x00E1, r24
 646:	25 d2       	rcall	.+1098   	; 0xa92 <USB_Event_Stub>
 648:	80 91 da 00 	lds	r24, 0x00DA
 64c:	80 ff       	sbrs	r24, 0
 64e:	1b c0       	rjmp	.+54     	; 0x686 <__vector_10+0x7c>
 650:	80 91 d8 00 	lds	r24, 0x00D8
 654:	80 ff       	sbrs	r24, 0
 656:	17 c0       	rjmp	.+46     	; 0x686 <__vector_10+0x7c>
 658:	80 91 da 00 	lds	r24, 0x00DA
 65c:	8e 7f       	andi	r24, 0xFE	; 254
 65e:	80 93 da 00 	sts	0x00DA, r24
 662:	80 91 d9 00 	lds	r24, 0x00D9
 666:	80 ff       	sbrs	r24, 0
 668:	0b c0       	rjmp	.+22     	; 0x680 <__vector_10+0x76>
 66a:	80 e1       	ldi	r24, 0x10	; 16
 66c:	89 bd       	out	0x29, r24	; 41
 66e:	82 e1       	ldi	r24, 0x12	; 18
 670:	89 bd       	out	0x29, r24	; 41
 672:	09 b4       	in	r0, 0x29	; 41
 674:	00 fe       	sbrs	r0, 0
 676:	fd cf       	rjmp	.-6      	; 0x672 <__vector_10+0x68>
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	8e bb       	out	0x1e, r24	; 30
 67c:	46 de       	rcall	.-884    	; 0x30a <EVENT_USB_Device_Connect>
 67e:	03 c0       	rjmp	.+6      	; 0x686 <__vector_10+0x7c>
 680:	19 bc       	out	0x29, r1	; 41
 682:	1e ba       	out	0x1e, r1	; 30
 684:	43 de       	rcall	.-890    	; 0x30c <EVENT_USB_Device_Disconnect>
 686:	80 91 e1 00 	lds	r24, 0x00E1
 68a:	80 ff       	sbrs	r24, 0
 68c:	17 c0       	rjmp	.+46     	; 0x6bc <__vector_10+0xb2>
 68e:	80 91 e2 00 	lds	r24, 0x00E2
 692:	80 ff       	sbrs	r24, 0
 694:	13 c0       	rjmp	.+38     	; 0x6bc <__vector_10+0xb2>
 696:	80 91 e2 00 	lds	r24, 0x00E2
 69a:	8e 7f       	andi	r24, 0xFE	; 254
 69c:	80 93 e2 00 	sts	0x00E2, r24
 6a0:	80 91 e2 00 	lds	r24, 0x00E2
 6a4:	80 61       	ori	r24, 0x10	; 16
 6a6:	80 93 e2 00 	sts	0x00E2, r24
 6aa:	80 91 d8 00 	lds	r24, 0x00D8
 6ae:	80 62       	ori	r24, 0x20	; 32
 6b0:	80 93 d8 00 	sts	0x00D8, r24
 6b4:	19 bc       	out	0x29, r1	; 41
 6b6:	85 e0       	ldi	r24, 0x05	; 5
 6b8:	8e bb       	out	0x1e, r24	; 30
 6ba:	eb d1       	rcall	.+982    	; 0xa92 <USB_Event_Stub>
 6bc:	80 91 e1 00 	lds	r24, 0x00E1
 6c0:	84 ff       	sbrs	r24, 4
 6c2:	2e c0       	rjmp	.+92     	; 0x720 <__vector_10+0x116>
 6c4:	80 91 e2 00 	lds	r24, 0x00E2
 6c8:	84 ff       	sbrs	r24, 4
 6ca:	2a c0       	rjmp	.+84     	; 0x720 <__vector_10+0x116>
 6cc:	80 e1       	ldi	r24, 0x10	; 16
 6ce:	89 bd       	out	0x29, r24	; 41
 6d0:	82 e1       	ldi	r24, 0x12	; 18
 6d2:	89 bd       	out	0x29, r24	; 41
 6d4:	09 b4       	in	r0, 0x29	; 41
 6d6:	00 fe       	sbrs	r0, 0
 6d8:	fd cf       	rjmp	.-6      	; 0x6d4 <__vector_10+0xca>
 6da:	80 91 d8 00 	lds	r24, 0x00D8
 6de:	8f 7d       	andi	r24, 0xDF	; 223
 6e0:	80 93 d8 00 	sts	0x00D8, r24
 6e4:	80 91 e1 00 	lds	r24, 0x00E1
 6e8:	8f 7e       	andi	r24, 0xEF	; 239
 6ea:	80 93 e1 00 	sts	0x00E1, r24
 6ee:	80 91 e2 00 	lds	r24, 0x00E2
 6f2:	8f 7e       	andi	r24, 0xEF	; 239
 6f4:	80 93 e2 00 	sts	0x00E2, r24
 6f8:	80 91 e2 00 	lds	r24, 0x00E2
 6fc:	81 60       	ori	r24, 0x01	; 1
 6fe:	80 93 e2 00 	sts	0x00E2, r24
 702:	80 91 1c 01 	lds	r24, 0x011C
 706:	88 23       	and	r24, r24
 708:	11 f0       	breq	.+4      	; 0x70e <__vector_10+0x104>
 70a:	84 e0       	ldi	r24, 0x04	; 4
 70c:	07 c0       	rjmp	.+14     	; 0x71c <__vector_10+0x112>
 70e:	80 91 e3 00 	lds	r24, 0x00E3
 712:	87 ff       	sbrs	r24, 7
 714:	02 c0       	rjmp	.+4      	; 0x71a <__vector_10+0x110>
 716:	83 e0       	ldi	r24, 0x03	; 3
 718:	01 c0       	rjmp	.+2      	; 0x71c <__vector_10+0x112>
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	8e bb       	out	0x1e, r24	; 30
 71e:	b9 d1       	rcall	.+882    	; 0xa92 <USB_Event_Stub>
 720:	80 91 e1 00 	lds	r24, 0x00E1
 724:	83 ff       	sbrs	r24, 3
 726:	26 c0       	rjmp	.+76     	; 0x774 <__vector_10+0x16a>
 728:	80 91 e2 00 	lds	r24, 0x00E2
 72c:	83 ff       	sbrs	r24, 3
 72e:	22 c0       	rjmp	.+68     	; 0x774 <__vector_10+0x16a>
 730:	80 91 e1 00 	lds	r24, 0x00E1
 734:	87 7f       	andi	r24, 0xF7	; 247
 736:	80 93 e1 00 	sts	0x00E1, r24
 73a:	82 e0       	ldi	r24, 0x02	; 2
 73c:	8e bb       	out	0x1e, r24	; 30
 73e:	10 92 1c 01 	sts	0x011C, r1
 742:	80 91 e1 00 	lds	r24, 0x00E1
 746:	8e 7f       	andi	r24, 0xFE	; 254
 748:	80 93 e1 00 	sts	0x00E1, r24
 74c:	80 91 e2 00 	lds	r24, 0x00E2
 750:	8e 7f       	andi	r24, 0xFE	; 254
 752:	80 93 e2 00 	sts	0x00E2, r24
 756:	80 91 e2 00 	lds	r24, 0x00E2
 75a:	80 61       	ori	r24, 0x10	; 16
 75c:	80 93 e2 00 	sts	0x00E2, r24
 760:	42 e0       	ldi	r20, 0x02	; 2
 762:	60 e0       	ldi	r22, 0x00	; 0
 764:	80 e0       	ldi	r24, 0x00	; 0
 766:	c0 de       	rcall	.-640    	; 0x4e8 <Endpoint_ConfigureEndpoint_Prv>
 768:	80 91 f0 00 	lds	r24, 0x00F0
 76c:	88 60       	ori	r24, 0x08	; 8
 76e:	80 93 f0 00 	sts	0x00F0, r24
 772:	8f d1       	rcall	.+798    	; 0xa92 <USB_Event_Stub>
 774:	ff 91       	pop	r31
 776:	ef 91       	pop	r30
 778:	bf 91       	pop	r27
 77a:	af 91       	pop	r26
 77c:	9f 91       	pop	r25
 77e:	8f 91       	pop	r24
 780:	7f 91       	pop	r23
 782:	6f 91       	pop	r22
 784:	5f 91       	pop	r21
 786:	4f 91       	pop	r20
 788:	3f 91       	pop	r19
 78a:	2f 91       	pop	r18
 78c:	0f 90       	pop	r0
 78e:	0f be       	out	0x3f, r0	; 63
 790:	0f 90       	pop	r0
 792:	1f 90       	pop	r1
 794:	18 95       	reti

00000796 <__vector_11>:
 796:	1f 92       	push	r1
 798:	0f 92       	push	r0
 79a:	0f b6       	in	r0, 0x3f	; 63
 79c:	0f 92       	push	r0
 79e:	11 24       	eor	r1, r1
 7a0:	2f 93       	push	r18
 7a2:	3f 93       	push	r19
 7a4:	4f 93       	push	r20
 7a6:	5f 93       	push	r21
 7a8:	6f 93       	push	r22
 7aa:	7f 93       	push	r23
 7ac:	8f 93       	push	r24
 7ae:	9f 93       	push	r25
 7b0:	af 93       	push	r26
 7b2:	bf 93       	push	r27
 7b4:	cf 93       	push	r28
 7b6:	ef 93       	push	r30
 7b8:	ff 93       	push	r31
 7ba:	c0 91 e9 00 	lds	r28, 0x00E9
 7be:	cf 70       	andi	r28, 0x0F	; 15
 7c0:	80 91 ec 00 	lds	r24, 0x00EC
 7c4:	10 92 e9 00 	sts	0x00E9, r1
 7c8:	80 91 f0 00 	lds	r24, 0x00F0
 7cc:	87 7f       	andi	r24, 0xF7	; 247
 7ce:	80 93 f0 00 	sts	0x00F0, r24
 7d2:	78 94       	sei
 7d4:	1b d0       	rcall	.+54     	; 0x80c <USB_Device_ProcessControlRequest>
 7d6:	10 92 e9 00 	sts	0x00E9, r1
 7da:	80 91 f0 00 	lds	r24, 0x00F0
 7de:	88 60       	ori	r24, 0x08	; 8
 7e0:	80 93 f0 00 	sts	0x00F0, r24
 7e4:	c0 93 e9 00 	sts	0x00E9, r28
 7e8:	ff 91       	pop	r31
 7ea:	ef 91       	pop	r30
 7ec:	cf 91       	pop	r28
 7ee:	bf 91       	pop	r27
 7f0:	af 91       	pop	r26
 7f2:	9f 91       	pop	r25
 7f4:	8f 91       	pop	r24
 7f6:	7f 91       	pop	r23
 7f8:	6f 91       	pop	r22
 7fa:	5f 91       	pop	r21
 7fc:	4f 91       	pop	r20
 7fe:	3f 91       	pop	r19
 800:	2f 91       	pop	r18
 802:	0f 90       	pop	r0
 804:	0f be       	out	0x3f, r0	; 63
 806:	0f 90       	pop	r0
 808:	1f 90       	pop	r1
 80a:	18 95       	reti

0000080c <USB_Device_ProcessControlRequest>:
 80c:	1f 93       	push	r17
 80e:	cf 93       	push	r28
 810:	df 93       	push	r29
 812:	cd b7       	in	r28, 0x3d	; 61
 814:	de b7       	in	r29, 0x3e	; 62
 816:	aa 97       	sbiw	r28, 0x2a	; 42
 818:	0f b6       	in	r0, 0x3f	; 63
 81a:	f8 94       	cli
 81c:	de bf       	out	0x3e, r29	; 62
 81e:	0f be       	out	0x3f, r0	; 63
 820:	cd bf       	out	0x3d, r28	; 61
 822:	e0 e2       	ldi	r30, 0x20	; 32
 824:	f1 e0       	ldi	r31, 0x01	; 1
 826:	80 91 f1 00 	lds	r24, 0x00F1
 82a:	81 93       	st	Z+, r24
 82c:	21 e0       	ldi	r18, 0x01	; 1
 82e:	e8 32       	cpi	r30, 0x28	; 40
 830:	f2 07       	cpc	r31, r18
 832:	c9 f7       	brne	.-14     	; 0x826 <USB_Device_ProcessControlRequest+0x1a>
 834:	6f dd       	rcall	.-1314   	; 0x314 <EVENT_USB_Device_ControlRequest>
 836:	80 91 e8 00 	lds	r24, 0x00E8
 83a:	83 ff       	sbrs	r24, 3
 83c:	12 c1       	rjmp	.+548    	; 0xa62 <USB_Device_ProcessControlRequest+0x256>
 83e:	20 91 20 01 	lds	r18, 0x0120
 842:	30 91 21 01 	lds	r19, 0x0121
 846:	83 2f       	mov	r24, r19
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	8a 30       	cpi	r24, 0x0A	; 10
 84c:	91 05       	cpc	r25, r1
 84e:	08 f0       	brcs	.+2      	; 0x852 <USB_Device_ProcessControlRequest+0x46>
 850:	08 c1       	rjmp	.+528    	; 0xa62 <USB_Device_ProcessControlRequest+0x256>
 852:	fc 01       	movw	r30, r24
 854:	ea 5a       	subi	r30, 0xAA	; 170
 856:	ff 4f       	sbci	r31, 0xFF	; 255
 858:	f2 c1       	rjmp	.+996    	; 0xc3e <__tablejump2__>
 85a:	20 38       	cpi	r18, 0x80	; 128
 85c:	81 f0       	breq	.+32     	; 0x87e <USB_Device_ProcessControlRequest+0x72>
 85e:	22 38       	cpi	r18, 0x82	; 130
 860:	09 f0       	breq	.+2      	; 0x864 <USB_Device_ProcessControlRequest+0x58>
 862:	ff c0       	rjmp	.+510    	; 0xa62 <USB_Device_ProcessControlRequest+0x256>
 864:	80 91 24 01 	lds	r24, 0x0124
 868:	8f 70       	andi	r24, 0x0F	; 15
 86a:	80 93 e9 00 	sts	0x00E9, r24
 86e:	80 91 eb 00 	lds	r24, 0x00EB
 872:	85 fb       	bst	r24, 5
 874:	88 27       	eor	r24, r24
 876:	80 f9       	bld	r24, 0
 878:	10 92 e9 00 	sts	0x00E9, r1
 87c:	06 c0       	rjmp	.+12     	; 0x88a <USB_Device_ProcessControlRequest+0x7e>
 87e:	80 91 1d 01 	lds	r24, 0x011D
 882:	90 91 1e 01 	lds	r25, 0x011E
 886:	91 11       	cpse	r25, r1
 888:	82 60       	ori	r24, 0x02	; 2
 88a:	90 91 e8 00 	lds	r25, 0x00E8
 88e:	97 7f       	andi	r25, 0xF7	; 247
 890:	90 93 e8 00 	sts	0x00E8, r25
 894:	80 93 f1 00 	sts	0x00F1, r24
 898:	10 92 f1 00 	sts	0x00F1, r1
 89c:	c0 c0       	rjmp	.+384    	; 0xa1e <USB_Device_ProcessControlRequest+0x212>
 89e:	82 2f       	mov	r24, r18
 8a0:	8d 7f       	andi	r24, 0xFD	; 253
 8a2:	09 f0       	breq	.+2      	; 0x8a6 <USB_Device_ProcessControlRequest+0x9a>
 8a4:	de c0       	rjmp	.+444    	; 0xa62 <USB_Device_ProcessControlRequest+0x256>
 8a6:	22 23       	and	r18, r18
 8a8:	19 f0       	breq	.+6      	; 0x8b0 <USB_Device_ProcessControlRequest+0xa4>
 8aa:	22 30       	cpi	r18, 0x02	; 2
 8ac:	61 f0       	breq	.+24     	; 0x8c6 <USB_Device_ProcessControlRequest+0xba>
 8ae:	d9 c0       	rjmp	.+434    	; 0xa62 <USB_Device_ProcessControlRequest+0x256>
 8b0:	80 91 22 01 	lds	r24, 0x0122
 8b4:	81 30       	cpi	r24, 0x01	; 1
 8b6:	09 f0       	breq	.+2      	; 0x8ba <USB_Device_ProcessControlRequest+0xae>
 8b8:	d4 c0       	rjmp	.+424    	; 0xa62 <USB_Device_ProcessControlRequest+0x256>
 8ba:	33 30       	cpi	r19, 0x03	; 3
 8bc:	09 f0       	breq	.+2      	; 0x8c0 <USB_Device_ProcessControlRequest+0xb4>
 8be:	80 e0       	ldi	r24, 0x00	; 0
 8c0:	80 93 1e 01 	sts	0x011E, r24
 8c4:	28 c0       	rjmp	.+80     	; 0x916 <USB_Device_ProcessControlRequest+0x10a>
 8c6:	80 91 22 01 	lds	r24, 0x0122
 8ca:	81 11       	cpse	r24, r1
 8cc:	24 c0       	rjmp	.+72     	; 0x916 <USB_Device_ProcessControlRequest+0x10a>
 8ce:	20 91 24 01 	lds	r18, 0x0124
 8d2:	2f 70       	andi	r18, 0x0F	; 15
 8d4:	09 f4       	brne	.+2      	; 0x8d8 <USB_Device_ProcessControlRequest+0xcc>
 8d6:	c5 c0       	rjmp	.+394    	; 0xa62 <USB_Device_ProcessControlRequest+0x256>
 8d8:	20 93 e9 00 	sts	0x00E9, r18
 8dc:	80 91 eb 00 	lds	r24, 0x00EB
 8e0:	80 ff       	sbrs	r24, 0
 8e2:	19 c0       	rjmp	.+50     	; 0x916 <USB_Device_ProcessControlRequest+0x10a>
 8e4:	80 91 eb 00 	lds	r24, 0x00EB
 8e8:	33 30       	cpi	r19, 0x03	; 3
 8ea:	11 f4       	brne	.+4      	; 0x8f0 <USB_Device_ProcessControlRequest+0xe4>
 8ec:	80 62       	ori	r24, 0x20	; 32
 8ee:	11 c0       	rjmp	.+34     	; 0x912 <USB_Device_ProcessControlRequest+0x106>
 8f0:	80 61       	ori	r24, 0x10	; 16
 8f2:	80 93 eb 00 	sts	0x00EB, r24
 8f6:	81 e0       	ldi	r24, 0x01	; 1
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	02 2e       	mov	r0, r18
 8fc:	01 c0       	rjmp	.+2      	; 0x900 <USB_Device_ProcessControlRequest+0xf4>
 8fe:	88 0f       	add	r24, r24
 900:	0a 94       	dec	r0
 902:	ea f7       	brpl	.-6      	; 0x8fe <USB_Device_ProcessControlRequest+0xf2>
 904:	80 93 ea 00 	sts	0x00EA, r24
 908:	10 92 ea 00 	sts	0x00EA, r1
 90c:	80 91 eb 00 	lds	r24, 0x00EB
 910:	88 60       	ori	r24, 0x08	; 8
 912:	80 93 eb 00 	sts	0x00EB, r24
 916:	10 92 e9 00 	sts	0x00E9, r1
 91a:	80 91 e8 00 	lds	r24, 0x00E8
 91e:	87 7f       	andi	r24, 0xF7	; 247
 920:	81 c0       	rjmp	.+258    	; 0xa24 <USB_Device_ProcessControlRequest+0x218>
 922:	21 11       	cpse	r18, r1
 924:	9e c0       	rjmp	.+316    	; 0xa62 <USB_Device_ProcessControlRequest+0x256>
 926:	10 91 22 01 	lds	r17, 0x0122
 92a:	1f 77       	andi	r17, 0x7F	; 127
 92c:	80 91 e3 00 	lds	r24, 0x00E3
 930:	80 78       	andi	r24, 0x80	; 128
 932:	81 2b       	or	r24, r17
 934:	80 93 e3 00 	sts	0x00E3, r24
 938:	80 91 e8 00 	lds	r24, 0x00E8
 93c:	87 7f       	andi	r24, 0xF7	; 247
 93e:	80 93 e8 00 	sts	0x00E8, r24
 942:	44 de       	rcall	.-888    	; 0x5cc <Endpoint_ClearStatusStage>
 944:	80 91 e8 00 	lds	r24, 0x00E8
 948:	80 ff       	sbrs	r24, 0
 94a:	fc cf       	rjmp	.-8      	; 0x944 <USB_Device_ProcessControlRequest+0x138>
 94c:	80 91 e3 00 	lds	r24, 0x00E3
 950:	80 68       	ori	r24, 0x80	; 128
 952:	80 93 e3 00 	sts	0x00E3, r24
 956:	11 23       	and	r17, r17
 958:	11 f0       	breq	.+4      	; 0x95e <USB_Device_ProcessControlRequest+0x152>
 95a:	83 e0       	ldi	r24, 0x03	; 3
 95c:	01 c0       	rjmp	.+2      	; 0x960 <USB_Device_ProcessControlRequest+0x154>
 95e:	82 e0       	ldi	r24, 0x02	; 2
 960:	8e bb       	out	0x1e, r24	; 30
 962:	7f c0       	rjmp	.+254    	; 0xa62 <USB_Device_ProcessControlRequest+0x256>
 964:	20 58       	subi	r18, 0x80	; 128
 966:	22 30       	cpi	r18, 0x02	; 2
 968:	08 f0       	brcs	.+2      	; 0x96c <USB_Device_ProcessControlRequest+0x160>
 96a:	7b c0       	rjmp	.+246    	; 0xa62 <USB_Device_ProcessControlRequest+0x256>
 96c:	80 91 22 01 	lds	r24, 0x0122
 970:	90 91 23 01 	lds	r25, 0x0123
 974:	8c 3d       	cpi	r24, 0xDC	; 220
 976:	23 e0       	ldi	r18, 0x03	; 3
 978:	92 07       	cpc	r25, r18
 97a:	71 f5       	brne	.+92     	; 0x9d8 <USB_Device_ProcessControlRequest+0x1cc>
 97c:	83 e0       	ldi	r24, 0x03	; 3
 97e:	8a 83       	std	Y+2, r24	; 0x02
 980:	8a e2       	ldi	r24, 0x2A	; 42
 982:	89 83       	std	Y+1, r24	; 0x01
 984:	4f b7       	in	r20, 0x3f	; 63
 986:	f8 94       	cli
 988:	de 01       	movw	r26, r28
 98a:	13 96       	adiw	r26, 0x03	; 3
 98c:	20 e0       	ldi	r18, 0x00	; 0
 98e:	3e e0       	ldi	r19, 0x0E	; 14
 990:	51 e2       	ldi	r21, 0x21	; 33
 992:	e3 2f       	mov	r30, r19
 994:	f0 e0       	ldi	r31, 0x00	; 0
 996:	50 93 57 00 	sts	0x0057, r21
 99a:	e4 91       	lpm	r30, Z
 99c:	20 ff       	sbrs	r18, 0
 99e:	03 c0       	rjmp	.+6      	; 0x9a6 <USB_Device_ProcessControlRequest+0x19a>
 9a0:	e2 95       	swap	r30
 9a2:	ef 70       	andi	r30, 0x0F	; 15
 9a4:	3f 5f       	subi	r19, 0xFF	; 255
 9a6:	ef 70       	andi	r30, 0x0F	; 15
 9a8:	8e 2f       	mov	r24, r30
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	ea 30       	cpi	r30, 0x0A	; 10
 9ae:	10 f0       	brcs	.+4      	; 0x9b4 <USB_Device_ProcessControlRequest+0x1a8>
 9b0:	c7 96       	adiw	r24, 0x37	; 55
 9b2:	01 c0       	rjmp	.+2      	; 0x9b6 <USB_Device_ProcessControlRequest+0x1aa>
 9b4:	c0 96       	adiw	r24, 0x30	; 48
 9b6:	8d 93       	st	X+, r24
 9b8:	9d 93       	st	X+, r25
 9ba:	2f 5f       	subi	r18, 0xFF	; 255
 9bc:	24 31       	cpi	r18, 0x14	; 20
 9be:	49 f7       	brne	.-46     	; 0x992 <USB_Device_ProcessControlRequest+0x186>
 9c0:	4f bf       	out	0x3f, r20	; 63
 9c2:	80 91 e8 00 	lds	r24, 0x00E8
 9c6:	87 7f       	andi	r24, 0xF7	; 247
 9c8:	80 93 e8 00 	sts	0x00E8, r24
 9cc:	6a e2       	ldi	r22, 0x2A	; 42
 9ce:	70 e0       	ldi	r23, 0x00	; 0
 9d0:	ce 01       	movw	r24, r28
 9d2:	01 96       	adiw	r24, 0x01	; 1
 9d4:	d4 dc       	rcall	.-1624   	; 0x37e <Endpoint_Write_Control_Stream_LE>
 9d6:	12 c0       	rjmp	.+36     	; 0x9fc <USB_Device_ProcessControlRequest+0x1f0>
 9d8:	ae 01       	movw	r20, r28
 9da:	4f 5f       	subi	r20, 0xFF	; 255
 9dc:	5f 4f       	sbci	r21, 0xFF	; 255
 9de:	60 91 24 01 	lds	r22, 0x0124
 9e2:	9b dc       	rcall	.-1738   	; 0x31a <CALLBACK_USB_GetDescriptor>
 9e4:	00 97       	sbiw	r24, 0x00	; 0
 9e6:	09 f4       	brne	.+2      	; 0x9ea <USB_Device_ProcessControlRequest+0x1de>
 9e8:	3c c0       	rjmp	.+120    	; 0xa62 <USB_Device_ProcessControlRequest+0x256>
 9ea:	20 91 e8 00 	lds	r18, 0x00E8
 9ee:	27 7f       	andi	r18, 0xF7	; 247
 9f0:	20 93 e8 00 	sts	0x00E8, r18
 9f4:	bc 01       	movw	r22, r24
 9f6:	89 81       	ldd	r24, Y+1	; 0x01
 9f8:	9a 81       	ldd	r25, Y+2	; 0x02
 9fa:	1a dd       	rcall	.-1484   	; 0x430 <Endpoint_Write_Control_PStream_LE>
 9fc:	80 91 e8 00 	lds	r24, 0x00E8
 a00:	8b 77       	andi	r24, 0x7B	; 123
 a02:	80 93 e8 00 	sts	0x00E8, r24
 a06:	2d c0       	rjmp	.+90     	; 0xa62 <USB_Device_ProcessControlRequest+0x256>
 a08:	20 38       	cpi	r18, 0x80	; 128
 a0a:	59 f5       	brne	.+86     	; 0xa62 <USB_Device_ProcessControlRequest+0x256>
 a0c:	80 91 e8 00 	lds	r24, 0x00E8
 a10:	87 7f       	andi	r24, 0xF7	; 247
 a12:	80 93 e8 00 	sts	0x00E8, r24
 a16:	80 91 1c 01 	lds	r24, 0x011C
 a1a:	80 93 f1 00 	sts	0x00F1, r24
 a1e:	80 91 e8 00 	lds	r24, 0x00E8
 a22:	8e 77       	andi	r24, 0x7E	; 126
 a24:	80 93 e8 00 	sts	0x00E8, r24
 a28:	d1 dd       	rcall	.-1118   	; 0x5cc <Endpoint_ClearStatusStage>
 a2a:	1b c0       	rjmp	.+54     	; 0xa62 <USB_Device_ProcessControlRequest+0x256>
 a2c:	21 11       	cpse	r18, r1
 a2e:	19 c0       	rjmp	.+50     	; 0xa62 <USB_Device_ProcessControlRequest+0x256>
 a30:	90 91 22 01 	lds	r25, 0x0122
 a34:	92 30       	cpi	r25, 0x02	; 2
 a36:	a8 f4       	brcc	.+42     	; 0xa62 <USB_Device_ProcessControlRequest+0x256>
 a38:	80 91 e8 00 	lds	r24, 0x00E8
 a3c:	87 7f       	andi	r24, 0xF7	; 247
 a3e:	80 93 e8 00 	sts	0x00E8, r24
 a42:	90 93 1c 01 	sts	0x011C, r25
 a46:	c2 dd       	rcall	.-1148   	; 0x5cc <Endpoint_ClearStatusStage>
 a48:	80 91 1c 01 	lds	r24, 0x011C
 a4c:	81 11       	cpse	r24, r1
 a4e:	04 c0       	rjmp	.+8      	; 0xa58 <USB_Device_ProcessControlRequest+0x24c>
 a50:	80 91 e3 00 	lds	r24, 0x00E3
 a54:	87 ff       	sbrs	r24, 7
 a56:	02 c0       	rjmp	.+4      	; 0xa5c <USB_Device_ProcessControlRequest+0x250>
 a58:	84 e0       	ldi	r24, 0x04	; 4
 a5a:	01 c0       	rjmp	.+2      	; 0xa5e <USB_Device_ProcessControlRequest+0x252>
 a5c:	81 e0       	ldi	r24, 0x01	; 1
 a5e:	8e bb       	out	0x1e, r24	; 30
 a60:	56 dc       	rcall	.-1876   	; 0x30e <EVENT_USB_Device_ConfigurationChanged>
 a62:	80 91 e8 00 	lds	r24, 0x00E8
 a66:	83 ff       	sbrs	r24, 3
 a68:	0a c0       	rjmp	.+20     	; 0xa7e <USB_Device_ProcessControlRequest+0x272>
 a6a:	80 91 e8 00 	lds	r24, 0x00E8
 a6e:	87 7f       	andi	r24, 0xF7	; 247
 a70:	80 93 e8 00 	sts	0x00E8, r24
 a74:	80 91 eb 00 	lds	r24, 0x00EB
 a78:	80 62       	ori	r24, 0x20	; 32
 a7a:	80 93 eb 00 	sts	0x00EB, r24
 a7e:	aa 96       	adiw	r28, 0x2a	; 42
 a80:	0f b6       	in	r0, 0x3f	; 63
 a82:	f8 94       	cli
 a84:	de bf       	out	0x3e, r29	; 62
 a86:	0f be       	out	0x3f, r0	; 63
 a88:	cd bf       	out	0x3d, r28	; 61
 a8a:	df 91       	pop	r29
 a8c:	cf 91       	pop	r28
 a8e:	1f 91       	pop	r17
 a90:	08 95       	ret

00000a92 <USB_Event_Stub>:
 a92:	08 95       	ret

00000a94 <CDC_Device_ConfigureEndpoints>:
 a94:	cf 93       	push	r28
 a96:	df 93       	push	r29
 a98:	ec 01       	movw	r28, r24
 a9a:	fc 01       	movw	r30, r24
 a9c:	70 96       	adiw	r30, 0x10	; 16
 a9e:	8b e0       	ldi	r24, 0x0B	; 11
 aa0:	df 01       	movw	r26, r30
 aa2:	1d 92       	st	X+, r1
 aa4:	8a 95       	dec	r24
 aa6:	e9 f7       	brne	.-6      	; 0xaa2 <CDC_Device_ConfigureEndpoints+0xe>
 aa8:	82 e0       	ldi	r24, 0x02	; 2
 aaa:	8c 83       	std	Y+4, r24	; 0x04
 aac:	89 87       	std	Y+9, r24	; 0x09
 aae:	83 e0       	ldi	r24, 0x03	; 3
 ab0:	8e 87       	std	Y+14, r24	; 0x0e
 ab2:	61 e0       	ldi	r22, 0x01	; 1
 ab4:	ce 01       	movw	r24, r28
 ab6:	01 96       	adiw	r24, 0x01	; 1
 ab8:	4c dd       	rcall	.-1384   	; 0x552 <Endpoint_ConfigureEndpointTable>
 aba:	88 23       	and	r24, r24
 abc:	61 f0       	breq	.+24     	; 0xad6 <CDC_Device_ConfigureEndpoints+0x42>
 abe:	61 e0       	ldi	r22, 0x01	; 1
 ac0:	ce 01       	movw	r24, r28
 ac2:	06 96       	adiw	r24, 0x06	; 6
 ac4:	46 dd       	rcall	.-1396   	; 0x552 <Endpoint_ConfigureEndpointTable>
 ac6:	88 23       	and	r24, r24
 ac8:	31 f0       	breq	.+12     	; 0xad6 <CDC_Device_ConfigureEndpoints+0x42>
 aca:	61 e0       	ldi	r22, 0x01	; 1
 acc:	ce 01       	movw	r24, r28
 ace:	0b 96       	adiw	r24, 0x0b	; 11
 ad0:	df 91       	pop	r29
 ad2:	cf 91       	pop	r28
 ad4:	3e cd       	rjmp	.-1412   	; 0x552 <Endpoint_ConfigureEndpointTable>
 ad6:	80 e0       	ldi	r24, 0x00	; 0
 ad8:	df 91       	pop	r29
 ada:	cf 91       	pop	r28
 adc:	08 95       	ret

00000ade <CDC_Device_Event_Stub>:
 ade:	08 95       	ret

00000ae0 <CDC_Device_ProcessControlRequest>:
 ae0:	cf 93       	push	r28
 ae2:	df 93       	push	r29
 ae4:	ec 01       	movw	r28, r24
 ae6:	80 91 e8 00 	lds	r24, 0x00E8
 aea:	83 ff       	sbrs	r24, 3
 aec:	a5 c0       	rjmp	.+330    	; 0xc38 <__stack+0x139>
 aee:	88 81       	ld	r24, Y
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	20 91 24 01 	lds	r18, 0x0124
 af6:	30 91 25 01 	lds	r19, 0x0125
 afa:	28 17       	cp	r18, r24
 afc:	39 07       	cpc	r19, r25
 afe:	09 f0       	breq	.+2      	; 0xb02 <__stack+0x3>
 b00:	9b c0       	rjmp	.+310    	; 0xc38 <__stack+0x139>
 b02:	80 91 21 01 	lds	r24, 0x0121
 b06:	81 32       	cpi	r24, 0x21	; 33
 b08:	61 f0       	breq	.+24     	; 0xb22 <__stack+0x23>
 b0a:	20 f4       	brcc	.+8      	; 0xb14 <__stack+0x15>
 b0c:	80 32       	cpi	r24, 0x20	; 32
 b0e:	09 f4       	brne	.+2      	; 0xb12 <__stack+0x13>
 b10:	3e c0       	rjmp	.+124    	; 0xb8e <__stack+0x8f>
 b12:	92 c0       	rjmp	.+292    	; 0xc38 <__stack+0x139>
 b14:	82 32       	cpi	r24, 0x22	; 34
 b16:	09 f4       	brne	.+2      	; 0xb1a <__stack+0x1b>
 b18:	6b c0       	rjmp	.+214    	; 0xbf0 <__stack+0xf1>
 b1a:	83 32       	cpi	r24, 0x23	; 35
 b1c:	09 f4       	brne	.+2      	; 0xb20 <__stack+0x21>
 b1e:	7c c0       	rjmp	.+248    	; 0xc18 <__stack+0x119>
 b20:	8b c0       	rjmp	.+278    	; 0xc38 <__stack+0x139>
 b22:	80 91 20 01 	lds	r24, 0x0120
 b26:	81 3a       	cpi	r24, 0xA1	; 161
 b28:	09 f0       	breq	.+2      	; 0xb2c <__stack+0x2d>
 b2a:	86 c0       	rjmp	.+268    	; 0xc38 <__stack+0x139>
 b2c:	80 91 e8 00 	lds	r24, 0x00E8
 b30:	87 7f       	andi	r24, 0xF7	; 247
 b32:	80 93 e8 00 	sts	0x00E8, r24
 b36:	80 91 e8 00 	lds	r24, 0x00E8
 b3a:	80 ff       	sbrs	r24, 0
 b3c:	fc cf       	rjmp	.-8      	; 0xb36 <__stack+0x37>
 b3e:	4c 89       	ldd	r20, Y+20	; 0x14
 b40:	5d 89       	ldd	r21, Y+21	; 0x15
 b42:	6e 89       	ldd	r22, Y+22	; 0x16
 b44:	7f 89       	ldd	r23, Y+23	; 0x17
 b46:	40 93 f1 00 	sts	0x00F1, r20
 b4a:	bb 27       	eor	r27, r27
 b4c:	a7 2f       	mov	r26, r23
 b4e:	96 2f       	mov	r25, r22
 b50:	85 2f       	mov	r24, r21
 b52:	80 93 f1 00 	sts	0x00F1, r24
 b56:	cb 01       	movw	r24, r22
 b58:	aa 27       	eor	r26, r26
 b5a:	bb 27       	eor	r27, r27
 b5c:	80 93 f1 00 	sts	0x00F1, r24
 b60:	47 2f       	mov	r20, r23
 b62:	55 27       	eor	r21, r21
 b64:	66 27       	eor	r22, r22
 b66:	77 27       	eor	r23, r23
 b68:	40 93 f1 00 	sts	0x00F1, r20
 b6c:	88 8d       	ldd	r24, Y+24	; 0x18
 b6e:	80 93 f1 00 	sts	0x00F1, r24
 b72:	89 8d       	ldd	r24, Y+25	; 0x19
 b74:	80 93 f1 00 	sts	0x00F1, r24
 b78:	8a 8d       	ldd	r24, Y+26	; 0x1a
 b7a:	80 93 f1 00 	sts	0x00F1, r24
 b7e:	80 91 e8 00 	lds	r24, 0x00E8
 b82:	8e 77       	andi	r24, 0x7E	; 126
 b84:	80 93 e8 00 	sts	0x00E8, r24
 b88:	df 91       	pop	r29
 b8a:	cf 91       	pop	r28
 b8c:	1f cd       	rjmp	.-1474   	; 0x5cc <Endpoint_ClearStatusStage>
 b8e:	80 91 20 01 	lds	r24, 0x0120
 b92:	81 32       	cpi	r24, 0x21	; 33
 b94:	09 f0       	breq	.+2      	; 0xb98 <__stack+0x99>
 b96:	50 c0       	rjmp	.+160    	; 0xc38 <__stack+0x139>
 b98:	80 91 e8 00 	lds	r24, 0x00E8
 b9c:	87 7f       	andi	r24, 0xF7	; 247
 b9e:	80 93 e8 00 	sts	0x00E8, r24
 ba2:	80 91 e8 00 	lds	r24, 0x00E8
 ba6:	82 fd       	sbrc	r24, 2
 ba8:	04 c0       	rjmp	.+8      	; 0xbb2 <__stack+0xb3>
 baa:	8e b3       	in	r24, 0x1e	; 30
 bac:	81 11       	cpse	r24, r1
 bae:	f9 cf       	rjmp	.-14     	; 0xba2 <__stack+0xa3>
 bb0:	43 c0       	rjmp	.+134    	; 0xc38 <__stack+0x139>
 bb2:	30 91 f1 00 	lds	r19, 0x00F1
 bb6:	20 91 f1 00 	lds	r18, 0x00F1
 bba:	90 91 f1 00 	lds	r25, 0x00F1
 bbe:	80 91 f1 00 	lds	r24, 0x00F1
 bc2:	3c 8b       	std	Y+20, r19	; 0x14
 bc4:	2d 8b       	std	Y+21, r18	; 0x15
 bc6:	9e 8b       	std	Y+22, r25	; 0x16
 bc8:	8f 8b       	std	Y+23, r24	; 0x17
 bca:	80 91 f1 00 	lds	r24, 0x00F1
 bce:	88 8f       	std	Y+24, r24	; 0x18
 bd0:	80 91 f1 00 	lds	r24, 0x00F1
 bd4:	89 8f       	std	Y+25, r24	; 0x19
 bd6:	80 91 f1 00 	lds	r24, 0x00F1
 bda:	8a 8f       	std	Y+26, r24	; 0x1a
 bdc:	80 91 e8 00 	lds	r24, 0x00E8
 be0:	8b 77       	andi	r24, 0x7B	; 123
 be2:	80 93 e8 00 	sts	0x00E8, r24
 be6:	f2 dc       	rcall	.-1564   	; 0x5cc <Endpoint_ClearStatusStage>
 be8:	ce 01       	movw	r24, r28
 bea:	df 91       	pop	r29
 bec:	cf 91       	pop	r28
 bee:	77 cf       	rjmp	.-274    	; 0xade <CDC_Device_Event_Stub>
 bf0:	80 91 20 01 	lds	r24, 0x0120
 bf4:	81 32       	cpi	r24, 0x21	; 33
 bf6:	01 f5       	brne	.+64     	; 0xc38 <__stack+0x139>
 bf8:	80 91 e8 00 	lds	r24, 0x00E8
 bfc:	87 7f       	andi	r24, 0xF7	; 247
 bfe:	80 93 e8 00 	sts	0x00E8, r24
 c02:	e4 dc       	rcall	.-1592   	; 0x5cc <Endpoint_ClearStatusStage>
 c04:	80 91 22 01 	lds	r24, 0x0122
 c08:	90 91 23 01 	lds	r25, 0x0123
 c0c:	99 8b       	std	Y+17, r25	; 0x11
 c0e:	88 8b       	std	Y+16, r24	; 0x10
 c10:	ce 01       	movw	r24, r28
 c12:	df 91       	pop	r29
 c14:	cf 91       	pop	r28
 c16:	63 cf       	rjmp	.-314    	; 0xade <CDC_Device_Event_Stub>
 c18:	80 91 20 01 	lds	r24, 0x0120
 c1c:	81 32       	cpi	r24, 0x21	; 33
 c1e:	61 f4       	brne	.+24     	; 0xc38 <__stack+0x139>
 c20:	80 91 e8 00 	lds	r24, 0x00E8
 c24:	87 7f       	andi	r24, 0xF7	; 247
 c26:	80 93 e8 00 	sts	0x00E8, r24
 c2a:	d0 dc       	rcall	.-1632   	; 0x5cc <Endpoint_ClearStatusStage>
 c2c:	60 91 22 01 	lds	r22, 0x0122
 c30:	ce 01       	movw	r24, r28
 c32:	df 91       	pop	r29
 c34:	cf 91       	pop	r28
 c36:	53 cf       	rjmp	.-346    	; 0xade <CDC_Device_Event_Stub>
 c38:	df 91       	pop	r29
 c3a:	cf 91       	pop	r28
 c3c:	08 95       	ret

00000c3e <__tablejump2__>:
 c3e:	ee 0f       	add	r30, r30
 c40:	ff 1f       	adc	r31, r31

00000c42 <__tablejump__>:
 c42:	05 90       	lpm	r0, Z+
 c44:	f4 91       	lpm	r31, Z
 c46:	e0 2d       	mov	r30, r0
 c48:	09 94       	ijmp

00000c4a <_exit>:
 c4a:	f8 94       	cli

00000c4c <__stop_program>:
 c4c:	ff cf       	rjmp	.-2      	; 0xc4c <__stop_program>
