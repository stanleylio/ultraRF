
sonic3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  0000192a  000019be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000192a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080011e  0080011e  000019dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019dc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000660  00000000  00000000  00001a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000a758  00000000  00000000  0000206c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002b82  00000000  00000000  0000c7c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000062ea  00000000  00000000  0000f346  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000fb0  00000000  00000000  00015630  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003d97  00000000  00000000  000165e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00006703  00000000  00000000  0001a377  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000778  00000000  00000000  00020a7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	22 c1       	rjmp	.+580    	; 0x246 <__ctors_end>
       2:	00 00       	nop
       4:	3c c1       	rjmp	.+632    	; 0x27e <__bad_interrupt>
       6:	00 00       	nop
       8:	3a c1       	rjmp	.+628    	; 0x27e <__bad_interrupt>
       a:	00 00       	nop
       c:	38 c1       	rjmp	.+624    	; 0x27e <__bad_interrupt>
       e:	00 00       	nop
      10:	36 c1       	rjmp	.+620    	; 0x27e <__bad_interrupt>
      12:	00 00       	nop
      14:	34 c1       	rjmp	.+616    	; 0x27e <__bad_interrupt>
      16:	00 00       	nop
      18:	32 c1       	rjmp	.+612    	; 0x27e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	30 c1       	rjmp	.+608    	; 0x27e <__bad_interrupt>
      1e:	00 00       	nop
      20:	2e c1       	rjmp	.+604    	; 0x27e <__bad_interrupt>
      22:	00 00       	nop
      24:	2c c1       	rjmp	.+600    	; 0x27e <__bad_interrupt>
      26:	00 00       	nop
      28:	14 c5       	rjmp	.+2600   	; 0xa52 <__vector_10>
      2a:	00 00       	nop
      2c:	d8 c5       	rjmp	.+2992   	; 0xbde <__vector_11>
      2e:	00 00       	nop
      30:	26 c1       	rjmp	.+588    	; 0x27e <__bad_interrupt>
      32:	00 00       	nop
      34:	24 c1       	rjmp	.+584    	; 0x27e <__bad_interrupt>
      36:	00 00       	nop
      38:	22 c1       	rjmp	.+580    	; 0x27e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	20 c1       	rjmp	.+576    	; 0x27e <__bad_interrupt>
      3e:	00 00       	nop
      40:	1e c1       	rjmp	.+572    	; 0x27e <__bad_interrupt>
      42:	00 00       	nop
      44:	1c c1       	rjmp	.+568    	; 0x27e <__bad_interrupt>
      46:	00 00       	nop
      48:	1a c1       	rjmp	.+564    	; 0x27e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	18 c1       	rjmp	.+560    	; 0x27e <__bad_interrupt>
      4e:	00 00       	nop
      50:	16 c1       	rjmp	.+556    	; 0x27e <__bad_interrupt>
      52:	00 00       	nop
      54:	14 c1       	rjmp	.+552    	; 0x27e <__bad_interrupt>
      56:	00 00       	nop
      58:	12 c1       	rjmp	.+548    	; 0x27e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	10 c1       	rjmp	.+544    	; 0x27e <__bad_interrupt>
      5e:	00 00       	nop
      60:	0e c1       	rjmp	.+540    	; 0x27e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c c1       	rjmp	.+536    	; 0x27e <__bad_interrupt>
      66:	00 00       	nop
      68:	0a c1       	rjmp	.+532    	; 0x27e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	08 c1       	rjmp	.+528    	; 0x27e <__bad_interrupt>
      6e:	00 00       	nop
      70:	06 c1       	rjmp	.+524    	; 0x27e <__bad_interrupt>
      72:	00 00       	nop
      74:	21 c1       	rjmp	.+578    	; 0x2b8 <__vector_29>
      76:	00 00       	nop
      78:	02 c1       	rjmp	.+516    	; 0x27e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	00 c1       	rjmp	.+512    	; 0x27e <__bad_interrupt>
      7e:	00 00       	nop
      80:	fe c0       	rjmp	.+508    	; 0x27e <__bad_interrupt>
      82:	00 00       	nop
      84:	fc c0       	rjmp	.+504    	; 0x27e <__bad_interrupt>
      86:	00 00       	nop
      88:	fa c0       	rjmp	.+500    	; 0x27e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f8 c0       	rjmp	.+496    	; 0x27e <__bad_interrupt>
      8e:	00 00       	nop
      90:	f6 c0       	rjmp	.+492    	; 0x27e <__bad_interrupt>
      92:	00 00       	nop
      94:	f4 c0       	rjmp	.+488    	; 0x27e <__bad_interrupt>
      96:	00 00       	nop
      98:	f2 c0       	rjmp	.+484    	; 0x27e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f0 c0       	rjmp	.+480    	; 0x27e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ee c0       	rjmp	.+476    	; 0x27e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ec c0       	rjmp	.+472    	; 0x27e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ea c0       	rjmp	.+468    	; 0x27e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	51 06       	cpc	r5, r17
      ae:	73 06       	cpc	r7, r19
      b0:	55 07       	cpc	r21, r21
      b2:	73 06       	cpc	r7, r19
      b4:	55 07       	cpc	r21, r21
      b6:	b5 06       	cpc	r11, r21
      b8:	d6 06       	cpc	r13, r22
      ba:	55 07       	cpc	r21, r21
      bc:	28 07       	cpc	r18, r24
      be:	3a 07       	cpc	r19, r26

000000c0 <ProductString>:
      c0:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
      d0:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

000000de <ManufacturerString>:
      de:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      ee:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000f8 <LanguageString>:
      f8:	04 03 09 04                                         ....

000000fc <ConfigurationDescriptor>:
      fc:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
     10c:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     11c:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     12c:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

0000013a <DeviceDescriptor>:
     13a:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     14a:	dc 01 00 40 7a 10 f3 5a 00 a0 72 4e 18 09 00 10     ...@z..Z..rN....
     15a:	a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54 02 00     ......vH.....T..
     16a:	00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96 98 00     ...;............
     17a:	00 00 40 42 0f 00 00 00 a0 86 01 00 00 00 10 27     ..@B...........'
     18a:	00 00 00 00 e8 03 00 00 00 00 64 00 00 00 00 00     ..........d.....
     19a:	0a 00 00 00 00 00 01 00 00 00 00 00 2c 76 d8 88     ............,v..
     1aa:	dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96 e5 e3     .gO.#....Y......
     1ba:	e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26 eb 89     .S.:.Q.v.....&..
     1ca:	8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2 ba a5     ..b.@|o.....@...
     1da:	6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67 6d c1     o....Z*.\.kl.gm.
     1ea:	1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed 90 2e     .....G.. .......
     1fa:	03 00 94 35 77 05 00 80 84 1e 08 00 00 20 4e 0a     ...5w........ N.
     20a:	00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83 11 41     .....3333..n...A
     21a:	ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18 d1 84     ..!..;.U........
     22a:	4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32 84 72     K8..|......$ 2.r
     23a:	5e 22 81 00 c9 f1 24 ec a1 e5 3d 27                 ^"....$...='

00000246 <__ctors_end>:
     246:	11 24       	eor	r1, r1
     248:	1f be       	out	0x3f, r1	; 63
     24a:	cf ef       	ldi	r28, 0xFF	; 255
     24c:	da e0       	ldi	r29, 0x0A	; 10
     24e:	de bf       	out	0x3e, r29	; 62
     250:	cd bf       	out	0x3d, r28	; 61

00000252 <__do_copy_data>:
     252:	11 e0       	ldi	r17, 0x01	; 1
     254:	a0 e0       	ldi	r26, 0x00	; 0
     256:	b1 e0       	ldi	r27, 0x01	; 1
     258:	ea e2       	ldi	r30, 0x2A	; 42
     25a:	f9 e1       	ldi	r31, 0x19	; 25
     25c:	02 c0       	rjmp	.+4      	; 0x262 <__do_copy_data+0x10>
     25e:	05 90       	lpm	r0, Z+
     260:	0d 92       	st	X+, r0
     262:	ae 31       	cpi	r26, 0x1E	; 30
     264:	b1 07       	cpc	r27, r17
     266:	d9 f7       	brne	.-10     	; 0x25e <__do_copy_data+0xc>

00000268 <__do_clear_bss>:
     268:	21 e0       	ldi	r18, 0x01	; 1
     26a:	ae e1       	ldi	r26, 0x1E	; 30
     26c:	b1 e0       	ldi	r27, 0x01	; 1
     26e:	01 c0       	rjmp	.+2      	; 0x272 <.do_clear_bss_start>

00000270 <.do_clear_bss_loop>:
     270:	1d 92       	st	X+, r1

00000272 <.do_clear_bss_start>:
     272:	ac 32       	cpi	r26, 0x2C	; 44
     274:	b2 07       	cpc	r27, r18
     276:	e1 f7       	brne	.-8      	; 0x270 <.do_clear_bss_loop>
     278:	29 d1       	rcall	.+594    	; 0x4cc <main>
     27a:	0c 94 93 0c 	jmp	0x1926	; 0x1926 <_exit>

0000027e <__bad_interrupt>:
     27e:	c0 ce       	rjmp	.-640    	; 0x0 <__vectors>

00000280 <write_register>:
	return tmp;
}

static inline void write_register(uint8_t reg, uint8_t val)
{
	clear(PORTF,CSN);
     280:	8d 98       	cbi	0x11, 5	; 17
	SPI_TransferByte(W_REGISTER | reg);
     282:	80 62       	ori	r24, 0x20	; 32
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
     284:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     286:	0d b4       	in	r0, 0x2d	; 45
     288:	07 fe       	sbrs	r0, 7
     28a:	fd cf       	rjmp	.-6      	; 0x286 <write_register+0x6>
				return SPDR;
     28c:	8e b5       	in	r24, 0x2e	; 46
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
     28e:	6e bd       	out	0x2e, r22	; 46
				while (!(SPSR & (1 << SPIF)));
     290:	0d b4       	in	r0, 0x2d	; 45
     292:	07 fe       	sbrs	r0, 7
     294:	fd cf       	rjmp	.-6      	; 0x290 <write_register+0x10>
				return SPDR;
     296:	8e b5       	in	r24, 0x2e	; 46
	SPI_TransferByte(val);
	set(PORTF,CSN);
     298:	8d 9a       	sbi	0x11, 5	; 17
     29a:	08 95       	ret

0000029c <read_register>:
}

static inline uint8_t read_register(uint8_t reg)
{
	uint8_t tmp = 0;
	clear(PORTF,CSN);
     29c:	8d 98       	cbi	0x11, 5	; 17
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
     29e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     2a0:	0d b4       	in	r0, 0x2d	; 45
     2a2:	07 fe       	sbrs	r0, 7
     2a4:	fd cf       	rjmp	.-6      	; 0x2a0 <read_register+0x4>
				return SPDR;
     2a6:	8e b5       	in	r24, 0x2e	; 46
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
     2a8:	8f ef       	ldi	r24, 0xFF	; 255
     2aa:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     2ac:	0d b4       	in	r0, 0x2d	; 45
     2ae:	07 fe       	sbrs	r0, 7
     2b0:	fd cf       	rjmp	.-6      	; 0x2ac <read_register+0x10>
				return SPDR;
     2b2:	8e b5       	in	r24, 0x2e	; 46
	SPI_TransferByte(R_REGISTER | reg);
	tmp = SPI_TransferByte(NOP);
	set(PORTF,CSN);
     2b4:	8d 9a       	sbi	0x11, 5	; 17
	return tmp;
}
     2b6:	08 95       	ret

000002b8 <__vector_29>:
volatile uint16_t old_adc = UINT16_MAX;

//volatile uint8_t S[SEQ_LENGTH];

ISR(ADC_vect)
{
     2b8:	1f 92       	push	r1
     2ba:	0f 92       	push	r0
     2bc:	0f b6       	in	r0, 0x3f	; 63
     2be:	0f 92       	push	r0
     2c0:	11 24       	eor	r1, r1
     2c2:	ef 92       	push	r14
     2c4:	ff 92       	push	r15
     2c6:	0f 93       	push	r16
     2c8:	1f 93       	push	r17
     2ca:	2f 93       	push	r18
     2cc:	3f 93       	push	r19
     2ce:	4f 93       	push	r20
     2d0:	5f 93       	push	r21
     2d2:	6f 93       	push	r22
     2d4:	7f 93       	push	r23
     2d6:	8f 93       	push	r24
     2d8:	9f 93       	push	r25
     2da:	af 93       	push	r26
     2dc:	bf 93       	push	r27
     2de:	ef 93       	push	r30
     2e0:	ff 93       	push	r31
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	cd b7       	in	r28, 0x3d	; 61
     2e8:	de b7       	in	r29, 0x3e	; 62
     2ea:	64 97       	sbiw	r28, 0x14	; 20
     2ec:	de bf       	out	0x3e, r29	; 62
     2ee:	cd bf       	out	0x3d, r28	; 61
	if (seq_idx < SEQ_LENGTH)
     2f0:	80 91 1e 01 	lds	r24, 0x011E
     2f4:	90 91 1f 01 	lds	r25, 0x011F
     2f8:	80 37       	cpi	r24, 0x70	; 112
     2fa:	97 41       	sbci	r25, 0x17	; 23
     2fc:	08 f0       	brcs	.+2      	; 0x300 <__vector_29+0x48>
     2fe:	5c c0       	rjmp	.+184    	; 0x3b8 <__vector_29+0x100>
	{
		char sbuf[20];
		uint16_t val;
		uint16_t got;
		
		LED_amber_ON;
     300:	28 98       	cbi	0x05, 0	; 5
		val = ADC;
     302:	e0 90 78 00 	lds	r14, 0x0078
     306:	f0 90 79 00 	lds	r15, 0x0079
		seq_idx++;
     30a:	80 91 1e 01 	lds	r24, 0x011E
     30e:	90 91 1f 01 	lds	r25, 0x011F
     312:	01 96       	adiw	r24, 0x01	; 1
     314:	90 93 1f 01 	sts	0x011F, r25
     318:	80 93 1e 01 	sts	0x011E, r24
		//CDC_Device_SendData(&VirtualSerial_CDC_Interface,sbuf,got);
		//_delay_us(200);

		//S[seq_idx] = ADC >> 2;
		
		if ((val > old_adc) && ((val - old_adc) > 10))
     31c:	80 91 00 01 	lds	r24, 0x0100
     320:	90 91 01 01 	lds	r25, 0x0101
     324:	8e 15       	cp	r24, r14
     326:	9f 05       	cpc	r25, r15
     328:	08 f0       	brcs	.+2      	; 0x32c <__vector_29+0x74>
     32a:	40 c0       	rjmp	.+128    	; 0x3ac <__vector_29+0xf4>
     32c:	80 91 00 01 	lds	r24, 0x0100
     330:	90 91 01 01 	lds	r25, 0x0101
     334:	97 01       	movw	r18, r14
     336:	28 1b       	sub	r18, r24
     338:	39 0b       	sbc	r19, r25
     33a:	2b 30       	cpi	r18, 0x0B	; 11
     33c:	31 05       	cpc	r19, r1
     33e:	b0 f1       	brcs	.+108    	; 0x3ac <__vector_29+0xf4>
			
			//got = snprintf(sbuf,sizeof(sbuf),"%04hu\n",seq_idx);

			//got = snprintf(sbuf,sizeof(sbuf),"%.3f\n",(tmp - 1 - 397)/56.0);		// "not implemented" that's lame...
			
			dtostrf(((double)seq_idx - 397)/56.0,2,2,sbuf);
     340:	60 91 1e 01 	lds	r22, 0x011E
     344:	70 91 1f 01 	lds	r23, 0x011F
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	e3 d7       	rcall	.+4038   	; 0x1314 <__floatunsisf>
     34e:	20 e0       	ldi	r18, 0x00	; 0
     350:	30 e8       	ldi	r19, 0x80	; 128
     352:	46 ec       	ldi	r20, 0xC6	; 198
     354:	53 e4       	ldi	r21, 0x43	; 67
     356:	11 d7       	rcall	.+3618   	; 0x117a <__subsf3>
     358:	20 e0       	ldi	r18, 0x00	; 0
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	40 e6       	ldi	r20, 0x60	; 96
     35e:	52 e4       	ldi	r21, 0x42	; 66
     360:	71 d7       	rcall	.+3810   	; 0x1244 <__divsf3>
     362:	8e 01       	movw	r16, r28
     364:	0f 5f       	subi	r16, 0xFF	; 255
     366:	1f 4f       	sbci	r17, 0xFF	; 255
     368:	22 e0       	ldi	r18, 0x02	; 2
     36a:	42 e0       	ldi	r20, 0x02	; 2
     36c:	0e 94 1e 0a 	call	0x143c	; 0x143c <dtostrf>
			sbuf[4] = 'm';
     370:	8d e6       	ldi	r24, 0x6D	; 109
     372:	8d 83       	std	Y+5, r24	; 0x05
			sbuf[5] = '\n';
     374:	8a e0       	ldi	r24, 0x0A	; 10
     376:	8e 83       	std	Y+6, r24	; 0x06
			got = 6;
			CDC_Device_SendData(&VirtualSerial_CDC_Interface,sbuf,got);
     378:	46 e0       	ldi	r20, 0x06	; 6
     37a:	50 e0       	ldi	r21, 0x00	; 0
     37c:	b8 01       	movw	r22, r16
     37e:	82 e0       	ldi	r24, 0x02	; 2
     380:	91 e0       	ldi	r25, 0x01	; 1
     382:	ec d5       	rcall	.+3032   	; 0xf5c <CDC_Device_SendData>

			// stop ADC, reset seq_idx, old_adc and timer
			clear(ADCSRA,ADEN);
     384:	80 91 7a 00 	lds	r24, 0x007A
     388:	8f 77       	andi	r24, 0x7F	; 127
     38a:	80 93 7a 00 	sts	0x007A, r24
			set(ADCSRA,ADIF);	// just in case...
     38e:	80 91 7a 00 	lds	r24, 0x007A
     392:	80 61       	ori	r24, 0x10	; 16
     394:	80 93 7a 00 	sts	0x007A, r24
			seq_idx = 0;
     398:	10 92 1f 01 	sts	0x011F, r1
     39c:	10 92 1e 01 	sts	0x011E, r1
			old_adc = UINT16_MAX;
     3a0:	8f ef       	ldi	r24, 0xFF	; 255
     3a2:	9f ef       	ldi	r25, 0xFF	; 255
     3a4:	90 93 01 01 	sts	0x0101, r25
     3a8:	80 93 00 01 	sts	0x0100, r24
		}
		
		old_adc = val;
     3ac:	f0 92 01 01 	sts	0x0101, r15
     3b0:	e0 92 00 01 	sts	0x0100, r14
		
		LED_amber_OFF;
     3b4:	28 9a       	sbi	0x05, 0	; 5
     3b6:	14 c0       	rjmp	.+40     	; 0x3e0 <__vector_29+0x128>
	}
	else
	{
		// async code is tricky business...
		clear(ADCSRA,ADEN);
     3b8:	80 91 7a 00 	lds	r24, 0x007A
     3bc:	8f 77       	andi	r24, 0x7F	; 127
     3be:	80 93 7a 00 	sts	0x007A, r24
		set(ADCSRA,ADIF);	// just in case...
     3c2:	80 91 7a 00 	lds	r24, 0x007A
     3c6:	80 61       	ori	r24, 0x10	; 16
     3c8:	80 93 7a 00 	sts	0x007A, r24
		seq_idx = 0;
     3cc:	10 92 1f 01 	sts	0x011F, r1
     3d0:	10 92 1e 01 	sts	0x011E, r1
		old_adc = UINT16_MAX;
     3d4:	8f ef       	ldi	r24, 0xFF	; 255
     3d6:	9f ef       	ldi	r25, 0xFF	; 255
     3d8:	90 93 01 01 	sts	0x0101, r25
     3dc:	80 93 00 01 	sts	0x0100, r24
		{
			got = snprintf(sbuf,sizeof(sbuf),"%04d,%03hu\n",i,S[i]);
			CDC_Device_SendData(&VirtualSerial_CDC_Interface,sbuf,got);
		}*/
	}
}
     3e0:	64 96       	adiw	r28, 0x14	; 20
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	f8 94       	cli
     3e6:	de bf       	out	0x3e, r29	; 62
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	cd bf       	out	0x3d, r28	; 61
     3ec:	df 91       	pop	r29
     3ee:	cf 91       	pop	r28
     3f0:	ff 91       	pop	r31
     3f2:	ef 91       	pop	r30
     3f4:	bf 91       	pop	r27
     3f6:	af 91       	pop	r26
     3f8:	9f 91       	pop	r25
     3fa:	8f 91       	pop	r24
     3fc:	7f 91       	pop	r23
     3fe:	6f 91       	pop	r22
     400:	5f 91       	pop	r21
     402:	4f 91       	pop	r20
     404:	3f 91       	pop	r19
     406:	2f 91       	pop	r18
     408:	1f 91       	pop	r17
     40a:	0f 91       	pop	r16
     40c:	ff 90       	pop	r15
     40e:	ef 90       	pop	r14
     410:	0f 90       	pop	r0
     412:	0f be       	out	0x3f, r0	; 63
     414:	0f 90       	pop	r0
     416:	1f 90       	pop	r1
     418:	18 95       	reti

0000041a <SetupHardware>:


void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     41a:	84 b7       	in	r24, 0x34	; 52
     41c:	87 7f       	andi	r24, 0xF7	; 247
     41e:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     420:	88 e1       	ldi	r24, 0x18	; 24
     422:	0f b6       	in	r0, 0x3f	; 63
     424:	f8 94       	cli
     426:	80 93 60 00 	sts	0x0060, r24
     42a:	10 92 60 00 	sts	0x0060, r1
     42e:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	80 e8       	ldi	r24, 0x80	; 128
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	f8 94       	cli
     438:	80 93 61 00 	sts	0x0061, r24
     43c:	90 93 61 00 	sts	0x0061, r25
     440:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	LED_amber_INIT;
     442:	20 9a       	sbi	0x04, 0	; 4
	LED_amber_OFF;
     444:	28 9a       	sbi	0x05, 0	; 5
	LED_green_INIT;
     446:	55 9a       	sbi	0x0a, 5	; 10
	LED_green_OFF;
     448:	5d 9a       	sbi	0x0b, 5	; 11
}

static void init_nRF24L01(void)
{
	// nRF24L01+ control pins
	set(DDRF,CE);
     44a:	86 9a       	sbi	0x10, 6	; 16
	set(DDRF,CSN);
     44c:	85 9a       	sbi	0x10, 5	; 16
	clear(DDRB,IRQ);							// now on PB6
     44e:	26 98       	cbi	0x04, 6	; 4
	clear(PORTF,CE);
     450:	8e 98       	cbi	0x11, 6	; 17
	set(PORTF,CSN);
     452:	8d 9a       	sbi	0x11, 5	; 17

	// SPI	might not need these
	DDRB |= 0b00000110;							// MOSI and SCK as output, PB6 as IRQ input
     454:	84 b1       	in	r24, 0x04	; 4
     456:	86 60       	ori	r24, 0x06	; 6
     458:	84 b9       	out	0x04, r24	; 4
	SPCR = _BV(SPE) | _BV(MSTR);				// Enable SPI as Master
     45a:	80 e5       	ldi	r24, 0x50	; 80
     45c:	8c bd       	out	0x2c, r24	; 44
	set(SPSR,SPI2X);							// awesome speed (fclk/2)
     45e:	8d b5       	in	r24, 0x2d	; 45
     460:	81 60       	ori	r24, 0x01	; 1
     462:	8d bd       	out	0x2d, r24	; 45

	write_register(CONFIG,0b00111110);			// POWER UP, 2-byte CRC, as PTX, mask TX_DS and MAX_RT
     464:	6e e3       	ldi	r22, 0x3E	; 62
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	0b df       	rcall	.-490    	; 0x280 <write_register>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     46a:	8f e1       	ldi	r24, 0x1F	; 31
     46c:	9e e4       	ldi	r25, 0x4E	; 78
     46e:	01 97       	sbiw	r24, 0x01	; 1
     470:	f1 f7       	brne	.-4      	; 0x46e <SetupHardware+0x54>
     472:	00 c0       	rjmp	.+0      	; 0x474 <SetupHardware+0x5a>
     474:	00 00       	nop
	_delay_ms(5);								// Tpd2stby, 4.5mS minimum for crystal
	write_register(EN_AA,0);					// disable auto retransmission
     476:	60 e0       	ldi	r22, 0x00	; 0
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	02 df       	rcall	.-508    	; 0x280 <write_register>
	write_register(SETUP_AW,0b00000001);		// 3-byte address field
     47c:	61 e0       	ldi	r22, 0x01	; 1
     47e:	83 e0       	ldi	r24, 0x03	; 3
     480:	ff de       	rcall	.-514    	; 0x280 <write_register>
	write_register(SETUP_RETR,0);				// 0 retry
     482:	60 e0       	ldi	r22, 0x00	; 0
     484:	84 e0       	ldi	r24, 0x04	; 4
     486:	fc de       	rcall	.-520    	; 0x280 <write_register>
	write_register(RF_CH,77);					// channel = 2400MHz + val MHz
     488:	6d e4       	ldi	r22, 0x4D	; 77
     48a:	85 e0       	ldi	r24, 0x05	; 5
     48c:	f9 de       	rcall	.-526    	; 0x280 <write_register>
	//write_register(RF_SETUP,0b00100110);		// air rate=250kbps, power=0dBm
	//write_register(RF_SETUP,0b00100000);		// air rate=250kbps, power=-18dBm
	//write_register(RF_SETUP,0b00000110);		// air rate=1Mbps, power=0dBm
	write_register(RF_SETUP,0b00001110);		// air rate=2Mbps, power=0dBm
     48e:	6e e0       	ldi	r22, 0x0E	; 14
     490:	86 e0       	ldi	r24, 0x06	; 6
     492:	f6 de       	rcall	.-532    	; 0x280 <write_register>
	write_register(RX_PW_P0,1);					// pipe0 payload length=1byte
     494:	61 e0       	ldi	r22, 0x01	; 1
     496:	81 e1       	ldi	r24, 0x11	; 17
     498:	f3 de       	rcall	.-538    	; 0x280 <write_register>
	write_register(FEATURE,EN_DYN_ACK);			// enable no ack
     49a:	60 e0       	ldi	r22, 0x00	; 0
     49c:	8d e1       	ldi	r24, 0x1D	; 29
     49e:	f0 de       	rcall	.-544    	; 0x280 <write_register>
	return tmp;
}

static inline void flush_rx(void)
{
	clear(PORTF,CSN);
     4a0:	8d 98       	cbi	0x11, 5	; 17
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4a2:	82 ee       	ldi	r24, 0xE2	; 226
     4a4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4a6:	0d b4       	in	r0, 0x2d	; 45
     4a8:	07 fe       	sbrs	r0, 7
     4aa:	fd cf       	rjmp	.-6      	; 0x4a6 <SetupHardware+0x8c>
				return SPDR;
     4ac:	8e b5       	in	r24, 0x2e	; 46
	SPI_TransferByte(FLUSH_RX);
	set(PORTF,CSN);
     4ae:	8d 9a       	sbi	0x11, 5	; 17
}

static inline void flush_tx(void)
{
	clear(PORTF,CSN);
     4b0:	8d 98       	cbi	0x11, 5	; 17
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4b2:	81 ee       	ldi	r24, 0xE1	; 225
     4b4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4b6:	0d b4       	in	r0, 0x2d	; 45
     4b8:	07 fe       	sbrs	r0, 7
     4ba:	fd cf       	rjmp	.-6      	; 0x4b6 <SetupHardware+0x9c>
				return SPDR;
     4bc:	8e b5       	in	r24, 0x2e	; 46
	SPI_TransferByte(FLUSH_TX);
	set(PORTF,CSN);
     4be:	8d 9a       	sbi	0x11, 5	; 17
	write_register(RF_SETUP,0b00001110);		// air rate=2Mbps, power=0dBm
	write_register(RX_PW_P0,1);					// pipe0 payload length=1byte
	write_register(FEATURE,EN_DYN_ACK);			// enable no ack
	flush_rx();
	flush_tx();
	write_register(STATUS,0b01110000);			// clear all interrupt flags
     4c0:	60 e7       	ldi	r22, 0x70	; 112
     4c2:	87 e0       	ldi	r24, 0x07	; 7
     4c4:	dd de       	rcall	.-582    	; 0x280 <write_register>
	
	init_nRF24L01();
	
	set(D9DDR,D9);
     4c6:	25 9a       	sbi	0x04, 5	; 4
	clear(D9PORT,D9);
     4c8:	2d 98       	cbi	0x05, 5	; 5
	
	USB_Init();
     4ca:	a6 c2       	rjmp	.+1356   	; 0xa18 <USB_Init>

000004cc <main>:
		}*/
	}
}

int main(void)
{
     4cc:	cf 93       	push	r28
     4ce:	df 93       	push	r29
     4d0:	1f 92       	push	r1
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
	SetupHardware();
     4d6:	a1 df       	rcall	.-190    	; 0x41a <SetupHardware>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     4d8:	78 94       	sei
	_delay_us(130);
}

static inline void nRF24_as_receiver(void)
{
	uint8_t config = read_register(CONFIG);
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	df de       	rcall	.-578    	; 0x29c <read_register>
	set(config,PRIM_RX);
     4de:	68 2f       	mov	r22, r24
     4e0:	61 60       	ori	r22, 0x01	; 1
	write_register(CONFIG,config);
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	cd de       	rcall	.-614    	; 0x280 <write_register>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4e6:	87 e0       	ldi	r24, 0x07	; 7
     4e8:	92 e0       	ldi	r25, 0x02	; 2
     4ea:	01 97       	sbiw	r24, 0x01	; 1
     4ec:	f1 f7       	brne	.-4      	; 0x4ea <main+0x1e>
     4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <main+0x24>
     4f0:	00 00       	nop
	_delay_us(130);
	set(PORTF,CE);
     4f2:	8e 9a       	sbi	0x11, 6	; 17
     4f4:	87 e0       	ldi	r24, 0x07	; 7
     4f6:	92 e0       	ldi	r25, 0x02	; 2
     4f8:	01 97       	sbiw	r24, 0x01	; 1
     4fa:	f1 f7       	brne	.-4      	; 0x4f8 <main+0x2c>
     4fc:	00 c0       	rjmp	.+0      	; 0x4fe <main+0x32>
     4fe:	00 00       	nop
	GlobalInterruptEnable();

	nRF24_as_receiver();
	
	clear(A0DDR,A0);
     500:	87 98       	cbi	0x10, 7	; 16
	clear_A0;
     502:	8f 98       	cbi	0x11, 7	; 17
	DIDR0 = 0b10000000;
     504:	80 e8       	ldi	r24, 0x80	; 128
     506:	80 93 7e 00 	sts	0x007E, r24
	ADMUX = 0b01000111;			// AVCC as reference, MUX=ADC7
     50a:	87 e4       	ldi	r24, 0x47	; 71
     50c:	80 93 7c 00 	sts	0x007C, r24
	clear(ADCSRA,ADEN);
     510:	80 91 7a 00 	lds	r24, 0x007A
     514:	8f 77       	andi	r24, 0x7F	; 127
     516:	80 93 7a 00 	sts	0x007A, r24
	set(ADCSRA,ADIE);
     51a:	80 91 7a 00 	lds	r24, 0x007A
     51e:	88 60       	ori	r24, 0x08	; 8
     520:	80 93 7a 00 	sts	0x007A, r24
	set(ADCSRA,ADATE);
     524:	80 91 7a 00 	lds	r24, 0x007A
     528:	80 62       	ori	r24, 0x20	; 32
     52a:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= 0b00000110;		// XTAL/64
     52e:	80 91 7a 00 	lds	r24, 0x007A
     532:	86 60       	ori	r24, 0x06	; 6
     534:	80 93 7a 00 	sts	0x007A, r24
	//ADCSRA |= 0b00000111;		// XTAL/128
	//ADCSRA += 2;				// XTAL/4
	set(ADCSRB,ADHSM);
     538:	80 91 7b 00 	lds	r24, 0x007B
     53c:	80 68       	ori	r24, 0x80	; 128
     53e:	80 93 7b 00 	sts	0x007B, r24
	sei();
     542:	78 94       	sei
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
     544:	81 e6       	ldi	r24, 0x61	; 97
     546:	f8 2e       	mov	r15, r24
     548:	ee 24       	eor	r14, r14
     54a:	ea 94       	dec	r14
			if (('a' == b) && (seq_idx <= 0))
			{
				LED_green_ON;
				
				// start ADC (free-running)
				old_adc = 65535;
     54c:	0f ef       	ldi	r16, 0xFF	; 255
     54e:	1f ef       	ldi	r17, 0xFF	; 255
	return bit_is_set(tmp,TX_FULL);
}

static inline uint8_t nRF24_RX_FIFO_EMPTY(void)
{
	uint8_t tmp = read_register(FIFO_STATUS);
     550:	87 e1       	ldi	r24, 0x17	; 23
     552:	a4 de       	rcall	.-696    	; 0x29c <read_register>
     554:	89 83       	std	Y+1, r24	; 0x01
	return bit_is_set(tmp,RX_EMPTY);
     556:	89 81       	ldd	r24, Y+1	; 0x01
	set(ADCSRB,ADHSM);
	sei();
	
	while (1)
	{
		if (!nRF24_RX_FIFO_EMPTY())
     558:	80 fd       	sbrc	r24, 0
     55a:	24 c0       	rjmp	.+72     	; 0x5a4 <main+0xd8>
}

static inline uint8_t nRF24_get_from_FIFO(void)
{
	uint8_t tmp = 0;
	clear(PORTF,CSN);
     55c:	8d 98       	cbi	0x11, 5	; 17
     55e:	fe bc       	out	0x2e, r15	; 46
				while (!(SPSR & (1 << SPIF)));
     560:	0d b4       	in	r0, 0x2d	; 45
     562:	07 fe       	sbrs	r0, 7
     564:	fd cf       	rjmp	.-6      	; 0x560 <main+0x94>
				return SPDR;
     566:	8e b5       	in	r24, 0x2e	; 46
			 *  \return Response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_TransferByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline uint8_t SPI_TransferByte(const uint8_t Byte)
			{
				SPDR = Byte;
     568:	ee bc       	out	0x2e, r14	; 46
				while (!(SPSR & (1 << SPIF)));
     56a:	0d b4       	in	r0, 0x2d	; 45
     56c:	07 fe       	sbrs	r0, 7
     56e:	fd cf       	rjmp	.-6      	; 0x56a <main+0x9e>
				return SPDR;
     570:	8e b5       	in	r24, 0x2e	; 46
	SPI_TransferByte(R_RX_PAYLOAD);
	tmp = SPI_TransferByte(NOP);
	set(PORTF,CSN);
     572:	8d 9a       	sbi	0x11, 5	; 17
		{
			int b = nRF24_get_from_FIFO();

			if (('a' == b) && (seq_idx <= 0))
     574:	81 36       	cpi	r24, 0x61	; 97
     576:	b1 f4       	brne	.+44     	; 0x5a4 <main+0xd8>
     578:	80 91 1e 01 	lds	r24, 0x011E
     57c:	90 91 1f 01 	lds	r25, 0x011F
     580:	89 2b       	or	r24, r25
     582:	81 f4       	brne	.+32     	; 0x5a4 <main+0xd8>
			{
				LED_green_ON;
     584:	5d 98       	cbi	0x0b, 5	; 11
				
				// start ADC (free-running)
				old_adc = 65535;
     586:	10 93 01 01 	sts	0x0101, r17
     58a:	00 93 00 01 	sts	0x0100, r16
				set(ADCSRA,ADEN);
     58e:	80 91 7a 00 	lds	r24, 0x007A
     592:	80 68       	ori	r24, 0x80	; 128
     594:	80 93 7a 00 	sts	0x007A, r24
				set(ADCSRA,ADSC);
     598:	80 91 7a 00 	lds	r24, 0x007A
     59c:	80 64       	ori	r24, 0x40	; 64
     59e:	80 93 7a 00 	sts	0x007A, r24
				//_delay_ms(1);
				LED_green_OFF;
     5a2:	5d 9a       	sbi	0x0b, 5	; 11
		}
		
		// - - - - -
		// LUFA CDC overhead
		// - - - - -
		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);		// MUST CALL THESE PERIODICALLY and FREQUENTLY! todo: how frequently?
     5a4:	82 e0       	ldi	r24, 0x02	; 2
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	23 d5       	rcall	.+2630   	; 0xff0 <CDC_Device_USBTask>
		USB_USBTask();
     5aa:	98 d4       	rcall	.+2352   	; 0xedc <USB_USBTask>
	}
     5ac:	d1 cf       	rjmp	.-94     	; 0x550 <main+0x84>

000005ae <EVENT_USB_Device_Connect>:
	USB_Init();
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
     5ae:	08 95       	ret

000005b0 <EVENT_USB_Device_Disconnect>:
	//
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
     5b0:	08 95       	ret

000005b2 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     5b2:	82 e0       	ldi	r24, 0x02	; 2
     5b4:	91 e0       	ldi	r25, 0x01	; 1
     5b6:	ad c4       	rjmp	.+2394   	; 0xf12 <CDC_Device_ConfigureEndpoints>

000005b8 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     5b8:	82 e0       	ldi	r24, 0x02	; 2
     5ba:	91 e0       	ldi	r25, 0x01	; 1
     5bc:	2f c5       	rjmp	.+2654   	; 0x101c <CDC_Device_ProcessControlRequest>

000005be <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     5be:	29 2f       	mov	r18, r25
     5c0:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     5c2:	22 30       	cpi	r18, 0x02	; 2
     5c4:	31 05       	cpc	r19, r1
     5c6:	59 f0       	breq	.+22     	; 0x5de <CALLBACK_USB_GetDescriptor+0x20>
     5c8:	23 30       	cpi	r18, 0x03	; 3
     5ca:	31 05       	cpc	r19, r1
     5cc:	69 f0       	breq	.+26     	; 0x5e8 <CALLBACK_USB_GetDescriptor+0x2a>
     5ce:	21 30       	cpi	r18, 0x01	; 1
     5d0:	31 05       	cpc	r19, r1
     5d2:	f9 f4       	brne	.+62     	; 0x612 <CALLBACK_USB_GetDescriptor+0x54>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     5d4:	82 e1       	ldi	r24, 0x12	; 18
     5d6:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     5d8:	2a e3       	ldi	r18, 0x3A	; 58
     5da:	31 e0       	ldi	r19, 0x01	; 1
     5dc:	1e c0       	rjmp	.+60     	; 0x61a <CALLBACK_USB_GetDescriptor+0x5c>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     5de:	8e e3       	ldi	r24, 0x3E	; 62
     5e0:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     5e2:	2c ef       	ldi	r18, 0xFC	; 252
     5e4:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     5e6:	19 c0       	rjmp	.+50     	; 0x61a <CALLBACK_USB_GetDescriptor+0x5c>
     5e8:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
     5ea:	81 30       	cpi	r24, 0x01	; 1
     5ec:	91 05       	cpc	r25, r1
     5ee:	41 f0       	breq	.+16     	; 0x600 <CALLBACK_USB_GetDescriptor+0x42>
     5f0:	82 30       	cpi	r24, 0x02	; 2
     5f2:	91 05       	cpc	r25, r1
     5f4:	41 f0       	breq	.+16     	; 0x606 <CALLBACK_USB_GetDescriptor+0x48>
     5f6:	89 2b       	or	r24, r25
     5f8:	61 f4       	brne	.+24     	; 0x612 <CALLBACK_USB_GetDescriptor+0x54>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     5fa:	e8 ef       	ldi	r30, 0xF8	; 248
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	05 c0       	rjmp	.+10     	; 0x60a <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     600:	ee ed       	ldi	r30, 0xDE	; 222
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	02 c0       	rjmp	.+4      	; 0x60a <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     606:	e0 ec       	ldi	r30, 0xC0	; 192
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	84 91       	lpm	r24, Z
     60c:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     60e:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     610:	04 c0       	rjmp	.+8      	; 0x61a <CALLBACK_USB_GetDescriptor+0x5c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     616:	20 e0       	ldi	r18, 0x00	; 0
     618:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     61a:	fa 01       	movw	r30, r20
     61c:	31 83       	std	Z+1, r19	; 0x01
     61e:	20 83       	st	Z, r18
	return Size;
}
     620:	08 95       	ret

00000622 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     622:	cf 92       	push	r12
     624:	df 92       	push	r13
     626:	ef 92       	push	r14
     628:	ff 92       	push	r15
     62a:	0f 93       	push	r16
     62c:	1f 93       	push	r17
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	7c 01       	movw	r14, r24
     634:	8b 01       	movw	r16, r22
     636:	ea 01       	movw	r28, r20
     638:	81 d1       	rcall	.+770    	; 0x93c <Endpoint_WaitUntilReady>
     63a:	81 11       	cpse	r24, r1
     63c:	30 c0       	rjmp	.+96     	; 0x69e <Endpoint_Write_Stream_LE+0x7c>
     63e:	20 97       	sbiw	r28, 0x00	; 0
     640:	31 f0       	breq	.+12     	; 0x64e <Endpoint_Write_Stream_LE+0x2c>
     642:	88 81       	ld	r24, Y
     644:	99 81       	ldd	r25, Y+1	; 0x01
     646:	08 1b       	sub	r16, r24
     648:	19 0b       	sbc	r17, r25
     64a:	e8 0e       	add	r14, r24
     64c:	f9 1e       	adc	r15, r25
     64e:	c1 2c       	mov	r12, r1
     650:	d1 2c       	mov	r13, r1
     652:	01 15       	cp	r16, r1
     654:	11 05       	cpc	r17, r1
     656:	11 f1       	breq	.+68     	; 0x69c <Endpoint_Write_Stream_LE+0x7a>
     658:	80 91 e8 00 	lds	r24, 0x00E8
     65c:	85 fd       	sbrc	r24, 5
     65e:	13 c0       	rjmp	.+38     	; 0x686 <Endpoint_Write_Stream_LE+0x64>
     660:	80 91 e8 00 	lds	r24, 0x00E8
     664:	8e 77       	andi	r24, 0x7E	; 126
     666:	80 93 e8 00 	sts	0x00E8, r24
     66a:	20 97       	sbiw	r28, 0x00	; 0
     66c:	41 f0       	breq	.+16     	; 0x67e <Endpoint_Write_Stream_LE+0x5c>
     66e:	88 81       	ld	r24, Y
     670:	99 81       	ldd	r25, Y+1	; 0x01
     672:	8c 0d       	add	r24, r12
     674:	9d 1d       	adc	r25, r13
     676:	99 83       	std	Y+1, r25	; 0x01
     678:	88 83       	st	Y, r24
     67a:	85 e0       	ldi	r24, 0x05	; 5
     67c:	10 c0       	rjmp	.+32     	; 0x69e <Endpoint_Write_Stream_LE+0x7c>
     67e:	5e d1       	rcall	.+700    	; 0x93c <Endpoint_WaitUntilReady>
     680:	88 23       	and	r24, r24
     682:	39 f3       	breq	.-50     	; 0x652 <Endpoint_Write_Stream_LE+0x30>
     684:	0c c0       	rjmp	.+24     	; 0x69e <Endpoint_Write_Stream_LE+0x7c>
     686:	f7 01       	movw	r30, r14
     688:	81 91       	ld	r24, Z+
     68a:	7f 01       	movw	r14, r30
     68c:	80 93 f1 00 	sts	0x00F1, r24
     690:	01 50       	subi	r16, 0x01	; 1
     692:	11 09       	sbc	r17, r1
     694:	ff ef       	ldi	r31, 0xFF	; 255
     696:	cf 1a       	sub	r12, r31
     698:	df 0a       	sbc	r13, r31
     69a:	db cf       	rjmp	.-74     	; 0x652 <Endpoint_Write_Stream_LE+0x30>
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	1f 91       	pop	r17
     6a4:	0f 91       	pop	r16
     6a6:	ff 90       	pop	r15
     6a8:	ef 90       	pop	r14
     6aa:	df 90       	pop	r13
     6ac:	cf 90       	pop	r12
     6ae:	08 95       	ret

000006b0 <Endpoint_Write_Control_Stream_LE>:
     6b0:	20 91 2a 01 	lds	r18, 0x012A
     6b4:	30 91 2b 01 	lds	r19, 0x012B
     6b8:	26 17       	cp	r18, r22
     6ba:	37 07       	cpc	r19, r23
     6bc:	48 f0       	brcs	.+18     	; 0x6d0 <Endpoint_Write_Control_Stream_LE+0x20>
     6be:	61 15       	cp	r22, r1
     6c0:	71 05       	cpc	r23, r1
     6c2:	39 f4       	brne	.+14     	; 0x6d2 <Endpoint_Write_Control_Stream_LE+0x22>
     6c4:	20 91 e8 00 	lds	r18, 0x00E8
     6c8:	2e 77       	andi	r18, 0x7E	; 126
     6ca:	20 93 e8 00 	sts	0x00E8, r18
     6ce:	01 c0       	rjmp	.+2      	; 0x6d2 <Endpoint_Write_Control_Stream_LE+0x22>
     6d0:	b9 01       	movw	r22, r18
     6d2:	fc 01       	movw	r30, r24
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	61 15       	cp	r22, r1
     6d8:	71 05       	cpc	r23, r1
     6da:	a1 f1       	breq	.+104    	; 0x744 <Endpoint_Write_Control_Stream_LE+0x94>
     6dc:	8e b3       	in	r24, 0x1e	; 30
     6de:	88 23       	and	r24, r24
     6e0:	e1 f1       	breq	.+120    	; 0x75a <Endpoint_Write_Control_Stream_LE+0xaa>
     6e2:	85 30       	cpi	r24, 0x05	; 5
     6e4:	e1 f1       	breq	.+120    	; 0x75e <Endpoint_Write_Control_Stream_LE+0xae>
     6e6:	80 91 e8 00 	lds	r24, 0x00E8
     6ea:	83 fd       	sbrc	r24, 3
     6ec:	34 c0       	rjmp	.+104    	; 0x756 <Endpoint_Write_Control_Stream_LE+0xa6>
     6ee:	80 91 e8 00 	lds	r24, 0x00E8
     6f2:	82 ff       	sbrs	r24, 2
     6f4:	06 c0       	rjmp	.+12     	; 0x702 <Endpoint_Write_Control_Stream_LE+0x52>
     6f6:	80 91 e8 00 	lds	r24, 0x00E8
     6fa:	82 ff       	sbrs	r24, 2
     6fc:	26 c0       	rjmp	.+76     	; 0x74a <Endpoint_Write_Control_Stream_LE+0x9a>
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	08 95       	ret
     702:	80 91 e8 00 	lds	r24, 0x00E8
     706:	80 ff       	sbrs	r24, 0
     708:	e6 cf       	rjmp	.-52     	; 0x6d6 <Endpoint_Write_Control_Stream_LE+0x26>
     70a:	20 91 f3 00 	lds	r18, 0x00F3
     70e:	80 91 f2 00 	lds	r24, 0x00F2
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	92 2b       	or	r25, r18
     716:	61 15       	cp	r22, r1
     718:	71 05       	cpc	r23, r1
     71a:	51 f0       	breq	.+20     	; 0x730 <Endpoint_Write_Control_Stream_LE+0x80>
     71c:	88 30       	cpi	r24, 0x08	; 8
     71e:	91 05       	cpc	r25, r1
     720:	38 f4       	brcc	.+14     	; 0x730 <Endpoint_Write_Control_Stream_LE+0x80>
     722:	21 91       	ld	r18, Z+
     724:	20 93 f1 00 	sts	0x00F1, r18
     728:	61 50       	subi	r22, 0x01	; 1
     72a:	71 09       	sbc	r23, r1
     72c:	01 96       	adiw	r24, 0x01	; 1
     72e:	f3 cf       	rjmp	.-26     	; 0x716 <Endpoint_Write_Control_Stream_LE+0x66>
     730:	21 e0       	ldi	r18, 0x01	; 1
     732:	08 97       	sbiw	r24, 0x08	; 8
     734:	09 f0       	breq	.+2      	; 0x738 <Endpoint_Write_Control_Stream_LE+0x88>
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	80 91 e8 00 	lds	r24, 0x00E8
     73c:	8e 77       	andi	r24, 0x7E	; 126
     73e:	80 93 e8 00 	sts	0x00E8, r24
     742:	c9 cf       	rjmp	.-110    	; 0x6d6 <Endpoint_Write_Control_Stream_LE+0x26>
     744:	21 11       	cpse	r18, r1
     746:	ca cf       	rjmp	.-108    	; 0x6dc <Endpoint_Write_Control_Stream_LE+0x2c>
     748:	d6 cf       	rjmp	.-84     	; 0x6f6 <Endpoint_Write_Control_Stream_LE+0x46>
     74a:	8e b3       	in	r24, 0x1e	; 30
     74c:	88 23       	and	r24, r24
     74e:	29 f0       	breq	.+10     	; 0x75a <Endpoint_Write_Control_Stream_LE+0xaa>
     750:	85 30       	cpi	r24, 0x05	; 5
     752:	89 f6       	brne	.-94     	; 0x6f6 <Endpoint_Write_Control_Stream_LE+0x46>
     754:	04 c0       	rjmp	.+8      	; 0x75e <Endpoint_Write_Control_Stream_LE+0xae>
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	08 95       	ret
     75a:	82 e0       	ldi	r24, 0x02	; 2
     75c:	08 95       	ret
     75e:	83 e0       	ldi	r24, 0x03	; 3
     760:	08 95       	ret

00000762 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     762:	20 91 2a 01 	lds	r18, 0x012A
     766:	30 91 2b 01 	lds	r19, 0x012B
     76a:	26 17       	cp	r18, r22
     76c:	37 07       	cpc	r19, r23
     76e:	48 f0       	brcs	.+18     	; 0x782 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     770:	61 15       	cp	r22, r1
     772:	71 05       	cpc	r23, r1
     774:	39 f4       	brne	.+14     	; 0x784 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     776:	20 91 e8 00 	lds	r18, 0x00E8
     77a:	2e 77       	andi	r18, 0x7E	; 126
     77c:	20 93 e8 00 	sts	0x00E8, r18
     780:	01 c0       	rjmp	.+2      	; 0x784 <Endpoint_Write_Control_PStream_LE+0x22>
     782:	b9 01       	movw	r22, r18
     784:	fc 01       	movw	r30, r24
     786:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     788:	61 15       	cp	r22, r1
     78a:	71 05       	cpc	r23, r1
     78c:	b9 f1       	breq	.+110    	; 0x7fc <Endpoint_Write_Control_PStream_LE+0x9a>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     78e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     790:	88 23       	and	r24, r24
     792:	09 f4       	brne	.+2      	; 0x796 <Endpoint_Write_Control_PStream_LE+0x34>
     794:	3e c0       	rjmp	.+124    	; 0x812 <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     796:	85 30       	cpi	r24, 0x05	; 5
     798:	09 f4       	brne	.+2      	; 0x79c <Endpoint_Write_Control_PStream_LE+0x3a>
     79a:	3d c0       	rjmp	.+122    	; 0x816 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     79c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     7a0:	83 fd       	sbrc	r24, 3
     7a2:	35 c0       	rjmp	.+106    	; 0x80e <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7a4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     7a8:	82 ff       	sbrs	r24, 2
     7aa:	06 c0       	rjmp	.+12     	; 0x7b8 <Endpoint_Write_Control_PStream_LE+0x56>
     7ac:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     7b0:	82 ff       	sbrs	r24, 2
     7b2:	27 c0       	rjmp	.+78     	; 0x802 <Endpoint_Write_Control_PStream_LE+0xa0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7b8:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
     7bc:	80 ff       	sbrs	r24, 0
     7be:	e4 cf       	rjmp	.-56     	; 0x788 <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     7c0:	20 91 f3 00 	lds	r18, 0x00F3
     7c4:	80 91 f2 00 	lds	r24, 0x00F2
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     7cc:	61 15       	cp	r22, r1
     7ce:	71 05       	cpc	r23, r1
     7d0:	59 f0       	breq	.+22     	; 0x7e8 <Endpoint_Write_Control_PStream_LE+0x86>
     7d2:	88 30       	cpi	r24, 0x08	; 8
     7d4:	91 05       	cpc	r25, r1
     7d6:	40 f4       	brcc	.+16     	; 0x7e8 <Endpoint_Write_Control_PStream_LE+0x86>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     7d8:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     7da:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     7de:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     7e0:	61 50       	subi	r22, 0x01	; 1
     7e2:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     7e4:	01 96       	adiw	r24, 0x01	; 1
     7e6:	f2 cf       	rjmp	.-28     	; 0x7cc <Endpoint_Write_Control_PStream_LE+0x6a>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     7e8:	21 e0       	ldi	r18, 0x01	; 1
     7ea:	08 97       	sbiw	r24, 0x08	; 8
     7ec:	09 f0       	breq	.+2      	; 0x7f0 <Endpoint_Write_Control_PStream_LE+0x8e>
     7ee:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7f0:	80 91 e8 00 	lds	r24, 0x00E8
     7f4:	8e 77       	andi	r24, 0x7E	; 126
     7f6:	80 93 e8 00 	sts	0x00E8, r24
     7fa:	c6 cf       	rjmp	.-116    	; 0x788 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     7fc:	21 11       	cpse	r18, r1
     7fe:	c7 cf       	rjmp	.-114    	; 0x78e <Endpoint_Write_Control_PStream_LE+0x2c>
     800:	d5 cf       	rjmp	.-86     	; 0x7ac <Endpoint_Write_Control_PStream_LE+0x4a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     802:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     804:	88 23       	and	r24, r24
     806:	29 f0       	breq	.+10     	; 0x812 <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     808:	85 30       	cpi	r24, 0x05	; 5
     80a:	81 f6       	brne	.-96     	; 0x7ac <Endpoint_Write_Control_PStream_LE+0x4a>
     80c:	04 c0       	rjmp	.+8      	; 0x816 <Endpoint_Write_Control_PStream_LE+0xb4>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     812:	82 e0       	ldi	r24, 0x02	; 2
     814:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     816:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     818:	08 95       	ret

0000081a <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     81a:	98 2f       	mov	r25, r24
     81c:	97 30       	cpi	r25, 0x07	; 7
     81e:	58 f5       	brcc	.+86     	; 0x876 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     820:	90 93 e9 00 	sts	0x00E9, r25
     824:	98 17       	cp	r25, r24
     826:	39 f0       	breq	.+14     	; 0x836 <Endpoint_ConfigureEndpoint_Prv+0x1c>
     828:	70 91 ec 00 	lds	r23, 0x00EC
     82c:	20 91 ed 00 	lds	r18, 0x00ED
     830:	50 91 f0 00 	lds	r21, 0x00F0
     834:	03 c0       	rjmp	.+6      	; 0x83c <Endpoint_ConfigureEndpoint_Prv+0x22>
     836:	24 2f       	mov	r18, r20
     838:	76 2f       	mov	r23, r22
     83a:	50 e0       	ldi	r21, 0x00	; 0
     83c:	21 ff       	sbrs	r18, 1
     83e:	19 c0       	rjmp	.+50     	; 0x872 <Endpoint_ConfigureEndpoint_Prv+0x58>
     840:	30 91 eb 00 	lds	r19, 0x00EB
     844:	3e 7f       	andi	r19, 0xFE	; 254
     846:	30 93 eb 00 	sts	0x00EB, r19
     84a:	30 91 ed 00 	lds	r19, 0x00ED
     84e:	3d 7f       	andi	r19, 0xFD	; 253
     850:	30 93 ed 00 	sts	0x00ED, r19
     854:	30 91 eb 00 	lds	r19, 0x00EB
     858:	31 60       	ori	r19, 0x01	; 1
     85a:	30 93 eb 00 	sts	0x00EB, r19
     85e:	70 93 ec 00 	sts	0x00EC, r23
     862:	20 93 ed 00 	sts	0x00ED, r18
     866:	50 93 f0 00 	sts	0x00F0, r21
     86a:	20 91 ee 00 	lds	r18, 0x00EE
     86e:	27 ff       	sbrs	r18, 7
     870:	07 c0       	rjmp	.+14     	; 0x880 <Endpoint_ConfigureEndpoint_Prv+0x66>
     872:	9f 5f       	subi	r25, 0xFF	; 255
     874:	d3 cf       	rjmp	.-90     	; 0x81c <Endpoint_ConfigureEndpoint_Prv+0x2>
     876:	8f 70       	andi	r24, 0x0F	; 15
     878:	80 93 e9 00 	sts	0x00E9, r24
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	08 95       	ret
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	08 95       	ret

00000884 <Endpoint_ConfigureEndpointTable>:
     884:	0f 93       	push	r16
     886:	1f 93       	push	r17
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	06 2f       	mov	r16, r22
     88e:	ec 01       	movw	r28, r24
     890:	10 e0       	ldi	r17, 0x00	; 0
     892:	10 17       	cp	r17, r16
     894:	71 f1       	breq	.+92     	; 0x8f2 <Endpoint_ConfigureEndpointTable+0x6e>
     896:	98 81       	ld	r25, Y
     898:	99 23       	and	r25, r25
     89a:	41 f1       	breq	.+80     	; 0x8ec <Endpoint_ConfigureEndpointTable+0x68>
     89c:	2c 81       	ldd	r18, Y+4	; 0x04
     89e:	e9 81       	ldd	r30, Y+1	; 0x01
     8a0:	fa 81       	ldd	r31, Y+2	; 0x02
     8a2:	7b 81       	ldd	r23, Y+3	; 0x03
     8a4:	89 2f       	mov	r24, r25
     8a6:	8f 70       	andi	r24, 0x0F	; 15
     8a8:	87 30       	cpi	r24, 0x07	; 7
     8aa:	10 f0       	brcs	.+4      	; 0x8b0 <Endpoint_ConfigureEndpointTable+0x2c>
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	22 c0       	rjmp	.+68     	; 0x8f4 <Endpoint_ConfigureEndpointTable+0x70>
     8b0:	22 30       	cpi	r18, 0x02	; 2
     8b2:	10 f0       	brcs	.+4      	; 0x8b8 <Endpoint_ConfigureEndpointTable+0x34>
     8b4:	56 e0       	ldi	r21, 0x06	; 6
     8b6:	01 c0       	rjmp	.+2      	; 0x8ba <Endpoint_ConfigureEndpointTable+0x36>
     8b8:	52 e0       	ldi	r21, 0x02	; 2
     8ba:	28 e0       	ldi	r18, 0x08	; 8
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	40 e0       	ldi	r20, 0x00	; 0
     8c0:	2e 17       	cp	r18, r30
     8c2:	3f 07       	cpc	r19, r31
     8c4:	20 f4       	brcc	.+8      	; 0x8ce <Endpoint_ConfigureEndpointTable+0x4a>
     8c6:	4f 5f       	subi	r20, 0xFF	; 255
     8c8:	22 0f       	add	r18, r18
     8ca:	33 1f       	adc	r19, r19
     8cc:	f9 cf       	rjmp	.-14     	; 0x8c0 <Endpoint_ConfigureEndpointTable+0x3c>
     8ce:	42 95       	swap	r20
     8d0:	40 7f       	andi	r20, 0xF0	; 240
     8d2:	45 2b       	or	r20, r21
     8d4:	69 2f       	mov	r22, r25
     8d6:	66 1f       	adc	r22, r22
     8d8:	66 27       	eor	r22, r22
     8da:	66 1f       	adc	r22, r22
     8dc:	90 e4       	ldi	r25, 0x40	; 64
     8de:	79 9f       	mul	r23, r25
     8e0:	90 01       	movw	r18, r0
     8e2:	11 24       	eor	r1, r1
     8e4:	62 2b       	or	r22, r18
     8e6:	99 df       	rcall	.-206    	; 0x81a <Endpoint_ConfigureEndpoint_Prv>
     8e8:	88 23       	and	r24, r24
     8ea:	01 f3       	breq	.-64     	; 0x8ac <Endpoint_ConfigureEndpointTable+0x28>
     8ec:	1f 5f       	subi	r17, 0xFF	; 255
     8ee:	25 96       	adiw	r28, 0x05	; 5
     8f0:	d0 cf       	rjmp	.-96     	; 0x892 <Endpoint_ConfigureEndpointTable+0xe>
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	1f 91       	pop	r17
     8fa:	0f 91       	pop	r16
     8fc:	08 95       	ret

000008fe <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     8fe:	80 91 24 01 	lds	r24, 0x0124
     902:	87 fd       	sbrc	r24, 7
     904:	05 c0       	rjmp	.+10     	; 0x910 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     906:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     90a:	80 ff       	sbrs	r24, 0
     90c:	0d c0       	rjmp	.+26     	; 0x928 <Endpoint_ClearStatusStage+0x2a>
     90e:	10 c0       	rjmp	.+32     	; 0x930 <Endpoint_ClearStatusStage+0x32>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     910:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     914:	82 fd       	sbrc	r24, 2
     916:	04 c0       	rjmp	.+8      	; 0x920 <Endpoint_ClearStatusStage+0x22>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     918:	8e b3       	in	r24, 0x1e	; 30
     91a:	81 11       	cpse	r24, r1
     91c:	f9 cf       	rjmp	.-14     	; 0x910 <Endpoint_ClearStatusStage+0x12>
     91e:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     920:	80 91 e8 00 	lds	r24, 0x00E8
     924:	8b 77       	andi	r24, 0x7B	; 123
     926:	07 c0       	rjmp	.+14     	; 0x936 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     928:	8e b3       	in	r24, 0x1e	; 30
     92a:	81 11       	cpse	r24, r1
     92c:	ec cf       	rjmp	.-40     	; 0x906 <Endpoint_ClearStatusStage+0x8>
     92e:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     930:	80 91 e8 00 	lds	r24, 0x00E8
     934:	8e 77       	andi	r24, 0x7E	; 126
     936:	80 93 e8 00 	sts	0x00E8, r24
     93a:	08 95       	ret

0000093c <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     93c:	80 91 e4 00 	lds	r24, 0x00E4
     940:	90 91 e5 00 	lds	r25, 0x00E5
     944:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     946:	20 91 ec 00 	lds	r18, 0x00EC
     94a:	20 ff       	sbrs	r18, 0
     94c:	20 c0       	rjmp	.+64     	; 0x98e <Endpoint_WaitUntilReady+0x52>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     94e:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     952:	20 fd       	sbrc	r18, 0
     954:	20 c0       	rjmp	.+64     	; 0x996 <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     956:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     958:	22 23       	and	r18, r18
     95a:	89 f0       	breq	.+34     	; 0x97e <Endpoint_WaitUntilReady+0x42>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     95c:	25 30       	cpi	r18, 0x05	; 5
     95e:	89 f0       	breq	.+34     	; 0x982 <Endpoint_WaitUntilReady+0x46>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     960:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     964:	25 fd       	sbrc	r18, 5
     966:	0f c0       	rjmp	.+30     	; 0x986 <Endpoint_WaitUntilReady+0x4a>
     968:	20 91 e4 00 	lds	r18, 0x00E4
     96c:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     970:	28 17       	cp	r18, r24
     972:	39 07       	cpc	r19, r25
     974:	41 f3       	breq	.-48     	; 0x946 <Endpoint_WaitUntilReady+0xa>
     976:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     978:	41 f0       	breq	.+16     	; 0x98a <Endpoint_WaitUntilReady+0x4e>
     97a:	c9 01       	movw	r24, r18
     97c:	e4 cf       	rjmp	.-56     	; 0x946 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     97e:	82 e0       	ldi	r24, 0x02	; 2
     980:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     982:	83 e0       	ldi	r24, 0x03	; 3
     984:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     98a:	84 e0       	ldi	r24, 0x04	; 4
     98c:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     98e:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     992:	22 ff       	sbrs	r18, 2
     994:	e0 cf       	rjmp	.-64     	; 0x956 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	08 95       	ret

0000099a <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     99a:	0f 93       	push	r16
     99c:	1f 93       	push	r17
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     9a2:	4a d0       	rcall	.+148    	; 0xa38 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     9a4:	51 d0       	rcall	.+162    	; 0xa48 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     9a6:	c8 ed       	ldi	r28, 0xD8	; 216
     9a8:	d0 e0       	ldi	r29, 0x00	; 0
     9aa:	88 81       	ld	r24, Y
     9ac:	8f 77       	andi	r24, 0x7F	; 127
     9ae:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
     9b0:	88 81       	ld	r24, Y
     9b2:	80 68       	ori	r24, 0x80	; 128
     9b4:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     9b6:	88 81       	ld	r24, Y
     9b8:	8f 7d       	andi	r24, 0xDF	; 223
     9ba:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     9bc:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     9be:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
     9c0:	10 92 20 01 	sts	0x0120, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     9c4:	10 92 22 01 	sts	0x0122, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     9c8:	10 92 21 01 	sts	0x0121, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     9cc:	00 ee       	ldi	r16, 0xE0	; 224
     9ce:	10 e0       	ldi	r17, 0x00	; 0
     9d0:	f8 01       	movw	r30, r16
     9d2:	80 81       	ld	r24, Z
     9d4:	8b 7f       	andi	r24, 0xFB	; 251
     9d6:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     9d8:	88 81       	ld	r24, Y
     9da:	81 60       	ori	r24, 0x01	; 1
     9dc:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     9de:	42 e0       	ldi	r20, 0x02	; 2
     9e0:	60 e0       	ldi	r22, 0x00	; 0
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	1a df       	rcall	.-460    	; 0x81a <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     9e6:	e1 ee       	ldi	r30, 0xE1	; 225
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
     9ea:	80 81       	ld	r24, Z
     9ec:	8e 7f       	andi	r24, 0xFE	; 254
     9ee:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     9f0:	e2 ee       	ldi	r30, 0xE2	; 226
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	81 60       	ori	r24, 0x01	; 1
     9f8:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     9fa:	80 81       	ld	r24, Z
     9fc:	88 60       	ori	r24, 0x08	; 8
     9fe:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     a00:	f8 01       	movw	r30, r16
     a02:	80 81       	ld	r24, Z
     a04:	8e 7f       	andi	r24, 0xFE	; 254
     a06:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     a08:	88 81       	ld	r24, Y
     a0a:	80 61       	ori	r24, 0x10	; 16
     a0c:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	1f 91       	pop	r17
     a14:	0f 91       	pop	r16
     a16:	08 95       	ret

00000a18 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     a18:	e8 ed       	ldi	r30, 0xD8	; 216
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	80 81       	ld	r24, Z
     a1e:	8f 7e       	andi	r24, 0xEF	; 239
     a20:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     a22:	e7 ed       	ldi	r30, 0xD7	; 215
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	80 81       	ld	r24, Z
     a28:	81 60       	ori	r24, 0x01	; 1
     a2a:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     a2c:	84 e0       	ldi	r24, 0x04	; 4
     a2e:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	80 93 23 01 	sts	0x0123, r24

	USB_ResetInterface();
     a36:	b1 cf       	rjmp	.-158    	; 0x99a <USB_ResetInterface>

00000a38 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     a38:	e8 ed       	ldi	r30, 0xD8	; 216
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	80 81       	ld	r24, Z
     a3e:	8e 7f       	andi	r24, 0xFE	; 254
     a40:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     a42:	10 92 e2 00 	sts	0x00E2, r1
     a46:	08 95       	ret

00000a48 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     a48:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     a4c:	10 92 e1 00 	sts	0x00E1, r1
     a50:	08 95       	ret

00000a52 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     a52:	1f 92       	push	r1
     a54:	0f 92       	push	r0
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	0f 92       	push	r0
     a5a:	11 24       	eor	r1, r1
     a5c:	2f 93       	push	r18
     a5e:	3f 93       	push	r19
     a60:	4f 93       	push	r20
     a62:	5f 93       	push	r21
     a64:	6f 93       	push	r22
     a66:	7f 93       	push	r23
     a68:	8f 93       	push	r24
     a6a:	9f 93       	push	r25
     a6c:	af 93       	push	r26
     a6e:	bf 93       	push	r27
     a70:	ef 93       	push	r30
     a72:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     a74:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     a78:	82 ff       	sbrs	r24, 2
     a7a:	0a c0       	rjmp	.+20     	; 0xa90 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     a7c:	80 91 e2 00 	lds	r24, 0x00E2
     a80:	82 ff       	sbrs	r24, 2
     a82:	06 c0       	rjmp	.+12     	; 0xa90 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     a84:	80 91 e1 00 	lds	r24, 0x00E1
     a88:	8b 7f       	andi	r24, 0xFB	; 251
     a8a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     a8e:	25 d2       	rcall	.+1098   	; 0xeda <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     a90:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     a94:	80 ff       	sbrs	r24, 0
     a96:	1b c0       	rjmp	.+54     	; 0xace <__vector_10+0x7c>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     a98:	80 91 d8 00 	lds	r24, 0x00D8
     a9c:	80 ff       	sbrs	r24, 0
     a9e:	17 c0       	rjmp	.+46     	; 0xace <__vector_10+0x7c>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     aa0:	80 91 da 00 	lds	r24, 0x00DA
     aa4:	8e 7f       	andi	r24, 0xFE	; 254
     aa6:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     aaa:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     aae:	80 ff       	sbrs	r24, 0
     ab0:	0b c0       	rjmp	.+22     	; 0xac8 <__vector_10+0x76>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     ab2:	80 e1       	ldi	r24, 0x10	; 16
     ab4:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     ab6:	82 e1       	ldi	r24, 0x12	; 18
     ab8:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     aba:	09 b4       	in	r0, 0x29	; 41
     abc:	00 fe       	sbrs	r0, 0
     abe:	fd cf       	rjmp	.-6      	; 0xaba <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
     ac4:	74 dd       	rcall	.-1304   	; 0x5ae <EVENT_USB_Device_Connect>
     ac6:	03 c0       	rjmp	.+6      	; 0xace <__vector_10+0x7c>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     ac8:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     aca:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
     acc:	71 dd       	rcall	.-1310   	; 0x5b0 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     ace:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     ad2:	80 ff       	sbrs	r24, 0
     ad4:	17 c0       	rjmp	.+46     	; 0xb04 <__stack+0x5>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     ad6:	80 91 e2 00 	lds	r24, 0x00E2
     ada:	80 ff       	sbrs	r24, 0
     adc:	13 c0       	rjmp	.+38     	; 0xb04 <__stack+0x5>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     ade:	80 91 e2 00 	lds	r24, 0x00E2
     ae2:	8e 7f       	andi	r24, 0xFE	; 254
     ae4:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     ae8:	80 91 e2 00 	lds	r24, 0x00E2
     aec:	80 61       	ori	r24, 0x10	; 16
     aee:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     af2:	80 91 d8 00 	lds	r24, 0x00D8
     af6:	80 62       	ori	r24, 0x20	; 32
     af8:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     afc:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     afe:	85 e0       	ldi	r24, 0x05	; 5
     b00:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
     b02:	eb d1       	rcall	.+982    	; 0xeda <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     b04:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     b08:	84 ff       	sbrs	r24, 4
     b0a:	2e c0       	rjmp	.+92     	; 0xb68 <__stack+0x69>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     b0c:	80 91 e2 00 	lds	r24, 0x00E2
     b10:	84 ff       	sbrs	r24, 4
     b12:	2a c0       	rjmp	.+84     	; 0xb68 <__stack+0x69>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     b14:	80 e1       	ldi	r24, 0x10	; 16
     b16:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     b18:	82 e1       	ldi	r24, 0x12	; 18
     b1a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     b1c:	09 b4       	in	r0, 0x29	; 41
     b1e:	00 fe       	sbrs	r0, 0
     b20:	fd cf       	rjmp	.-6      	; 0xb1c <__stack+0x1d>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     b22:	80 91 d8 00 	lds	r24, 0x00D8
     b26:	8f 7d       	andi	r24, 0xDF	; 223
     b28:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     b2c:	80 91 e1 00 	lds	r24, 0x00E1
     b30:	8f 7e       	andi	r24, 0xEF	; 239
     b32:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     b36:	80 91 e2 00 	lds	r24, 0x00E2
     b3a:	8f 7e       	andi	r24, 0xEF	; 239
     b3c:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     b40:	80 91 e2 00 	lds	r24, 0x00E2
     b44:	81 60       	ori	r24, 0x01	; 1
     b46:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     b4a:	80 91 20 01 	lds	r24, 0x0120
     b4e:	88 23       	and	r24, r24
     b50:	11 f0       	breq	.+4      	; 0xb56 <__stack+0x57>
		  USB_DeviceState = DEVICE_STATE_Configured;
     b52:	84 e0       	ldi	r24, 0x04	; 4
     b54:	07 c0       	rjmp	.+14     	; 0xb64 <__stack+0x65>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     b56:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     b5a:	87 ff       	sbrs	r24, 7
     b5c:	02 c0       	rjmp	.+4      	; 0xb62 <__stack+0x63>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	01 c0       	rjmp	.+2      	; 0xb64 <__stack+0x65>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     b66:	b9 d1       	rcall	.+882    	; 0xeda <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     b68:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     b6c:	83 ff       	sbrs	r24, 3
     b6e:	26 c0       	rjmp	.+76     	; 0xbbc <__stack+0xbd>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     b70:	80 91 e2 00 	lds	r24, 0x00E2
     b74:	83 ff       	sbrs	r24, 3
     b76:	22 c0       	rjmp	.+68     	; 0xbbc <__stack+0xbd>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     b78:	80 91 e1 00 	lds	r24, 0x00E1
     b7c:	87 7f       	andi	r24, 0xF7	; 247
     b7e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
     b86:	10 92 20 01 	sts	0x0120, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     b8a:	80 91 e1 00 	lds	r24, 0x00E1
     b8e:	8e 7f       	andi	r24, 0xFE	; 254
     b90:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     b94:	80 91 e2 00 	lds	r24, 0x00E2
     b98:	8e 7f       	andi	r24, 0xFE	; 254
     b9a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     b9e:	80 91 e2 00 	lds	r24, 0x00E2
     ba2:	80 61       	ori	r24, 0x10	; 16
     ba4:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     ba8:	42 e0       	ldi	r20, 0x02	; 2
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	35 de       	rcall	.-918    	; 0x81a <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     bb0:	80 91 f0 00 	lds	r24, 0x00F0
     bb4:	88 60       	ori	r24, 0x08	; 8
     bb6:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     bba:	8f d1       	rcall	.+798    	; 0xeda <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     bbc:	ff 91       	pop	r31
     bbe:	ef 91       	pop	r30
     bc0:	bf 91       	pop	r27
     bc2:	af 91       	pop	r26
     bc4:	9f 91       	pop	r25
     bc6:	8f 91       	pop	r24
     bc8:	7f 91       	pop	r23
     bca:	6f 91       	pop	r22
     bcc:	5f 91       	pop	r21
     bce:	4f 91       	pop	r20
     bd0:	3f 91       	pop	r19
     bd2:	2f 91       	pop	r18
     bd4:	0f 90       	pop	r0
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	0f 90       	pop	r0
     bda:	1f 90       	pop	r1
     bdc:	18 95       	reti

00000bde <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     bde:	1f 92       	push	r1
     be0:	0f 92       	push	r0
     be2:	0f b6       	in	r0, 0x3f	; 63
     be4:	0f 92       	push	r0
     be6:	11 24       	eor	r1, r1
     be8:	2f 93       	push	r18
     bea:	3f 93       	push	r19
     bec:	4f 93       	push	r20
     bee:	5f 93       	push	r21
     bf0:	6f 93       	push	r22
     bf2:	7f 93       	push	r23
     bf4:	8f 93       	push	r24
     bf6:	9f 93       	push	r25
     bf8:	af 93       	push	r26
     bfa:	bf 93       	push	r27
     bfc:	cf 93       	push	r28
     bfe:	ef 93       	push	r30
     c00:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     c02:	c0 91 e9 00 	lds	r28, 0x00E9
     c06:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     c08:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c0c:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     c10:	80 91 f0 00 	lds	r24, 0x00F0
     c14:	87 7f       	andi	r24, 0xF7	; 247
     c16:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     c1a:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     c1c:	1b d0       	rcall	.+54     	; 0xc54 <USB_Device_ProcessControlRequest>
     c1e:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     c22:	80 91 f0 00 	lds	r24, 0x00F0
     c26:	88 60       	ori	r24, 0x08	; 8
     c28:	80 93 f0 00 	sts	0x00F0, r24
     c2c:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     c30:	ff 91       	pop	r31
     c32:	ef 91       	pop	r30
     c34:	cf 91       	pop	r28
     c36:	bf 91       	pop	r27
     c38:	af 91       	pop	r26
     c3a:	9f 91       	pop	r25
     c3c:	8f 91       	pop	r24
     c3e:	7f 91       	pop	r23
     c40:	6f 91       	pop	r22
     c42:	5f 91       	pop	r21
     c44:	4f 91       	pop	r20
     c46:	3f 91       	pop	r19
     c48:	2f 91       	pop	r18
     c4a:	0f 90       	pop	r0
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	0f 90       	pop	r0
     c50:	1f 90       	pop	r1
     c52:	18 95       	reti

00000c54 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     c54:	1f 93       	push	r17
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	aa 97       	sbiw	r28, 0x2a	; 42
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	f8 94       	cli
     c64:	de bf       	out	0x3e, r29	; 62
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	cd bf       	out	0x3d, r28	; 61
     c6a:	e4 e2       	ldi	r30, 0x24	; 36
     c6c:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     c6e:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     c72:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     c74:	21 e0       	ldi	r18, 0x01	; 1
     c76:	ec 32       	cpi	r30, 0x2C	; 44
     c78:	f2 07       	cpc	r31, r18
     c7a:	c9 f7       	brne	.-14     	; 0xc6e <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     c7c:	9d dc       	rcall	.-1734   	; 0x5b8 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c7e:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     c82:	83 ff       	sbrs	r24, 3
     c84:	12 c1       	rjmp	.+548    	; 0xeaa <USB_Device_ProcessControlRequest+0x256>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     c86:	20 91 24 01 	lds	r18, 0x0124

		switch (USB_ControlRequest.bRequest)
     c8a:	30 91 25 01 	lds	r19, 0x0125
     c8e:	83 2f       	mov	r24, r19
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	8a 30       	cpi	r24, 0x0A	; 10
     c94:	91 05       	cpc	r25, r1
     c96:	08 f0       	brcs	.+2      	; 0xc9a <USB_Device_ProcessControlRequest+0x46>
     c98:	08 c1       	rjmp	.+528    	; 0xeaa <USB_Device_ProcessControlRequest+0x256>
     c9a:	fc 01       	movw	r30, r24
     c9c:	ea 5a       	subi	r30, 0xAA	; 170
     c9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ca0:	c7 c3       	rjmp	.+1934   	; 0x1430 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ca2:	20 38       	cpi	r18, 0x80	; 128
     ca4:	81 f0       	breq	.+32     	; 0xcc6 <USB_Device_ProcessControlRequest+0x72>
     ca6:	22 38       	cpi	r18, 0x82	; 130
     ca8:	09 f0       	breq	.+2      	; 0xcac <USB_Device_ProcessControlRequest+0x58>
     caa:	ff c0       	rjmp	.+510    	; 0xeaa <USB_Device_ProcessControlRequest+0x256>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cac:	80 91 28 01 	lds	r24, 0x0128
     cb0:	8f 70       	andi	r24, 0x0F	; 15
     cb2:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     cb6:	80 91 eb 00 	lds	r24, 0x00EB
     cba:	85 fb       	bst	r24, 5
     cbc:	88 27       	eor	r24, r24
     cbe:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cc0:	10 92 e9 00 	sts	0x00E9, r1
     cc4:	06 c0       	rjmp	.+12     	; 0xcd2 <USB_Device_ProcessControlRequest+0x7e>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     cc6:	80 91 21 01 	lds	r24, 0x0121
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     cca:	90 91 22 01 	lds	r25, 0x0122
     cce:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     cd0:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cd2:	90 91 e8 00 	lds	r25, 0x00E8
     cd6:	97 7f       	andi	r25, 0xF7	; 247
     cd8:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     cdc:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     ce0:	10 92 f1 00 	sts	0x00F1, r1
     ce4:	c0 c0       	rjmp	.+384    	; 0xe66 <USB_Device_ProcessControlRequest+0x212>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ce6:	82 2f       	mov	r24, r18
     ce8:	8d 7f       	andi	r24, 0xFD	; 253
     cea:	09 f0       	breq	.+2      	; 0xcee <USB_Device_ProcessControlRequest+0x9a>
     cec:	de c0       	rjmp	.+444    	; 0xeaa <USB_Device_ProcessControlRequest+0x256>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     cee:	22 23       	and	r18, r18
     cf0:	19 f0       	breq	.+6      	; 0xcf8 <USB_Device_ProcessControlRequest+0xa4>
     cf2:	22 30       	cpi	r18, 0x02	; 2
     cf4:	61 f0       	breq	.+24     	; 0xd0e <USB_Device_ProcessControlRequest+0xba>
     cf6:	d9 c0       	rjmp	.+434    	; 0xeaa <USB_Device_ProcessControlRequest+0x256>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     cf8:	80 91 26 01 	lds	r24, 0x0126
     cfc:	81 30       	cpi	r24, 0x01	; 1
     cfe:	09 f0       	breq	.+2      	; 0xd02 <USB_Device_ProcessControlRequest+0xae>
     d00:	d4 c0       	rjmp	.+424    	; 0xeaa <USB_Device_ProcessControlRequest+0x256>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     d02:	33 30       	cpi	r19, 0x03	; 3
     d04:	09 f0       	breq	.+2      	; 0xd08 <USB_Device_ProcessControlRequest+0xb4>
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	80 93 22 01 	sts	0x0122, r24
     d0c:	28 c0       	rjmp	.+80     	; 0xd5e <USB_Device_ProcessControlRequest+0x10a>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     d0e:	80 91 26 01 	lds	r24, 0x0126
     d12:	81 11       	cpse	r24, r1
     d14:	24 c0       	rjmp	.+72     	; 0xd5e <USB_Device_ProcessControlRequest+0x10a>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     d16:	20 91 28 01 	lds	r18, 0x0128
     d1a:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     d1c:	09 f4       	brne	.+2      	; 0xd20 <USB_Device_ProcessControlRequest+0xcc>
     d1e:	c5 c0       	rjmp	.+394    	; 0xeaa <USB_Device_ProcessControlRequest+0x256>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d20:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     d24:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     d28:	80 ff       	sbrs	r24, 0
     d2a:	19 c0       	rjmp	.+50     	; 0xd5e <USB_Device_ProcessControlRequest+0x10a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     d2c:	80 91 eb 00 	lds	r24, 0x00EB
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     d30:	33 30       	cpi	r19, 0x03	; 3
     d32:	11 f4       	brne	.+4      	; 0xd38 <USB_Device_ProcessControlRequest+0xe4>
     d34:	80 62       	ori	r24, 0x20	; 32
     d36:	11 c0       	rjmp	.+34     	; 0xd5a <USB_Device_ProcessControlRequest+0x106>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     d38:	80 61       	ori	r24, 0x10	; 16
     d3a:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	02 2e       	mov	r0, r18
     d44:	01 c0       	rjmp	.+2      	; 0xd48 <USB_Device_ProcessControlRequest+0xf4>
     d46:	88 0f       	add	r24, r24
     d48:	0a 94       	dec	r0
     d4a:	ea f7       	brpl	.-6      	; 0xd46 <USB_Device_ProcessControlRequest+0xf2>
     d4c:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     d50:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     d54:	80 91 eb 00 	lds	r24, 0x00EB
     d58:	88 60       	ori	r24, 0x08	; 8
     d5a:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d5e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d62:	80 91 e8 00 	lds	r24, 0x00E8
     d66:	87 7f       	andi	r24, 0xF7	; 247
     d68:	81 c0       	rjmp	.+258    	; 0xe6c <USB_Device_ProcessControlRequest+0x218>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     d6a:	21 11       	cpse	r18, r1
     d6c:	9e c0       	rjmp	.+316    	; 0xeaa <USB_Device_ProcessControlRequest+0x256>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     d6e:	10 91 26 01 	lds	r17, 0x0126
     d72:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     d74:	80 91 e3 00 	lds	r24, 0x00E3
     d78:	80 78       	andi	r24, 0x80	; 128
     d7a:	81 2b       	or	r24, r17
     d7c:	80 93 e3 00 	sts	0x00E3, r24
     d80:	80 91 e8 00 	lds	r24, 0x00E8
     d84:	87 7f       	andi	r24, 0xF7	; 247
     d86:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     d8a:	b9 dd       	rcall	.-1166   	; 0x8fe <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d8c:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     d90:	80 ff       	sbrs	r24, 0
     d92:	fc cf       	rjmp	.-8      	; 0xd8c <USB_Device_ProcessControlRequest+0x138>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     d94:	80 91 e3 00 	lds	r24, 0x00E3
     d98:	80 68       	ori	r24, 0x80	; 128
     d9a:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     d9e:	11 23       	and	r17, r17
     da0:	11 f0       	breq	.+4      	; 0xda6 <USB_Device_ProcessControlRequest+0x152>
     da2:	83 e0       	ldi	r24, 0x03	; 3
     da4:	01 c0       	rjmp	.+2      	; 0xda8 <USB_Device_ProcessControlRequest+0x154>
     da6:	82 e0       	ldi	r24, 0x02	; 2
     da8:	8e bb       	out	0x1e, r24	; 30
     daa:	7f c0       	rjmp	.+254    	; 0xeaa <USB_Device_ProcessControlRequest+0x256>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     dac:	20 58       	subi	r18, 0x80	; 128
     dae:	22 30       	cpi	r18, 0x02	; 2
     db0:	08 f0       	brcs	.+2      	; 0xdb4 <USB_Device_ProcessControlRequest+0x160>
     db2:	7b c0       	rjmp	.+246    	; 0xeaa <USB_Device_ProcessControlRequest+0x256>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     db4:	80 91 26 01 	lds	r24, 0x0126
     db8:	90 91 27 01 	lds	r25, 0x0127
     dbc:	8c 3d       	cpi	r24, 0xDC	; 220
     dbe:	23 e0       	ldi	r18, 0x03	; 3
     dc0:	92 07       	cpc	r25, r18
     dc2:	71 f5       	brne	.+92     	; 0xe20 <USB_Device_ProcessControlRequest+0x1cc>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     dc4:	83 e0       	ldi	r24, 0x03	; 3
     dc6:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     dc8:	8a e2       	ldi	r24, 0x2A	; 42
     dca:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     dcc:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     dce:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     dd0:	de 01       	movw	r26, r28
     dd2:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     dd4:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     dd6:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     dd8:	51 e2       	ldi	r21, 0x21	; 33
     dda:	e3 2f       	mov	r30, r19
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	50 93 57 00 	sts	0x0057, r21
     de2:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
     de4:	20 ff       	sbrs	r18, 0
     de6:	03 c0       	rjmp	.+6      	; 0xdee <USB_Device_ProcessControlRequest+0x19a>
					{
						SerialByte >>= 4;
     de8:	e2 95       	swap	r30
     dea:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     dec:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     dee:	ef 70       	andi	r30, 0x0F	; 15
     df0:	8e 2f       	mov	r24, r30
     df2:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     df4:	ea 30       	cpi	r30, 0x0A	; 10
     df6:	10 f0       	brcs	.+4      	; 0xdfc <USB_Device_ProcessControlRequest+0x1a8>
     df8:	c7 96       	adiw	r24, 0x37	; 55
     dfa:	01 c0       	rjmp	.+2      	; 0xdfe <USB_Device_ProcessControlRequest+0x1aa>
     dfc:	c0 96       	adiw	r24, 0x30	; 48
     dfe:	8d 93       	st	X+, r24
     e00:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     e02:	2f 5f       	subi	r18, 0xFF	; 255
     e04:	24 31       	cpi	r18, 0x14	; 20
     e06:	49 f7       	brne	.-46     	; 0xdda <USB_Device_ProcessControlRequest+0x186>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     e08:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e0a:	80 91 e8 00 	lds	r24, 0x00E8
     e0e:	87 7f       	andi	r24, 0xF7	; 247
     e10:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     e14:	6a e2       	ldi	r22, 0x2A	; 42
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	ce 01       	movw	r24, r28
     e1a:	01 96       	adiw	r24, 0x01	; 1
     e1c:	49 dc       	rcall	.-1902   	; 0x6b0 <Endpoint_Write_Control_Stream_LE>
     e1e:	12 c0       	rjmp	.+36     	; 0xe44 <USB_Device_ProcessControlRequest+0x1f0>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     e20:	ae 01       	movw	r20, r28
     e22:	4f 5f       	subi	r20, 0xFF	; 255
     e24:	5f 4f       	sbci	r21, 0xFF	; 255
     e26:	60 91 28 01 	lds	r22, 0x0128
     e2a:	c9 db       	rcall	.-2158   	; 0x5be <CALLBACK_USB_GetDescriptor>
     e2c:	00 97       	sbiw	r24, 0x00	; 0
     e2e:	09 f4       	brne	.+2      	; 0xe32 <USB_Device_ProcessControlRequest+0x1de>
     e30:	3c c0       	rjmp	.+120    	; 0xeaa <USB_Device_ProcessControlRequest+0x256>
     e32:	20 91 e8 00 	lds	r18, 0x00E8
     e36:	27 7f       	andi	r18, 0xF7	; 247
     e38:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     e3c:	bc 01       	movw	r22, r24
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	9a 81       	ldd	r25, Y+2	; 0x02
     e42:	8f dc       	rcall	.-1762   	; 0x762 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e44:	80 91 e8 00 	lds	r24, 0x00E8
     e48:	8b 77       	andi	r24, 0x7B	; 123
     e4a:	80 93 e8 00 	sts	0x00E8, r24
     e4e:	2d c0       	rjmp	.+90     	; 0xeaa <USB_Device_ProcessControlRequest+0x256>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     e50:	20 38       	cpi	r18, 0x80	; 128
     e52:	59 f5       	brne	.+86     	; 0xeaa <USB_Device_ProcessControlRequest+0x256>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e54:	80 91 e8 00 	lds	r24, 0x00E8
     e58:	87 7f       	andi	r24, 0xF7	; 247
     e5a:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     e5e:	80 91 20 01 	lds	r24, 0x0120
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e62:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e66:	80 91 e8 00 	lds	r24, 0x00E8
     e6a:	8e 77       	andi	r24, 0x7E	; 126
     e6c:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     e70:	46 dd       	rcall	.-1396   	; 0x8fe <Endpoint_ClearStatusStage>
     e72:	1b c0       	rjmp	.+54     	; 0xeaa <USB_Device_ProcessControlRequest+0x256>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     e74:	21 11       	cpse	r18, r1
     e76:	19 c0       	rjmp	.+50     	; 0xeaa <USB_Device_ProcessControlRequest+0x256>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     e78:	90 91 26 01 	lds	r25, 0x0126
     e7c:	92 30       	cpi	r25, 0x02	; 2
     e7e:	a8 f4       	brcc	.+42     	; 0xeaa <USB_Device_ProcessControlRequest+0x256>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e80:	80 91 e8 00 	lds	r24, 0x00E8
     e84:	87 7f       	andi	r24, 0xF7	; 247
     e86:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     e8a:	90 93 20 01 	sts	0x0120, r25

	Endpoint_ClearStatusStage();
     e8e:	37 dd       	rcall	.-1426   	; 0x8fe <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     e90:	80 91 20 01 	lds	r24, 0x0120
     e94:	81 11       	cpse	r24, r1
     e96:	04 c0       	rjmp	.+8      	; 0xea0 <USB_Device_ProcessControlRequest+0x24c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     e98:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     e9c:	87 ff       	sbrs	r24, 7
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <USB_Device_ProcessControlRequest+0x250>
     ea0:	84 e0       	ldi	r24, 0x04	; 4
     ea2:	01 c0       	rjmp	.+2      	; 0xea6 <USB_Device_ProcessControlRequest+0x252>
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
     ea8:	84 db       	rcall	.-2296   	; 0x5b2 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     eaa:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     eae:	83 ff       	sbrs	r24, 3
     eb0:	0a c0       	rjmp	.+20     	; 0xec6 <USB_Device_ProcessControlRequest+0x272>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     eb2:	80 91 e8 00 	lds	r24, 0x00E8
     eb6:	87 7f       	andi	r24, 0xF7	; 247
     eb8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     ebc:	80 91 eb 00 	lds	r24, 0x00EB
     ec0:	80 62       	ori	r24, 0x20	; 32
     ec2:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     ec6:	aa 96       	adiw	r28, 0x2a	; 42
     ec8:	0f b6       	in	r0, 0x3f	; 63
     eca:	f8 94       	cli
     ecc:	de bf       	out	0x3e, r29	; 62
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	cd bf       	out	0x3d, r28	; 61
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
     ed6:	1f 91       	pop	r17
     ed8:	08 95       	ret

00000eda <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     eda:	08 95       	ret

00000edc <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     edc:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     ede:	8e b3       	in	r24, 0x1e	; 30
     ee0:	88 23       	and	r24, r24
     ee2:	a9 f0       	breq	.+42     	; 0xf0e <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     ee4:	80 91 e9 00 	lds	r24, 0x00E9
     ee8:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     eea:	90 91 ec 00 	lds	r25, 0x00EC
     eee:	90 ff       	sbrs	r25, 0
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <USB_USBTask+0x1a>
     ef2:	90 e8       	ldi	r25, 0x80	; 128
     ef4:	01 c0       	rjmp	.+2      	; 0xef8 <USB_USBTask+0x1c>
     ef6:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     ef8:	c9 2f       	mov	r28, r25
     efa:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     efc:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f00:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     f04:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     f06:	a6 de       	rcall	.-692    	; 0xc54 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f08:	cf 70       	andi	r28, 0x0F	; 15
     f0a:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     f0e:	cf 91       	pop	r28
     f10:	08 95       	ret

00000f12 <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	ec 01       	movw	r28, r24
     f18:	fc 01       	movw	r30, r24
     f1a:	70 96       	adiw	r30, 0x10	; 16
     f1c:	8b e0       	ldi	r24, 0x0B	; 11
     f1e:	df 01       	movw	r26, r30
     f20:	1d 92       	st	X+, r1
     f22:	8a 95       	dec	r24
     f24:	e9 f7       	brne	.-6      	; 0xf20 <CDC_Device_ConfigureEndpoints+0xe>
     f26:	82 e0       	ldi	r24, 0x02	; 2
     f28:	8c 83       	std	Y+4, r24	; 0x04
     f2a:	89 87       	std	Y+9, r24	; 0x09
     f2c:	83 e0       	ldi	r24, 0x03	; 3
     f2e:	8e 87       	std	Y+14, r24	; 0x0e
     f30:	61 e0       	ldi	r22, 0x01	; 1
     f32:	ce 01       	movw	r24, r28
     f34:	01 96       	adiw	r24, 0x01	; 1
     f36:	a6 dc       	rcall	.-1716   	; 0x884 <Endpoint_ConfigureEndpointTable>
     f38:	88 23       	and	r24, r24
     f3a:	61 f0       	breq	.+24     	; 0xf54 <CDC_Device_ConfigureEndpoints+0x42>
     f3c:	61 e0       	ldi	r22, 0x01	; 1
     f3e:	ce 01       	movw	r24, r28
     f40:	06 96       	adiw	r24, 0x06	; 6
     f42:	a0 dc       	rcall	.-1728   	; 0x884 <Endpoint_ConfigureEndpointTable>
     f44:	88 23       	and	r24, r24
     f46:	31 f0       	breq	.+12     	; 0xf54 <CDC_Device_ConfigureEndpoints+0x42>
     f48:	61 e0       	ldi	r22, 0x01	; 1
     f4a:	ce 01       	movw	r24, r28
     f4c:	0b 96       	adiw	r24, 0x0b	; 11
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	98 cc       	rjmp	.-1744   	; 0x884 <Endpoint_ConfigureEndpointTable>
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	08 95       	ret

00000f5c <CDC_Device_SendData>:
     f5c:	0f 93       	push	r16
     f5e:	1f 93       	push	r17
     f60:	fc 01       	movw	r30, r24
     f62:	cb 01       	movw	r24, r22
     f64:	ba 01       	movw	r22, r20
     f66:	2e b3       	in	r18, 0x1e	; 30
     f68:	24 30       	cpi	r18, 0x04	; 4
     f6a:	89 f4       	brne	.+34     	; 0xf8e <CDC_Device_SendData+0x32>
     f6c:	04 89       	ldd	r16, Z+20	; 0x14
     f6e:	15 89       	ldd	r17, Z+21	; 0x15
     f70:	26 89       	ldd	r18, Z+22	; 0x16
     f72:	37 89       	ldd	r19, Z+23	; 0x17
     f74:	01 2b       	or	r16, r17
     f76:	02 2b       	or	r16, r18
     f78:	03 2b       	or	r16, r19
     f7a:	49 f0       	breq	.+18     	; 0xf8e <CDC_Device_SendData+0x32>
     f7c:	21 81       	ldd	r18, Z+1	; 0x01
     f7e:	2f 70       	andi	r18, 0x0F	; 15
     f80:	20 93 e9 00 	sts	0x00E9, r18
     f84:	40 e0       	ldi	r20, 0x00	; 0
     f86:	50 e0       	ldi	r21, 0x00	; 0
     f88:	1f 91       	pop	r17
     f8a:	0f 91       	pop	r16
     f8c:	4a cb       	rjmp	.-2412   	; 0x622 <Endpoint_Write_Stream_LE>
     f8e:	82 e0       	ldi	r24, 0x02	; 2
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	08 95       	ret

00000f96 <CDC_Device_Flush>:
     f96:	2e b3       	in	r18, 0x1e	; 30
     f98:	24 30       	cpi	r18, 0x04	; 4
     f9a:	41 f5       	brne	.+80     	; 0xfec <CDC_Device_Flush+0x56>
     f9c:	fc 01       	movw	r30, r24
     f9e:	44 89       	ldd	r20, Z+20	; 0x14
     fa0:	55 89       	ldd	r21, Z+21	; 0x15
     fa2:	66 89       	ldd	r22, Z+22	; 0x16
     fa4:	77 89       	ldd	r23, Z+23	; 0x17
     fa6:	45 2b       	or	r20, r21
     fa8:	46 2b       	or	r20, r22
     faa:	47 2b       	or	r20, r23
     fac:	f9 f0       	breq	.+62     	; 0xfec <CDC_Device_Flush+0x56>
     fae:	81 81       	ldd	r24, Z+1	; 0x01
     fb0:	8f 70       	andi	r24, 0x0F	; 15
     fb2:	80 93 e9 00 	sts	0x00E9, r24
     fb6:	20 91 f3 00 	lds	r18, 0x00F3
     fba:	80 91 f2 00 	lds	r24, 0x00F2
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	92 2b       	or	r25, r18
     fc2:	89 2b       	or	r24, r25
     fc4:	89 f0       	breq	.+34     	; 0xfe8 <CDC_Device_Flush+0x52>
     fc6:	90 91 e8 00 	lds	r25, 0x00E8
     fca:	80 91 e8 00 	lds	r24, 0x00E8
     fce:	8e 77       	andi	r24, 0x7E	; 126
     fd0:	80 93 e8 00 	sts	0x00E8, r24
     fd4:	95 fd       	sbrc	r25, 5
     fd6:	08 c0       	rjmp	.+16     	; 0xfe8 <CDC_Device_Flush+0x52>
     fd8:	b1 dc       	rcall	.-1694   	; 0x93c <Endpoint_WaitUntilReady>
     fda:	81 11       	cpse	r24, r1
     fdc:	08 c0       	rjmp	.+16     	; 0xfee <CDC_Device_Flush+0x58>
     fde:	80 91 e8 00 	lds	r24, 0x00E8
     fe2:	8e 77       	andi	r24, 0x7E	; 126
     fe4:	80 93 e8 00 	sts	0x00E8, r24
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	08 95       	ret
     fec:	82 e0       	ldi	r24, 0x02	; 2
     fee:	08 95       	ret

00000ff0 <CDC_Device_USBTask>:
     ff0:	2e b3       	in	r18, 0x1e	; 30
     ff2:	24 30       	cpi	r18, 0x04	; 4
     ff4:	89 f4       	brne	.+34     	; 0x1018 <CDC_Device_USBTask+0x28>
     ff6:	fc 01       	movw	r30, r24
     ff8:	44 89       	ldd	r20, Z+20	; 0x14
     ffa:	55 89       	ldd	r21, Z+21	; 0x15
     ffc:	66 89       	ldd	r22, Z+22	; 0x16
     ffe:	77 89       	ldd	r23, Z+23	; 0x17
    1000:	45 2b       	or	r20, r21
    1002:	46 2b       	or	r20, r22
    1004:	47 2b       	or	r20, r23
    1006:	41 f0       	breq	.+16     	; 0x1018 <CDC_Device_USBTask+0x28>
    1008:	21 81       	ldd	r18, Z+1	; 0x01
    100a:	2f 70       	andi	r18, 0x0F	; 15
    100c:	20 93 e9 00 	sts	0x00E9, r18
    1010:	20 91 e8 00 	lds	r18, 0x00E8
    1014:	20 fd       	sbrc	r18, 0
    1016:	bf cf       	rjmp	.-130    	; 0xf96 <CDC_Device_Flush>
    1018:	08 95       	ret

0000101a <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    101a:	08 95       	ret

0000101c <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1022:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    1026:	83 ff       	sbrs	r24, 3
    1028:	a5 c0       	rjmp	.+330    	; 0x1174 <CDC_Device_ProcessControlRequest+0x158>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    102a:	88 81       	ld	r24, Y
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	20 91 28 01 	lds	r18, 0x0128
    1032:	30 91 29 01 	lds	r19, 0x0129
    1036:	28 17       	cp	r18, r24
    1038:	39 07       	cpc	r19, r25
    103a:	09 f0       	breq	.+2      	; 0x103e <CDC_Device_ProcessControlRequest+0x22>
    103c:	9b c0       	rjmp	.+310    	; 0x1174 <CDC_Device_ProcessControlRequest+0x158>
	  return;

	switch (USB_ControlRequest.bRequest)
    103e:	80 91 25 01 	lds	r24, 0x0125
    1042:	81 32       	cpi	r24, 0x21	; 33
    1044:	61 f0       	breq	.+24     	; 0x105e <CDC_Device_ProcessControlRequest+0x42>
    1046:	20 f4       	brcc	.+8      	; 0x1050 <CDC_Device_ProcessControlRequest+0x34>
    1048:	80 32       	cpi	r24, 0x20	; 32
    104a:	09 f4       	brne	.+2      	; 0x104e <CDC_Device_ProcessControlRequest+0x32>
    104c:	3e c0       	rjmp	.+124    	; 0x10ca <CDC_Device_ProcessControlRequest+0xae>
    104e:	92 c0       	rjmp	.+292    	; 0x1174 <CDC_Device_ProcessControlRequest+0x158>
    1050:	82 32       	cpi	r24, 0x22	; 34
    1052:	09 f4       	brne	.+2      	; 0x1056 <CDC_Device_ProcessControlRequest+0x3a>
    1054:	6b c0       	rjmp	.+214    	; 0x112c <CDC_Device_ProcessControlRequest+0x110>
    1056:	83 32       	cpi	r24, 0x23	; 35
    1058:	09 f4       	brne	.+2      	; 0x105c <CDC_Device_ProcessControlRequest+0x40>
    105a:	7c c0       	rjmp	.+248    	; 0x1154 <CDC_Device_ProcessControlRequest+0x138>
    105c:	8b c0       	rjmp	.+278    	; 0x1174 <CDC_Device_ProcessControlRequest+0x158>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    105e:	80 91 24 01 	lds	r24, 0x0124
    1062:	81 3a       	cpi	r24, 0xA1	; 161
    1064:	09 f0       	breq	.+2      	; 0x1068 <CDC_Device_ProcessControlRequest+0x4c>
    1066:	86 c0       	rjmp	.+268    	; 0x1174 <CDC_Device_ProcessControlRequest+0x158>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1068:	80 91 e8 00 	lds	r24, 0x00E8
    106c:	87 7f       	andi	r24, 0xF7	; 247
    106e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1072:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    1076:	80 ff       	sbrs	r24, 0
    1078:	fc cf       	rjmp	.-8      	; 0x1072 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    107a:	4c 89       	ldd	r20, Y+20	; 0x14
    107c:	5d 89       	ldd	r21, Y+21	; 0x15
    107e:	6e 89       	ldd	r22, Y+22	; 0x16
    1080:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    1082:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
    1086:	bb 27       	eor	r27, r27
    1088:	a7 2f       	mov	r26, r23
    108a:	96 2f       	mov	r25, r22
    108c:	85 2f       	mov	r24, r21
    108e:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
    1092:	cb 01       	movw	r24, r22
    1094:	aa 27       	eor	r26, r26
    1096:	bb 27       	eor	r27, r27
    1098:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
    109c:	47 2f       	mov	r20, r23
    109e:	55 27       	eor	r21, r21
    10a0:	66 27       	eor	r22, r22
    10a2:	77 27       	eor	r23, r23
    10a4:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    10a8:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    10aa:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    10ae:	89 8d       	ldd	r24, Y+25	; 0x19
    10b0:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    10b4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    10b6:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10ba:	80 91 e8 00 	lds	r24, 0x00E8
    10be:	8e 77       	andi	r24, 0x7E	; 126
    10c0:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    10c8:	1a cc       	rjmp	.-1996   	; 0x8fe <Endpoint_ClearStatusStage>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    10ca:	80 91 24 01 	lds	r24, 0x0124
    10ce:	81 32       	cpi	r24, 0x21	; 33
    10d0:	09 f0       	breq	.+2      	; 0x10d4 <CDC_Device_ProcessControlRequest+0xb8>
    10d2:	50 c0       	rjmp	.+160    	; 0x1174 <CDC_Device_ProcessControlRequest+0x158>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10d4:	80 91 e8 00 	lds	r24, 0x00E8
    10d8:	87 7f       	andi	r24, 0xF7	; 247
    10da:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    10de:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    10e2:	82 fd       	sbrc	r24, 2
    10e4:	04 c0       	rjmp	.+8      	; 0x10ee <CDC_Device_ProcessControlRequest+0xd2>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    10e6:	8e b3       	in	r24, 0x1e	; 30
    10e8:	81 11       	cpse	r24, r1
    10ea:	f9 cf       	rjmp	.-14     	; 0x10de <CDC_Device_ProcessControlRequest+0xc2>
    10ec:	43 c0       	rjmp	.+134    	; 0x1174 <CDC_Device_ProcessControlRequest+0x158>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    10ee:	30 91 f1 00 	lds	r19, 0x00F1
				Data.Bytes[1] = UEDATX;
    10f2:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[2] = UEDATX;
    10f6:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[3] = UEDATX;
    10fa:	80 91 f1 00 	lds	r24, 0x00F1
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    10fe:	3c 8b       	std	Y+20, r19	; 0x14
    1100:	2d 8b       	std	Y+21, r18	; 0x15
    1102:	9e 8b       	std	Y+22, r25	; 0x16
    1104:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1106:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    110a:	88 8f       	std	Y+24, r24	; 0x18
    110c:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    1110:	89 8f       	std	Y+25, r24	; 0x19
    1112:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    1116:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1118:	80 91 e8 00 	lds	r24, 0x00E8
    111c:	8b 77       	andi	r24, 0x7B	; 123
    111e:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    1122:	ed db       	rcall	.-2086   	; 0x8fe <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    1124:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    112a:	77 cf       	rjmp	.-274    	; 0x101a <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    112c:	80 91 24 01 	lds	r24, 0x0124
    1130:	81 32       	cpi	r24, 0x21	; 33
    1132:	01 f5       	brne	.+64     	; 0x1174 <CDC_Device_ProcessControlRequest+0x158>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1134:	80 91 e8 00 	lds	r24, 0x00E8
    1138:	87 7f       	andi	r24, 0xF7	; 247
    113a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    113e:	df db       	rcall	.-2114   	; 0x8fe <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    1140:	80 91 26 01 	lds	r24, 0x0126
    1144:	90 91 27 01 	lds	r25, 0x0127
    1148:	99 8b       	std	Y+17, r25	; 0x11
    114a:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    114c:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    114e:	df 91       	pop	r29
    1150:	cf 91       	pop	r28
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    1152:	63 cf       	rjmp	.-314    	; 0x101a <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1154:	80 91 24 01 	lds	r24, 0x0124
    1158:	81 32       	cpi	r24, 0x21	; 33
    115a:	61 f4       	brne	.+24     	; 0x1174 <CDC_Device_ProcessControlRequest+0x158>
    115c:	80 91 e8 00 	lds	r24, 0x00E8
    1160:	87 7f       	andi	r24, 0xF7	; 247
    1162:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1166:	cb db       	rcall	.-2154   	; 0x8fe <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1168:	60 91 26 01 	lds	r22, 0x0126
    116c:	ce 01       	movw	r24, r28
			}

			break;
	}
}
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1172:	53 cf       	rjmp	.-346    	; 0x101a <CDC_Device_Event_Stub>
			}

			break;
	}
}
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	08 95       	ret

0000117a <__subsf3>:
    117a:	50 58       	subi	r21, 0x80	; 128

0000117c <__addsf3>:
    117c:	bb 27       	eor	r27, r27
    117e:	aa 27       	eor	r26, r26
    1180:	0e d0       	rcall	.+28     	; 0x119e <__addsf3x>
    1182:	1c c1       	rjmp	.+568    	; 0x13bc <__fp_round>
    1184:	0d d1       	rcall	.+538    	; 0x13a0 <__fp_pscA>
    1186:	30 f0       	brcs	.+12     	; 0x1194 <__addsf3+0x18>
    1188:	12 d1       	rcall	.+548    	; 0x13ae <__fp_pscB>
    118a:	20 f0       	brcs	.+8      	; 0x1194 <__addsf3+0x18>
    118c:	31 f4       	brne	.+12     	; 0x119a <__addsf3+0x1e>
    118e:	9f 3f       	cpi	r25, 0xFF	; 255
    1190:	11 f4       	brne	.+4      	; 0x1196 <__addsf3+0x1a>
    1192:	1e f4       	brtc	.+6      	; 0x119a <__addsf3+0x1e>
    1194:	02 c1       	rjmp	.+516    	; 0x139a <__fp_nan>
    1196:	0e f4       	brtc	.+2      	; 0x119a <__addsf3+0x1e>
    1198:	e0 95       	com	r30
    119a:	e7 fb       	bst	r30, 7
    119c:	f8 c0       	rjmp	.+496    	; 0x138e <__fp_inf>

0000119e <__addsf3x>:
    119e:	e9 2f       	mov	r30, r25
    11a0:	1e d1       	rcall	.+572    	; 0x13de <__fp_split3>
    11a2:	80 f3       	brcs	.-32     	; 0x1184 <__addsf3+0x8>
    11a4:	ba 17       	cp	r27, r26
    11a6:	62 07       	cpc	r22, r18
    11a8:	73 07       	cpc	r23, r19
    11aa:	84 07       	cpc	r24, r20
    11ac:	95 07       	cpc	r25, r21
    11ae:	18 f0       	brcs	.+6      	; 0x11b6 <__addsf3x+0x18>
    11b0:	71 f4       	brne	.+28     	; 0x11ce <__addsf3x+0x30>
    11b2:	9e f5       	brtc	.+102    	; 0x121a <__addsf3x+0x7c>
    11b4:	36 c1       	rjmp	.+620    	; 0x1422 <__fp_zero>
    11b6:	0e f4       	brtc	.+2      	; 0x11ba <__addsf3x+0x1c>
    11b8:	e0 95       	com	r30
    11ba:	0b 2e       	mov	r0, r27
    11bc:	ba 2f       	mov	r27, r26
    11be:	a0 2d       	mov	r26, r0
    11c0:	0b 01       	movw	r0, r22
    11c2:	b9 01       	movw	r22, r18
    11c4:	90 01       	movw	r18, r0
    11c6:	0c 01       	movw	r0, r24
    11c8:	ca 01       	movw	r24, r20
    11ca:	a0 01       	movw	r20, r0
    11cc:	11 24       	eor	r1, r1
    11ce:	ff 27       	eor	r31, r31
    11d0:	59 1b       	sub	r21, r25
    11d2:	99 f0       	breq	.+38     	; 0x11fa <__addsf3x+0x5c>
    11d4:	59 3f       	cpi	r21, 0xF9	; 249
    11d6:	50 f4       	brcc	.+20     	; 0x11ec <__addsf3x+0x4e>
    11d8:	50 3e       	cpi	r21, 0xE0	; 224
    11da:	68 f1       	brcs	.+90     	; 0x1236 <__addsf3x+0x98>
    11dc:	1a 16       	cp	r1, r26
    11de:	f0 40       	sbci	r31, 0x00	; 0
    11e0:	a2 2f       	mov	r26, r18
    11e2:	23 2f       	mov	r18, r19
    11e4:	34 2f       	mov	r19, r20
    11e6:	44 27       	eor	r20, r20
    11e8:	58 5f       	subi	r21, 0xF8	; 248
    11ea:	f3 cf       	rjmp	.-26     	; 0x11d2 <__addsf3x+0x34>
    11ec:	46 95       	lsr	r20
    11ee:	37 95       	ror	r19
    11f0:	27 95       	ror	r18
    11f2:	a7 95       	ror	r26
    11f4:	f0 40       	sbci	r31, 0x00	; 0
    11f6:	53 95       	inc	r21
    11f8:	c9 f7       	brne	.-14     	; 0x11ec <__addsf3x+0x4e>
    11fa:	7e f4       	brtc	.+30     	; 0x121a <__addsf3x+0x7c>
    11fc:	1f 16       	cp	r1, r31
    11fe:	ba 0b       	sbc	r27, r26
    1200:	62 0b       	sbc	r22, r18
    1202:	73 0b       	sbc	r23, r19
    1204:	84 0b       	sbc	r24, r20
    1206:	ba f0       	brmi	.+46     	; 0x1236 <__addsf3x+0x98>
    1208:	91 50       	subi	r25, 0x01	; 1
    120a:	a1 f0       	breq	.+40     	; 0x1234 <__addsf3x+0x96>
    120c:	ff 0f       	add	r31, r31
    120e:	bb 1f       	adc	r27, r27
    1210:	66 1f       	adc	r22, r22
    1212:	77 1f       	adc	r23, r23
    1214:	88 1f       	adc	r24, r24
    1216:	c2 f7       	brpl	.-16     	; 0x1208 <__addsf3x+0x6a>
    1218:	0e c0       	rjmp	.+28     	; 0x1236 <__addsf3x+0x98>
    121a:	ba 0f       	add	r27, r26
    121c:	62 1f       	adc	r22, r18
    121e:	73 1f       	adc	r23, r19
    1220:	84 1f       	adc	r24, r20
    1222:	48 f4       	brcc	.+18     	; 0x1236 <__addsf3x+0x98>
    1224:	87 95       	ror	r24
    1226:	77 95       	ror	r23
    1228:	67 95       	ror	r22
    122a:	b7 95       	ror	r27
    122c:	f7 95       	ror	r31
    122e:	9e 3f       	cpi	r25, 0xFE	; 254
    1230:	08 f0       	brcs	.+2      	; 0x1234 <__addsf3x+0x96>
    1232:	b3 cf       	rjmp	.-154    	; 0x119a <__addsf3+0x1e>
    1234:	93 95       	inc	r25
    1236:	88 0f       	add	r24, r24
    1238:	08 f0       	brcs	.+2      	; 0x123c <__addsf3x+0x9e>
    123a:	99 27       	eor	r25, r25
    123c:	ee 0f       	add	r30, r30
    123e:	97 95       	ror	r25
    1240:	87 95       	ror	r24
    1242:	08 95       	ret

00001244 <__divsf3>:
    1244:	0c d0       	rcall	.+24     	; 0x125e <__divsf3x>
    1246:	ba c0       	rjmp	.+372    	; 0x13bc <__fp_round>
    1248:	b2 d0       	rcall	.+356    	; 0x13ae <__fp_pscB>
    124a:	40 f0       	brcs	.+16     	; 0x125c <__divsf3+0x18>
    124c:	a9 d0       	rcall	.+338    	; 0x13a0 <__fp_pscA>
    124e:	30 f0       	brcs	.+12     	; 0x125c <__divsf3+0x18>
    1250:	21 f4       	brne	.+8      	; 0x125a <__divsf3+0x16>
    1252:	5f 3f       	cpi	r21, 0xFF	; 255
    1254:	19 f0       	breq	.+6      	; 0x125c <__divsf3+0x18>
    1256:	9b c0       	rjmp	.+310    	; 0x138e <__fp_inf>
    1258:	51 11       	cpse	r21, r1
    125a:	e4 c0       	rjmp	.+456    	; 0x1424 <__fp_szero>
    125c:	9e c0       	rjmp	.+316    	; 0x139a <__fp_nan>

0000125e <__divsf3x>:
    125e:	bf d0       	rcall	.+382    	; 0x13de <__fp_split3>
    1260:	98 f3       	brcs	.-26     	; 0x1248 <__divsf3+0x4>

00001262 <__divsf3_pse>:
    1262:	99 23       	and	r25, r25
    1264:	c9 f3       	breq	.-14     	; 0x1258 <__divsf3+0x14>
    1266:	55 23       	and	r21, r21
    1268:	b1 f3       	breq	.-20     	; 0x1256 <__divsf3+0x12>
    126a:	95 1b       	sub	r25, r21
    126c:	55 0b       	sbc	r21, r21
    126e:	bb 27       	eor	r27, r27
    1270:	aa 27       	eor	r26, r26
    1272:	62 17       	cp	r22, r18
    1274:	73 07       	cpc	r23, r19
    1276:	84 07       	cpc	r24, r20
    1278:	38 f0       	brcs	.+14     	; 0x1288 <__divsf3_pse+0x26>
    127a:	9f 5f       	subi	r25, 0xFF	; 255
    127c:	5f 4f       	sbci	r21, 0xFF	; 255
    127e:	22 0f       	add	r18, r18
    1280:	33 1f       	adc	r19, r19
    1282:	44 1f       	adc	r20, r20
    1284:	aa 1f       	adc	r26, r26
    1286:	a9 f3       	breq	.-22     	; 0x1272 <__divsf3_pse+0x10>
    1288:	33 d0       	rcall	.+102    	; 0x12f0 <__divsf3_pse+0x8e>
    128a:	0e 2e       	mov	r0, r30
    128c:	3a f0       	brmi	.+14     	; 0x129c <__divsf3_pse+0x3a>
    128e:	e0 e8       	ldi	r30, 0x80	; 128
    1290:	30 d0       	rcall	.+96     	; 0x12f2 <__divsf3_pse+0x90>
    1292:	91 50       	subi	r25, 0x01	; 1
    1294:	50 40       	sbci	r21, 0x00	; 0
    1296:	e6 95       	lsr	r30
    1298:	00 1c       	adc	r0, r0
    129a:	ca f7       	brpl	.-14     	; 0x128e <__divsf3_pse+0x2c>
    129c:	29 d0       	rcall	.+82     	; 0x12f0 <__divsf3_pse+0x8e>
    129e:	fe 2f       	mov	r31, r30
    12a0:	27 d0       	rcall	.+78     	; 0x12f0 <__divsf3_pse+0x8e>
    12a2:	66 0f       	add	r22, r22
    12a4:	77 1f       	adc	r23, r23
    12a6:	88 1f       	adc	r24, r24
    12a8:	bb 1f       	adc	r27, r27
    12aa:	26 17       	cp	r18, r22
    12ac:	37 07       	cpc	r19, r23
    12ae:	48 07       	cpc	r20, r24
    12b0:	ab 07       	cpc	r26, r27
    12b2:	b0 e8       	ldi	r27, 0x80	; 128
    12b4:	09 f0       	breq	.+2      	; 0x12b8 <__divsf3_pse+0x56>
    12b6:	bb 0b       	sbc	r27, r27
    12b8:	80 2d       	mov	r24, r0
    12ba:	bf 01       	movw	r22, r30
    12bc:	ff 27       	eor	r31, r31
    12be:	93 58       	subi	r25, 0x83	; 131
    12c0:	5f 4f       	sbci	r21, 0xFF	; 255
    12c2:	2a f0       	brmi	.+10     	; 0x12ce <__divsf3_pse+0x6c>
    12c4:	9e 3f       	cpi	r25, 0xFE	; 254
    12c6:	51 05       	cpc	r21, r1
    12c8:	68 f0       	brcs	.+26     	; 0x12e4 <__divsf3_pse+0x82>
    12ca:	61 c0       	rjmp	.+194    	; 0x138e <__fp_inf>
    12cc:	ab c0       	rjmp	.+342    	; 0x1424 <__fp_szero>
    12ce:	5f 3f       	cpi	r21, 0xFF	; 255
    12d0:	ec f3       	brlt	.-6      	; 0x12cc <__divsf3_pse+0x6a>
    12d2:	98 3e       	cpi	r25, 0xE8	; 232
    12d4:	dc f3       	brlt	.-10     	; 0x12cc <__divsf3_pse+0x6a>
    12d6:	86 95       	lsr	r24
    12d8:	77 95       	ror	r23
    12da:	67 95       	ror	r22
    12dc:	b7 95       	ror	r27
    12de:	f7 95       	ror	r31
    12e0:	9f 5f       	subi	r25, 0xFF	; 255
    12e2:	c9 f7       	brne	.-14     	; 0x12d6 <__divsf3_pse+0x74>
    12e4:	88 0f       	add	r24, r24
    12e6:	91 1d       	adc	r25, r1
    12e8:	96 95       	lsr	r25
    12ea:	87 95       	ror	r24
    12ec:	97 f9       	bld	r25, 7
    12ee:	08 95       	ret
    12f0:	e1 e0       	ldi	r30, 0x01	; 1
    12f2:	66 0f       	add	r22, r22
    12f4:	77 1f       	adc	r23, r23
    12f6:	88 1f       	adc	r24, r24
    12f8:	bb 1f       	adc	r27, r27
    12fa:	62 17       	cp	r22, r18
    12fc:	73 07       	cpc	r23, r19
    12fe:	84 07       	cpc	r24, r20
    1300:	ba 07       	cpc	r27, r26
    1302:	20 f0       	brcs	.+8      	; 0x130c <__divsf3_pse+0xaa>
    1304:	62 1b       	sub	r22, r18
    1306:	73 0b       	sbc	r23, r19
    1308:	84 0b       	sbc	r24, r20
    130a:	ba 0b       	sbc	r27, r26
    130c:	ee 1f       	adc	r30, r30
    130e:	88 f7       	brcc	.-30     	; 0x12f2 <__divsf3_pse+0x90>
    1310:	e0 95       	com	r30
    1312:	08 95       	ret

00001314 <__floatunsisf>:
    1314:	e8 94       	clt
    1316:	09 c0       	rjmp	.+18     	; 0x132a <__floatsisf+0x12>

00001318 <__floatsisf>:
    1318:	97 fb       	bst	r25, 7
    131a:	3e f4       	brtc	.+14     	; 0x132a <__floatsisf+0x12>
    131c:	90 95       	com	r25
    131e:	80 95       	com	r24
    1320:	70 95       	com	r23
    1322:	61 95       	neg	r22
    1324:	7f 4f       	sbci	r23, 0xFF	; 255
    1326:	8f 4f       	sbci	r24, 0xFF	; 255
    1328:	9f 4f       	sbci	r25, 0xFF	; 255
    132a:	99 23       	and	r25, r25
    132c:	a9 f0       	breq	.+42     	; 0x1358 <__floatsisf+0x40>
    132e:	f9 2f       	mov	r31, r25
    1330:	96 e9       	ldi	r25, 0x96	; 150
    1332:	bb 27       	eor	r27, r27
    1334:	93 95       	inc	r25
    1336:	f6 95       	lsr	r31
    1338:	87 95       	ror	r24
    133a:	77 95       	ror	r23
    133c:	67 95       	ror	r22
    133e:	b7 95       	ror	r27
    1340:	f1 11       	cpse	r31, r1
    1342:	f8 cf       	rjmp	.-16     	; 0x1334 <__floatsisf+0x1c>
    1344:	fa f4       	brpl	.+62     	; 0x1384 <__floatsisf+0x6c>
    1346:	bb 0f       	add	r27, r27
    1348:	11 f4       	brne	.+4      	; 0x134e <__floatsisf+0x36>
    134a:	60 ff       	sbrs	r22, 0
    134c:	1b c0       	rjmp	.+54     	; 0x1384 <__floatsisf+0x6c>
    134e:	6f 5f       	subi	r22, 0xFF	; 255
    1350:	7f 4f       	sbci	r23, 0xFF	; 255
    1352:	8f 4f       	sbci	r24, 0xFF	; 255
    1354:	9f 4f       	sbci	r25, 0xFF	; 255
    1356:	16 c0       	rjmp	.+44     	; 0x1384 <__floatsisf+0x6c>
    1358:	88 23       	and	r24, r24
    135a:	11 f0       	breq	.+4      	; 0x1360 <__floatsisf+0x48>
    135c:	96 e9       	ldi	r25, 0x96	; 150
    135e:	11 c0       	rjmp	.+34     	; 0x1382 <__floatsisf+0x6a>
    1360:	77 23       	and	r23, r23
    1362:	21 f0       	breq	.+8      	; 0x136c <__floatsisf+0x54>
    1364:	9e e8       	ldi	r25, 0x8E	; 142
    1366:	87 2f       	mov	r24, r23
    1368:	76 2f       	mov	r23, r22
    136a:	05 c0       	rjmp	.+10     	; 0x1376 <__floatsisf+0x5e>
    136c:	66 23       	and	r22, r22
    136e:	71 f0       	breq	.+28     	; 0x138c <__floatsisf+0x74>
    1370:	96 e8       	ldi	r25, 0x86	; 134
    1372:	86 2f       	mov	r24, r22
    1374:	70 e0       	ldi	r23, 0x00	; 0
    1376:	60 e0       	ldi	r22, 0x00	; 0
    1378:	2a f0       	brmi	.+10     	; 0x1384 <__floatsisf+0x6c>
    137a:	9a 95       	dec	r25
    137c:	66 0f       	add	r22, r22
    137e:	77 1f       	adc	r23, r23
    1380:	88 1f       	adc	r24, r24
    1382:	da f7       	brpl	.-10     	; 0x137a <__floatsisf+0x62>
    1384:	88 0f       	add	r24, r24
    1386:	96 95       	lsr	r25
    1388:	87 95       	ror	r24
    138a:	97 f9       	bld	r25, 7
    138c:	08 95       	ret

0000138e <__fp_inf>:
    138e:	97 f9       	bld	r25, 7
    1390:	9f 67       	ori	r25, 0x7F	; 127
    1392:	80 e8       	ldi	r24, 0x80	; 128
    1394:	70 e0       	ldi	r23, 0x00	; 0
    1396:	60 e0       	ldi	r22, 0x00	; 0
    1398:	08 95       	ret

0000139a <__fp_nan>:
    139a:	9f ef       	ldi	r25, 0xFF	; 255
    139c:	80 ec       	ldi	r24, 0xC0	; 192
    139e:	08 95       	ret

000013a0 <__fp_pscA>:
    13a0:	00 24       	eor	r0, r0
    13a2:	0a 94       	dec	r0
    13a4:	16 16       	cp	r1, r22
    13a6:	17 06       	cpc	r1, r23
    13a8:	18 06       	cpc	r1, r24
    13aa:	09 06       	cpc	r0, r25
    13ac:	08 95       	ret

000013ae <__fp_pscB>:
    13ae:	00 24       	eor	r0, r0
    13b0:	0a 94       	dec	r0
    13b2:	12 16       	cp	r1, r18
    13b4:	13 06       	cpc	r1, r19
    13b6:	14 06       	cpc	r1, r20
    13b8:	05 06       	cpc	r0, r21
    13ba:	08 95       	ret

000013bc <__fp_round>:
    13bc:	09 2e       	mov	r0, r25
    13be:	03 94       	inc	r0
    13c0:	00 0c       	add	r0, r0
    13c2:	11 f4       	brne	.+4      	; 0x13c8 <__fp_round+0xc>
    13c4:	88 23       	and	r24, r24
    13c6:	52 f0       	brmi	.+20     	; 0x13dc <__fp_round+0x20>
    13c8:	bb 0f       	add	r27, r27
    13ca:	40 f4       	brcc	.+16     	; 0x13dc <__fp_round+0x20>
    13cc:	bf 2b       	or	r27, r31
    13ce:	11 f4       	brne	.+4      	; 0x13d4 <__fp_round+0x18>
    13d0:	60 ff       	sbrs	r22, 0
    13d2:	04 c0       	rjmp	.+8      	; 0x13dc <__fp_round+0x20>
    13d4:	6f 5f       	subi	r22, 0xFF	; 255
    13d6:	7f 4f       	sbci	r23, 0xFF	; 255
    13d8:	8f 4f       	sbci	r24, 0xFF	; 255
    13da:	9f 4f       	sbci	r25, 0xFF	; 255
    13dc:	08 95       	ret

000013de <__fp_split3>:
    13de:	57 fd       	sbrc	r21, 7
    13e0:	90 58       	subi	r25, 0x80	; 128
    13e2:	44 0f       	add	r20, r20
    13e4:	55 1f       	adc	r21, r21
    13e6:	59 f0       	breq	.+22     	; 0x13fe <__fp_splitA+0x10>
    13e8:	5f 3f       	cpi	r21, 0xFF	; 255
    13ea:	71 f0       	breq	.+28     	; 0x1408 <__fp_splitA+0x1a>
    13ec:	47 95       	ror	r20

000013ee <__fp_splitA>:
    13ee:	88 0f       	add	r24, r24
    13f0:	97 fb       	bst	r25, 7
    13f2:	99 1f       	adc	r25, r25
    13f4:	61 f0       	breq	.+24     	; 0x140e <__fp_splitA+0x20>
    13f6:	9f 3f       	cpi	r25, 0xFF	; 255
    13f8:	79 f0       	breq	.+30     	; 0x1418 <__fp_splitA+0x2a>
    13fa:	87 95       	ror	r24
    13fc:	08 95       	ret
    13fe:	12 16       	cp	r1, r18
    1400:	13 06       	cpc	r1, r19
    1402:	14 06       	cpc	r1, r20
    1404:	55 1f       	adc	r21, r21
    1406:	f2 cf       	rjmp	.-28     	; 0x13ec <__fp_split3+0xe>
    1408:	46 95       	lsr	r20
    140a:	f1 df       	rcall	.-30     	; 0x13ee <__fp_splitA>
    140c:	08 c0       	rjmp	.+16     	; 0x141e <__fp_splitA+0x30>
    140e:	16 16       	cp	r1, r22
    1410:	17 06       	cpc	r1, r23
    1412:	18 06       	cpc	r1, r24
    1414:	99 1f       	adc	r25, r25
    1416:	f1 cf       	rjmp	.-30     	; 0x13fa <__fp_splitA+0xc>
    1418:	86 95       	lsr	r24
    141a:	71 05       	cpc	r23, r1
    141c:	61 05       	cpc	r22, r1
    141e:	08 94       	sec
    1420:	08 95       	ret

00001422 <__fp_zero>:
    1422:	e8 94       	clt

00001424 <__fp_szero>:
    1424:	bb 27       	eor	r27, r27
    1426:	66 27       	eor	r22, r22
    1428:	77 27       	eor	r23, r23
    142a:	cb 01       	movw	r24, r22
    142c:	97 f9       	bld	r25, 7
    142e:	08 95       	ret

00001430 <__tablejump2__>:
    1430:	ee 0f       	add	r30, r30
    1432:	ff 1f       	adc	r31, r31

00001434 <__tablejump__>:
    1434:	05 90       	lpm	r0, Z+
    1436:	f4 91       	lpm	r31, Z
    1438:	e0 2d       	mov	r30, r0
    143a:	09 94       	ijmp

0000143c <dtostrf>:
    143c:	ef 92       	push	r14
    143e:	0f 93       	push	r16
    1440:	1f 93       	push	r17
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
    1446:	e8 01       	movw	r28, r16
    1448:	47 ff       	sbrs	r20, 7
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <dtostrf+0x14>
    144c:	34 e1       	ldi	r19, 0x14	; 20
    144e:	01 c0       	rjmp	.+2      	; 0x1452 <dtostrf+0x16>
    1450:	34 e0       	ldi	r19, 0x04	; 4
    1452:	e4 2f       	mov	r30, r20
    1454:	ff 27       	eor	r31, r31
    1456:	e7 fd       	sbrc	r30, 7
    1458:	f0 95       	com	r31
    145a:	f7 ff       	sbrs	r31, 7
    145c:	03 c0       	rjmp	.+6      	; 0x1464 <dtostrf+0x28>
    145e:	f1 95       	neg	r31
    1460:	e1 95       	neg	r30
    1462:	f1 09       	sbc	r31, r1
    1464:	e3 2e       	mov	r14, r19
    1466:	02 2f       	mov	r16, r18
    1468:	2e 2f       	mov	r18, r30
    146a:	ae 01       	movw	r20, r28
    146c:	07 d0       	rcall	.+14     	; 0x147c <dtoa_prf>
    146e:	ce 01       	movw	r24, r28
    1470:	df 91       	pop	r29
    1472:	cf 91       	pop	r28
    1474:	1f 91       	pop	r17
    1476:	0f 91       	pop	r16
    1478:	ef 90       	pop	r14
    147a:	08 95       	ret

0000147c <dtoa_prf>:
    147c:	6f 92       	push	r6
    147e:	7f 92       	push	r7
    1480:	9f 92       	push	r9
    1482:	af 92       	push	r10
    1484:	bf 92       	push	r11
    1486:	cf 92       	push	r12
    1488:	df 92       	push	r13
    148a:	ef 92       	push	r14
    148c:	ff 92       	push	r15
    148e:	0f 93       	push	r16
    1490:	1f 93       	push	r17
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	29 97       	sbiw	r28, 0x09	; 9
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	f8 94       	cli
    14a0:	de bf       	out	0x3e, r29	; 62
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	cd bf       	out	0x3d, r28	; 61
    14a6:	6a 01       	movw	r12, r20
    14a8:	b2 2e       	mov	r11, r18
    14aa:	10 2f       	mov	r17, r16
    14ac:	0c 33       	cpi	r16, 0x3C	; 60
    14ae:	20 f4       	brcc	.+8      	; 0x14b8 <dtoa_prf+0x3c>
    14b0:	ff 24       	eor	r15, r15
    14b2:	f3 94       	inc	r15
    14b4:	f0 0e       	add	r15, r16
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <dtoa_prf+0x40>
    14b8:	4c e3       	ldi	r20, 0x3C	; 60
    14ba:	f4 2e       	mov	r15, r20
    14bc:	0f 2d       	mov	r16, r15
    14be:	27 e0       	ldi	r18, 0x07	; 7
    14c0:	ae 01       	movw	r20, r28
    14c2:	4f 5f       	subi	r20, 0xFF	; 255
    14c4:	5f 4f       	sbci	r21, 0xFF	; 255
    14c6:	57 d1       	rcall	.+686    	; 0x1776 <__ftoa_engine>
    14c8:	79 81       	ldd	r23, Y+1	; 0x01
    14ca:	27 2f       	mov	r18, r23
    14cc:	29 70       	andi	r18, 0x09	; 9
    14ce:	21 30       	cpi	r18, 0x01	; 1
    14d0:	31 f0       	breq	.+12     	; 0x14de <dtoa_prf+0x62>
    14d2:	e1 fc       	sbrc	r14, 1
    14d4:	06 c0       	rjmp	.+12     	; 0x14e2 <dtoa_prf+0x66>
    14d6:	e0 fc       	sbrc	r14, 0
    14d8:	06 c0       	rjmp	.+12     	; 0x14e6 <dtoa_prf+0x6a>
    14da:	60 e0       	ldi	r22, 0x00	; 0
    14dc:	05 c0       	rjmp	.+10     	; 0x14e8 <dtoa_prf+0x6c>
    14de:	6d e2       	ldi	r22, 0x2D	; 45
    14e0:	03 c0       	rjmp	.+6      	; 0x14e8 <dtoa_prf+0x6c>
    14e2:	6b e2       	ldi	r22, 0x2B	; 43
    14e4:	01 c0       	rjmp	.+2      	; 0x14e8 <dtoa_prf+0x6c>
    14e6:	60 e2       	ldi	r22, 0x20	; 32
    14e8:	ae 2d       	mov	r26, r14
    14ea:	a0 71       	andi	r26, 0x10	; 16
    14ec:	73 ff       	sbrs	r23, 3
    14ee:	36 c0       	rjmp	.+108    	; 0x155c <dtoa_prf+0xe0>
    14f0:	66 23       	and	r22, r22
    14f2:	11 f0       	breq	.+4      	; 0x14f8 <dtoa_prf+0x7c>
    14f4:	84 e0       	ldi	r24, 0x04	; 4
    14f6:	01 c0       	rjmp	.+2      	; 0x14fa <dtoa_prf+0x7e>
    14f8:	83 e0       	ldi	r24, 0x03	; 3
    14fa:	8b 15       	cp	r24, r11
    14fc:	10 f4       	brcc	.+4      	; 0x1502 <dtoa_prf+0x86>
    14fe:	b8 1a       	sub	r11, r24
    1500:	01 c0       	rjmp	.+2      	; 0x1504 <dtoa_prf+0x88>
    1502:	b1 2c       	mov	r11, r1
    1504:	a1 11       	cpse	r26, r1
    1506:	0b c0       	rjmp	.+22     	; 0x151e <dtoa_prf+0xa2>
    1508:	f6 01       	movw	r30, r12
    150a:	8b 2d       	mov	r24, r11
    150c:	90 e2       	ldi	r25, 0x20	; 32
    150e:	88 23       	and	r24, r24
    1510:	19 f0       	breq	.+6      	; 0x1518 <dtoa_prf+0x9c>
    1512:	91 93       	st	Z+, r25
    1514:	81 50       	subi	r24, 0x01	; 1
    1516:	fb cf       	rjmp	.-10     	; 0x150e <dtoa_prf+0x92>
    1518:	cb 0c       	add	r12, r11
    151a:	d1 1c       	adc	r13, r1
    151c:	b1 2c       	mov	r11, r1
    151e:	66 23       	and	r22, r22
    1520:	31 f0       	breq	.+12     	; 0x152e <dtoa_prf+0xb2>
    1522:	f6 01       	movw	r30, r12
    1524:	60 83       	st	Z, r22
    1526:	96 01       	movw	r18, r12
    1528:	2f 5f       	subi	r18, 0xFF	; 255
    152a:	3f 4f       	sbci	r19, 0xFF	; 255
    152c:	69 01       	movw	r12, r18
    152e:	c6 01       	movw	r24, r12
    1530:	03 96       	adiw	r24, 0x03	; 3
    1532:	e2 fe       	sbrs	r14, 2
    1534:	05 c0       	rjmp	.+10     	; 0x1540 <dtoa_prf+0xc4>
    1536:	2e e4       	ldi	r18, 0x4E	; 78
    1538:	f6 01       	movw	r30, r12
    153a:	20 83       	st	Z, r18
    153c:	31 e4       	ldi	r19, 0x41	; 65
    153e:	04 c0       	rjmp	.+8      	; 0x1548 <dtoa_prf+0xcc>
    1540:	2e e6       	ldi	r18, 0x6E	; 110
    1542:	f6 01       	movw	r30, r12
    1544:	20 83       	st	Z, r18
    1546:	31 e6       	ldi	r19, 0x61	; 97
    1548:	31 83       	std	Z+1, r19	; 0x01
    154a:	22 83       	std	Z+2, r18	; 0x02
    154c:	fc 01       	movw	r30, r24
    154e:	2b 2d       	mov	r18, r11
    1550:	30 e2       	ldi	r19, 0x20	; 32
    1552:	22 23       	and	r18, r18
    1554:	f1 f1       	breq	.+124    	; 0x15d2 <dtoa_prf+0x156>
    1556:	31 93       	st	Z+, r19
    1558:	21 50       	subi	r18, 0x01	; 1
    155a:	fb cf       	rjmp	.-10     	; 0x1552 <dtoa_prf+0xd6>
    155c:	72 ff       	sbrs	r23, 2
    155e:	40 c0       	rjmp	.+128    	; 0x15e0 <dtoa_prf+0x164>
    1560:	66 23       	and	r22, r22
    1562:	11 f0       	breq	.+4      	; 0x1568 <dtoa_prf+0xec>
    1564:	84 e0       	ldi	r24, 0x04	; 4
    1566:	01 c0       	rjmp	.+2      	; 0x156a <dtoa_prf+0xee>
    1568:	83 e0       	ldi	r24, 0x03	; 3
    156a:	8b 15       	cp	r24, r11
    156c:	10 f4       	brcc	.+4      	; 0x1572 <dtoa_prf+0xf6>
    156e:	b8 1a       	sub	r11, r24
    1570:	01 c0       	rjmp	.+2      	; 0x1574 <dtoa_prf+0xf8>
    1572:	b1 2c       	mov	r11, r1
    1574:	a1 11       	cpse	r26, r1
    1576:	0b c0       	rjmp	.+22     	; 0x158e <dtoa_prf+0x112>
    1578:	f6 01       	movw	r30, r12
    157a:	8b 2d       	mov	r24, r11
    157c:	90 e2       	ldi	r25, 0x20	; 32
    157e:	88 23       	and	r24, r24
    1580:	19 f0       	breq	.+6      	; 0x1588 <dtoa_prf+0x10c>
    1582:	91 93       	st	Z+, r25
    1584:	81 50       	subi	r24, 0x01	; 1
    1586:	fb cf       	rjmp	.-10     	; 0x157e <dtoa_prf+0x102>
    1588:	cb 0c       	add	r12, r11
    158a:	d1 1c       	adc	r13, r1
    158c:	b1 2c       	mov	r11, r1
    158e:	66 23       	and	r22, r22
    1590:	31 f0       	breq	.+12     	; 0x159e <dtoa_prf+0x122>
    1592:	f6 01       	movw	r30, r12
    1594:	60 83       	st	Z, r22
    1596:	96 01       	movw	r18, r12
    1598:	2f 5f       	subi	r18, 0xFF	; 255
    159a:	3f 4f       	sbci	r19, 0xFF	; 255
    159c:	69 01       	movw	r12, r18
    159e:	c6 01       	movw	r24, r12
    15a0:	03 96       	adiw	r24, 0x03	; 3
    15a2:	e2 fe       	sbrs	r14, 2
    15a4:	07 c0       	rjmp	.+14     	; 0x15b4 <dtoa_prf+0x138>
    15a6:	29 e4       	ldi	r18, 0x49	; 73
    15a8:	f6 01       	movw	r30, r12
    15aa:	20 83       	st	Z, r18
    15ac:	2e e4       	ldi	r18, 0x4E	; 78
    15ae:	21 83       	std	Z+1, r18	; 0x01
    15b0:	26 e4       	ldi	r18, 0x46	; 70
    15b2:	06 c0       	rjmp	.+12     	; 0x15c0 <dtoa_prf+0x144>
    15b4:	29 e6       	ldi	r18, 0x69	; 105
    15b6:	f6 01       	movw	r30, r12
    15b8:	20 83       	st	Z, r18
    15ba:	2e e6       	ldi	r18, 0x6E	; 110
    15bc:	21 83       	std	Z+1, r18	; 0x01
    15be:	26 e6       	ldi	r18, 0x66	; 102
    15c0:	22 83       	std	Z+2, r18	; 0x02
    15c2:	fc 01       	movw	r30, r24
    15c4:	2b 2d       	mov	r18, r11
    15c6:	30 e2       	ldi	r19, 0x20	; 32
    15c8:	22 23       	and	r18, r18
    15ca:	19 f0       	breq	.+6      	; 0x15d2 <dtoa_prf+0x156>
    15cc:	31 93       	st	Z+, r19
    15ce:	21 50       	subi	r18, 0x01	; 1
    15d0:	fb cf       	rjmp	.-10     	; 0x15c8 <dtoa_prf+0x14c>
    15d2:	fc 01       	movw	r30, r24
    15d4:	eb 0d       	add	r30, r11
    15d6:	f1 1d       	adc	r31, r1
    15d8:	10 82       	st	Z, r1
    15da:	8e ef       	ldi	r24, 0xFE	; 254
    15dc:	9f ef       	ldi	r25, 0xFF	; 255
    15de:	b7 c0       	rjmp	.+366    	; 0x174e <dtoa_prf+0x2d2>
    15e0:	b1 e0       	ldi	r27, 0x01	; 1
    15e2:	61 11       	cpse	r22, r1
    15e4:	01 c0       	rjmp	.+2      	; 0x15e8 <dtoa_prf+0x16c>
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	4b 2f       	mov	r20, r27
    15ea:	50 e0       	ldi	r21, 0x00	; 0
    15ec:	18 16       	cp	r1, r24
    15ee:	19 06       	cpc	r1, r25
    15f0:	24 f4       	brge	.+8      	; 0x15fa <dtoa_prf+0x17e>
    15f2:	9c 01       	movw	r18, r24
    15f4:	2f 5f       	subi	r18, 0xFF	; 255
    15f6:	3f 4f       	sbci	r19, 0xFF	; 255
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <dtoa_prf+0x182>
    15fa:	21 e0       	ldi	r18, 0x01	; 1
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	24 0f       	add	r18, r20
    1600:	35 1f       	adc	r19, r21
    1602:	11 23       	and	r17, r17
    1604:	29 f0       	breq	.+10     	; 0x1610 <dtoa_prf+0x194>
    1606:	41 2f       	mov	r20, r17
    1608:	50 e0       	ldi	r21, 0x00	; 0
    160a:	4f 5f       	subi	r20, 0xFF	; 255
    160c:	5f 4f       	sbci	r21, 0xFF	; 255
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <dtoa_prf+0x198>
    1610:	40 e0       	ldi	r20, 0x00	; 0
    1612:	50 e0       	ldi	r21, 0x00	; 0
    1614:	42 0f       	add	r20, r18
    1616:	53 1f       	adc	r21, r19
    1618:	2b 2d       	mov	r18, r11
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	42 17       	cp	r20, r18
    161e:	53 07       	cpc	r21, r19
    1620:	14 f4       	brge	.+4      	; 0x1626 <dtoa_prf+0x1aa>
    1622:	b4 1a       	sub	r11, r20
    1624:	01 c0       	rjmp	.+2      	; 0x1628 <dtoa_prf+0x1ac>
    1626:	b1 2c       	mov	r11, r1
    1628:	2e 2d       	mov	r18, r14
    162a:	28 71       	andi	r18, 0x18	; 24
    162c:	59 f4       	brne	.+22     	; 0x1644 <dtoa_prf+0x1c8>
    162e:	f6 01       	movw	r30, r12
    1630:	2b 2d       	mov	r18, r11
    1632:	30 e2       	ldi	r19, 0x20	; 32
    1634:	22 23       	and	r18, r18
    1636:	19 f0       	breq	.+6      	; 0x163e <dtoa_prf+0x1c2>
    1638:	31 93       	st	Z+, r19
    163a:	21 50       	subi	r18, 0x01	; 1
    163c:	fb cf       	rjmp	.-10     	; 0x1634 <dtoa_prf+0x1b8>
    163e:	cb 0c       	add	r12, r11
    1640:	d1 1c       	adc	r13, r1
    1642:	b1 2c       	mov	r11, r1
    1644:	bb 23       	and	r27, r27
    1646:	31 f0       	breq	.+12     	; 0x1654 <dtoa_prf+0x1d8>
    1648:	f6 01       	movw	r30, r12
    164a:	60 83       	st	Z, r22
    164c:	96 01       	movw	r18, r12
    164e:	2f 5f       	subi	r18, 0xFF	; 255
    1650:	3f 4f       	sbci	r19, 0xFF	; 255
    1652:	69 01       	movw	r12, r18
    1654:	a1 11       	cpse	r26, r1
    1656:	0b c0       	rjmp	.+22     	; 0x166e <dtoa_prf+0x1f2>
    1658:	f6 01       	movw	r30, r12
    165a:	2b 2d       	mov	r18, r11
    165c:	30 e3       	ldi	r19, 0x30	; 48
    165e:	22 23       	and	r18, r18
    1660:	19 f0       	breq	.+6      	; 0x1668 <dtoa_prf+0x1ec>
    1662:	31 93       	st	Z+, r19
    1664:	21 50       	subi	r18, 0x01	; 1
    1666:	fb cf       	rjmp	.-10     	; 0x165e <dtoa_prf+0x1e2>
    1668:	cb 0c       	add	r12, r11
    166a:	d1 1c       	adc	r13, r1
    166c:	b1 2c       	mov	r11, r1
    166e:	f8 0e       	add	r15, r24
    1670:	0a 81       	ldd	r16, Y+2	; 0x02
    1672:	37 2f       	mov	r19, r23
    1674:	30 71       	andi	r19, 0x10	; 16
    1676:	a3 2e       	mov	r10, r19
    1678:	74 ff       	sbrs	r23, 4
    167a:	03 c0       	rjmp	.+6      	; 0x1682 <dtoa_prf+0x206>
    167c:	01 33       	cpi	r16, 0x31	; 49
    167e:	09 f4       	brne	.+2      	; 0x1682 <dtoa_prf+0x206>
    1680:	fa 94       	dec	r15
    1682:	1f 14       	cp	r1, r15
    1684:	2c f4       	brge	.+10     	; 0x1690 <dtoa_prf+0x214>
    1686:	2f 2d       	mov	r18, r15
    1688:	29 30       	cpi	r18, 0x09	; 9
    168a:	18 f0       	brcs	.+6      	; 0x1692 <dtoa_prf+0x216>
    168c:	28 e0       	ldi	r18, 0x08	; 8
    168e:	01 c0       	rjmp	.+2      	; 0x1692 <dtoa_prf+0x216>
    1690:	21 e0       	ldi	r18, 0x01	; 1
    1692:	68 2f       	mov	r22, r24
    1694:	39 2f       	mov	r19, r25
    1696:	97 ff       	sbrs	r25, 7
    1698:	02 c0       	rjmp	.+4      	; 0x169e <dtoa_prf+0x222>
    169a:	60 e0       	ldi	r22, 0x00	; 0
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	46 2f       	mov	r20, r22
    16a0:	53 2f       	mov	r21, r19
    16a2:	61 2c       	mov	r6, r1
    16a4:	71 2c       	mov	r7, r1
    16a6:	3e e2       	ldi	r19, 0x2E	; 46
    16a8:	93 2e       	mov	r9, r19
    16aa:	bc 01       	movw	r22, r24
    16ac:	62 1b       	sub	r22, r18
    16ae:	71 09       	sbc	r23, r1
    16b0:	9b 01       	movw	r18, r22
    16b2:	dc 01       	movw	r26, r24
    16b4:	a4 1b       	sub	r26, r20
    16b6:	b5 0b       	sbc	r27, r21
    16b8:	e1 e0       	ldi	r30, 0x01	; 1
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	ec 0f       	add	r30, r28
    16be:	fd 1f       	adc	r31, r29
    16c0:	ae 0f       	add	r26, r30
    16c2:	bf 1f       	adc	r27, r31
    16c4:	e1 2e       	mov	r14, r17
    16c6:	f1 2c       	mov	r15, r1
    16c8:	f1 94       	neg	r15
    16ca:	e1 94       	neg	r14
    16cc:	f1 08       	sbc	r15, r1
    16ce:	4f 3f       	cpi	r20, 0xFF	; 255
    16d0:	ff ef       	ldi	r31, 0xFF	; 255
    16d2:	5f 07       	cpc	r21, r31
    16d4:	31 f4       	brne	.+12     	; 0x16e2 <dtoa_prf+0x266>
    16d6:	f6 01       	movw	r30, r12
    16d8:	90 82       	st	Z, r9
    16da:	b6 01       	movw	r22, r12
    16dc:	6f 5f       	subi	r22, 0xFF	; 255
    16de:	7f 4f       	sbci	r23, 0xFF	; 255
    16e0:	6b 01       	movw	r12, r22
    16e2:	84 17       	cp	r24, r20
    16e4:	95 07       	cpc	r25, r21
    16e6:	4c f0       	brlt	.+18     	; 0x16fa <dtoa_prf+0x27e>
    16e8:	24 17       	cp	r18, r20
    16ea:	35 07       	cpc	r19, r21
    16ec:	34 f4       	brge	.+12     	; 0x16fa <dtoa_prf+0x27e>
    16ee:	bd 01       	movw	r22, r26
    16f0:	66 0d       	add	r22, r6
    16f2:	77 1d       	adc	r23, r7
    16f4:	fb 01       	movw	r30, r22
    16f6:	11 81       	ldd	r17, Z+1	; 0x01
    16f8:	01 c0       	rjmp	.+2      	; 0x16fc <dtoa_prf+0x280>
    16fa:	10 e3       	ldi	r17, 0x30	; 48
    16fc:	41 50       	subi	r20, 0x01	; 1
    16fe:	51 09       	sbc	r21, r1
    1700:	ff ef       	ldi	r31, 0xFF	; 255
    1702:	6f 1a       	sub	r6, r31
    1704:	7f 0a       	sbc	r7, r31
    1706:	b6 01       	movw	r22, r12
    1708:	6f 5f       	subi	r22, 0xFF	; 255
    170a:	7f 4f       	sbci	r23, 0xFF	; 255
    170c:	4e 15       	cp	r20, r14
    170e:	5f 05       	cpc	r21, r15
    1710:	24 f0       	brlt	.+8      	; 0x171a <dtoa_prf+0x29e>
    1712:	f6 01       	movw	r30, r12
    1714:	10 83       	st	Z, r17
    1716:	6b 01       	movw	r12, r22
    1718:	da cf       	rjmp	.-76     	; 0x16ce <dtoa_prf+0x252>
    171a:	48 17       	cp	r20, r24
    171c:	59 07       	cpc	r21, r25
    171e:	39 f4       	brne	.+14     	; 0x172e <dtoa_prf+0x2b2>
    1720:	06 33       	cpi	r16, 0x36	; 54
    1722:	20 f4       	brcc	.+8      	; 0x172c <dtoa_prf+0x2b0>
    1724:	05 33       	cpi	r16, 0x35	; 53
    1726:	19 f4       	brne	.+6      	; 0x172e <dtoa_prf+0x2b2>
    1728:	a1 10       	cpse	r10, r1
    172a:	01 c0       	rjmp	.+2      	; 0x172e <dtoa_prf+0x2b2>
    172c:	11 e3       	ldi	r17, 0x31	; 49
    172e:	f6 01       	movw	r30, r12
    1730:	10 83       	st	Z, r17
    1732:	fb 01       	movw	r30, r22
    1734:	8b 2d       	mov	r24, r11
    1736:	90 e2       	ldi	r25, 0x20	; 32
    1738:	88 23       	and	r24, r24
    173a:	19 f0       	breq	.+6      	; 0x1742 <dtoa_prf+0x2c6>
    173c:	91 93       	st	Z+, r25
    173e:	81 50       	subi	r24, 0x01	; 1
    1740:	fb cf       	rjmp	.-10     	; 0x1738 <dtoa_prf+0x2bc>
    1742:	fb 01       	movw	r30, r22
    1744:	eb 0d       	add	r30, r11
    1746:	f1 1d       	adc	r31, r1
    1748:	10 82       	st	Z, r1
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	29 96       	adiw	r28, 0x09	; 9
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	f8 94       	cli
    1754:	de bf       	out	0x3e, r29	; 62
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	cd bf       	out	0x3d, r28	; 61
    175a:	df 91       	pop	r29
    175c:	cf 91       	pop	r28
    175e:	1f 91       	pop	r17
    1760:	0f 91       	pop	r16
    1762:	ff 90       	pop	r15
    1764:	ef 90       	pop	r14
    1766:	df 90       	pop	r13
    1768:	cf 90       	pop	r12
    176a:	bf 90       	pop	r11
    176c:	af 90       	pop	r10
    176e:	9f 90       	pop	r9
    1770:	7f 90       	pop	r7
    1772:	6f 90       	pop	r6
    1774:	08 95       	ret

00001776 <__ftoa_engine>:
    1776:	28 30       	cpi	r18, 0x08	; 8
    1778:	08 f0       	brcs	.+2      	; 0x177c <__ftoa_engine+0x6>
    177a:	27 e0       	ldi	r18, 0x07	; 7
    177c:	33 27       	eor	r19, r19
    177e:	da 01       	movw	r26, r20
    1780:	99 0f       	add	r25, r25
    1782:	31 1d       	adc	r19, r1
    1784:	87 fd       	sbrc	r24, 7
    1786:	91 60       	ori	r25, 0x01	; 1
    1788:	00 96       	adiw	r24, 0x00	; 0
    178a:	61 05       	cpc	r22, r1
    178c:	71 05       	cpc	r23, r1
    178e:	39 f4       	brne	.+14     	; 0x179e <__ftoa_engine+0x28>
    1790:	32 60       	ori	r19, 0x02	; 2
    1792:	2e 5f       	subi	r18, 0xFE	; 254
    1794:	3d 93       	st	X+, r19
    1796:	30 e3       	ldi	r19, 0x30	; 48
    1798:	2a 95       	dec	r18
    179a:	e1 f7       	brne	.-8      	; 0x1794 <__ftoa_engine+0x1e>
    179c:	08 95       	ret
    179e:	9f 3f       	cpi	r25, 0xFF	; 255
    17a0:	30 f0       	brcs	.+12     	; 0x17ae <__ftoa_engine+0x38>
    17a2:	80 38       	cpi	r24, 0x80	; 128
    17a4:	71 05       	cpc	r23, r1
    17a6:	61 05       	cpc	r22, r1
    17a8:	09 f0       	breq	.+2      	; 0x17ac <__ftoa_engine+0x36>
    17aa:	3c 5f       	subi	r19, 0xFC	; 252
    17ac:	3c 5f       	subi	r19, 0xFC	; 252
    17ae:	3d 93       	st	X+, r19
    17b0:	91 30       	cpi	r25, 0x01	; 1
    17b2:	08 f0       	brcs	.+2      	; 0x17b6 <__ftoa_engine+0x40>
    17b4:	80 68       	ori	r24, 0x80	; 128
    17b6:	91 1d       	adc	r25, r1
    17b8:	df 93       	push	r29
    17ba:	cf 93       	push	r28
    17bc:	1f 93       	push	r17
    17be:	0f 93       	push	r16
    17c0:	ff 92       	push	r15
    17c2:	ef 92       	push	r14
    17c4:	19 2f       	mov	r17, r25
    17c6:	98 7f       	andi	r25, 0xF8	; 248
    17c8:	96 95       	lsr	r25
    17ca:	e9 2f       	mov	r30, r25
    17cc:	96 95       	lsr	r25
    17ce:	96 95       	lsr	r25
    17d0:	e9 0f       	add	r30, r25
    17d2:	ff 27       	eor	r31, r31
    17d4:	ea 55       	subi	r30, 0x5A	; 90
    17d6:	fe 4f       	sbci	r31, 0xFE	; 254
    17d8:	99 27       	eor	r25, r25
    17da:	33 27       	eor	r19, r19
    17dc:	ee 24       	eor	r14, r14
    17de:	ff 24       	eor	r15, r15
    17e0:	a7 01       	movw	r20, r14
    17e2:	e7 01       	movw	r28, r14
    17e4:	05 90       	lpm	r0, Z+
    17e6:	08 94       	sec
    17e8:	07 94       	ror	r0
    17ea:	28 f4       	brcc	.+10     	; 0x17f6 <__ftoa_engine+0x80>
    17ec:	36 0f       	add	r19, r22
    17ee:	e7 1e       	adc	r14, r23
    17f0:	f8 1e       	adc	r15, r24
    17f2:	49 1f       	adc	r20, r25
    17f4:	51 1d       	adc	r21, r1
    17f6:	66 0f       	add	r22, r22
    17f8:	77 1f       	adc	r23, r23
    17fa:	88 1f       	adc	r24, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	06 94       	lsr	r0
    1800:	a1 f7       	brne	.-24     	; 0x17ea <__ftoa_engine+0x74>
    1802:	05 90       	lpm	r0, Z+
    1804:	07 94       	ror	r0
    1806:	28 f4       	brcc	.+10     	; 0x1812 <__ftoa_engine+0x9c>
    1808:	e7 0e       	add	r14, r23
    180a:	f8 1e       	adc	r15, r24
    180c:	49 1f       	adc	r20, r25
    180e:	56 1f       	adc	r21, r22
    1810:	c1 1d       	adc	r28, r1
    1812:	77 0f       	add	r23, r23
    1814:	88 1f       	adc	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	66 1f       	adc	r22, r22
    181a:	06 94       	lsr	r0
    181c:	a1 f7       	brne	.-24     	; 0x1806 <__ftoa_engine+0x90>
    181e:	05 90       	lpm	r0, Z+
    1820:	07 94       	ror	r0
    1822:	28 f4       	brcc	.+10     	; 0x182e <__ftoa_engine+0xb8>
    1824:	f8 0e       	add	r15, r24
    1826:	49 1f       	adc	r20, r25
    1828:	56 1f       	adc	r21, r22
    182a:	c7 1f       	adc	r28, r23
    182c:	d1 1d       	adc	r29, r1
    182e:	88 0f       	add	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	66 1f       	adc	r22, r22
    1834:	77 1f       	adc	r23, r23
    1836:	06 94       	lsr	r0
    1838:	a1 f7       	brne	.-24     	; 0x1822 <__ftoa_engine+0xac>
    183a:	05 90       	lpm	r0, Z+
    183c:	07 94       	ror	r0
    183e:	20 f4       	brcc	.+8      	; 0x1848 <__ftoa_engine+0xd2>
    1840:	49 0f       	add	r20, r25
    1842:	56 1f       	adc	r21, r22
    1844:	c7 1f       	adc	r28, r23
    1846:	d8 1f       	adc	r29, r24
    1848:	99 0f       	add	r25, r25
    184a:	66 1f       	adc	r22, r22
    184c:	77 1f       	adc	r23, r23
    184e:	88 1f       	adc	r24, r24
    1850:	06 94       	lsr	r0
    1852:	a9 f7       	brne	.-22     	; 0x183e <__ftoa_engine+0xc8>
    1854:	84 91       	lpm	r24, Z
    1856:	10 95       	com	r17
    1858:	17 70       	andi	r17, 0x07	; 7
    185a:	41 f0       	breq	.+16     	; 0x186c <__ftoa_engine+0xf6>
    185c:	d6 95       	lsr	r29
    185e:	c7 95       	ror	r28
    1860:	57 95       	ror	r21
    1862:	47 95       	ror	r20
    1864:	f7 94       	ror	r15
    1866:	e7 94       	ror	r14
    1868:	1a 95       	dec	r17
    186a:	c1 f7       	brne	.-16     	; 0x185c <__ftoa_engine+0xe6>
    186c:	ec e4       	ldi	r30, 0x4C	; 76
    186e:	f1 e0       	ldi	r31, 0x01	; 1
    1870:	68 94       	set
    1872:	15 90       	lpm	r1, Z+
    1874:	15 91       	lpm	r17, Z+
    1876:	35 91       	lpm	r19, Z+
    1878:	65 91       	lpm	r22, Z+
    187a:	95 91       	lpm	r25, Z+
    187c:	05 90       	lpm	r0, Z+
    187e:	7f e2       	ldi	r23, 0x2F	; 47
    1880:	73 95       	inc	r23
    1882:	e1 18       	sub	r14, r1
    1884:	f1 0a       	sbc	r15, r17
    1886:	43 0b       	sbc	r20, r19
    1888:	56 0b       	sbc	r21, r22
    188a:	c9 0b       	sbc	r28, r25
    188c:	d0 09       	sbc	r29, r0
    188e:	c0 f7       	brcc	.-16     	; 0x1880 <__ftoa_engine+0x10a>
    1890:	e1 0c       	add	r14, r1
    1892:	f1 1e       	adc	r15, r17
    1894:	43 1f       	adc	r20, r19
    1896:	56 1f       	adc	r21, r22
    1898:	c9 1f       	adc	r28, r25
    189a:	d0 1d       	adc	r29, r0
    189c:	7e f4       	brtc	.+30     	; 0x18bc <__ftoa_engine+0x146>
    189e:	70 33       	cpi	r23, 0x30	; 48
    18a0:	11 f4       	brne	.+4      	; 0x18a6 <__ftoa_engine+0x130>
    18a2:	8a 95       	dec	r24
    18a4:	e6 cf       	rjmp	.-52     	; 0x1872 <__ftoa_engine+0xfc>
    18a6:	e8 94       	clt
    18a8:	01 50       	subi	r16, 0x01	; 1
    18aa:	30 f0       	brcs	.+12     	; 0x18b8 <__ftoa_engine+0x142>
    18ac:	08 0f       	add	r16, r24
    18ae:	0a f4       	brpl	.+2      	; 0x18b2 <__ftoa_engine+0x13c>
    18b0:	00 27       	eor	r16, r16
    18b2:	02 17       	cp	r16, r18
    18b4:	08 f4       	brcc	.+2      	; 0x18b8 <__ftoa_engine+0x142>
    18b6:	20 2f       	mov	r18, r16
    18b8:	23 95       	inc	r18
    18ba:	02 2f       	mov	r16, r18
    18bc:	7a 33       	cpi	r23, 0x3A	; 58
    18be:	28 f0       	brcs	.+10     	; 0x18ca <__ftoa_engine+0x154>
    18c0:	79 e3       	ldi	r23, 0x39	; 57
    18c2:	7d 93       	st	X+, r23
    18c4:	2a 95       	dec	r18
    18c6:	e9 f7       	brne	.-6      	; 0x18c2 <__ftoa_engine+0x14c>
    18c8:	10 c0       	rjmp	.+32     	; 0x18ea <__ftoa_engine+0x174>
    18ca:	7d 93       	st	X+, r23
    18cc:	2a 95       	dec	r18
    18ce:	89 f6       	brne	.-94     	; 0x1872 <__ftoa_engine+0xfc>
    18d0:	06 94       	lsr	r0
    18d2:	97 95       	ror	r25
    18d4:	67 95       	ror	r22
    18d6:	37 95       	ror	r19
    18d8:	17 95       	ror	r17
    18da:	17 94       	ror	r1
    18dc:	e1 18       	sub	r14, r1
    18de:	f1 0a       	sbc	r15, r17
    18e0:	43 0b       	sbc	r20, r19
    18e2:	56 0b       	sbc	r21, r22
    18e4:	c9 0b       	sbc	r28, r25
    18e6:	d0 09       	sbc	r29, r0
    18e8:	98 f0       	brcs	.+38     	; 0x1910 <__ftoa_engine+0x19a>
    18ea:	23 95       	inc	r18
    18ec:	7e 91       	ld	r23, -X
    18ee:	73 95       	inc	r23
    18f0:	7a 33       	cpi	r23, 0x3A	; 58
    18f2:	08 f0       	brcs	.+2      	; 0x18f6 <__ftoa_engine+0x180>
    18f4:	70 e3       	ldi	r23, 0x30	; 48
    18f6:	7c 93       	st	X, r23
    18f8:	20 13       	cpse	r18, r16
    18fa:	b8 f7       	brcc	.-18     	; 0x18ea <__ftoa_engine+0x174>
    18fc:	7e 91       	ld	r23, -X
    18fe:	70 61       	ori	r23, 0x10	; 16
    1900:	7d 93       	st	X+, r23
    1902:	30 f0       	brcs	.+12     	; 0x1910 <__ftoa_engine+0x19a>
    1904:	83 95       	inc	r24
    1906:	71 e3       	ldi	r23, 0x31	; 49
    1908:	7d 93       	st	X+, r23
    190a:	70 e3       	ldi	r23, 0x30	; 48
    190c:	2a 95       	dec	r18
    190e:	e1 f7       	brne	.-8      	; 0x1908 <__ftoa_engine+0x192>
    1910:	11 24       	eor	r1, r1
    1912:	ef 90       	pop	r14
    1914:	ff 90       	pop	r15
    1916:	0f 91       	pop	r16
    1918:	1f 91       	pop	r17
    191a:	cf 91       	pop	r28
    191c:	df 91       	pop	r29
    191e:	99 27       	eor	r25, r25
    1920:	87 fd       	sbrc	r24, 7
    1922:	90 95       	com	r25
    1924:	08 95       	ret

00001926 <_exit>:
    1926:	f8 94       	cli

00001928 <__stop_program>:
    1928:	ff cf       	rjmp	.-2      	; 0x1928 <__stop_program>
